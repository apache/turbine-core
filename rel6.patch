diff --git a/.gitignore b/.gitignore
index 6a849b47..db18097e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,10 @@
 target
 maven.log
 velocity.log*
+
+maven-eclipse.xml
+*.iml
+
 *~
 .classpath
 .project
@@ -11,3 +15,5 @@ logs
 *.ser
 
 *torque.usersettings.properties
+/.apt_generated/
+/.apt_generated_tests/
diff --git a/conf/test/CompleteTurbineResources.properties b/conf/test/CompleteTurbineResources.properties
index 624c0fd3..4df93ad8 100644
--- a/conf/test/CompleteTurbineResources.properties
+++ b/conf/test/CompleteTurbineResources.properties
@@ -329,6 +329,26 @@ services.TemplateService.classname=org.apache.turbine.services.template.TurbineT
 services.UIService.classname = org.apache.turbine.services.ui.TurbineUIService
 # services.SessionService.classname=org.apache.turbine.services.session.TurbineSessionService
 
+services.DateTimeFormatterService.classname= org.apache.turbine.services.localization.DateTimeFormatterService
+services.DateTimeFormatterService.earlyInit=true
+
+#default is ZoneId.systemDefault()
+datetime.zoneId=Europe/Berlin
+#Australia/Sydney
+
+# default is MM/dd/yyyy
+#datetime.format=dd.MM.yyyy
+
+# default is true
+#datetime.use.turbine.locale=false
+
+# default is false
+#tool.use.request.locale=true
+
+# default is en_US
+#locale.default.language=de
+#locale.default.country=DE
+
 # Turn on the appropriate template service.
 services.VelocityService.classname=org.apache.turbine.services.velocity.TurbineVelocityService
 
@@ -472,6 +492,10 @@ tool.request.l10n=org.apache.turbine.services.localization.LocalizationTool
 # This pull tool is to allow for easy formatting of Date object into Strings
 tool.request.dateFormatter=org.apache.turbine.services.pull.util.DateFormatter
 
+# This pull tool is to allow for easy formatting of Datetime / TemporalAccessor object into Strings
+#
+tool.request.dateTimeFormatter=org.apache.turbine.services.pull.util.DateTimeFormatterTool
+
 # Use this tool if you need a place to store data that will persist between
 # requests.  Any data stored using this tool will be stored in the session.
 tool.session.sessionData=org.apache.turbine.services.pull.util.SessionData
@@ -502,6 +526,7 @@ tool.ui.css = skins.css
 # links generated from the $content pull tool.
 #
 tool.content.want.encoding = false
+tool.link.want.encoding = false
 
 #
 # Both the link and the content tool normally return absolute URIs
@@ -654,3 +679,11 @@ services.URLMapperService.classname=org.apache.turbine.services.urlmapper.Turbin
 #tool.request.mlink=org.apache.turbine.services.urlmapper.MappedTemplateLink
 
 services.URLMapperService.configFile = conf/turbine-url-mapping.xml
+
+#
+#
+# Additional Services 
+#
+#
+services.ServiceWithService.classname=org.apache.turbine.services.ServiceWithServiceInjection
+services.ServiceWithService2.classname=org.apache.turbine.services.ServiceWithServiceInjection2
diff --git a/conf/test/TorqueTest.properties b/conf/test/TorqueTest.properties
index 1e443d86..35884b7a 100644
--- a/conf/test/TorqueTest.properties
+++ b/conf/test/TorqueTest.properties
@@ -22,19 +22,22 @@ torque.defaults.pool.defaultTestOnBorrow=true
 torque.defaults.pool.validationQuery=SELECT 1
 
 torque.idbroker.cleverquantity=true
-torque.idbroker.prefetch=true
+torque.idbroker.prefetch=false
 torque.idbroker.usenewconnection=true
 
 torque.database.default=default
 torque.database.schema =
 # supported auto, hsqldb, mysql..
-torque.database.default.adapter=hsqldb
+#torque.database.default.adapter=hsqldb
+torque.database.default.adapter=mymysql
+torque.database.default.adapter.mymysql.className=org.apache.torque.adapter.MysqlAdapter
+
 # dbcp2 
 torque.dsfactory.default.factory= org.apache.torque.dsfactory.SharedPool2DataSourceFactory
 
 torque.dsfactory.default.pool.defaultTestOnBorrow=true
 torque.dsfactory.default.pool.validationQuery=SELECT 1 from INFORMATION_SCHEMA.SYSTEM_USERS
-torque.dsfactory.default.connection.driver = org.hsqldb.jdbcDriver
-torque.dsfactory.default.connection.url = jdbc:hsqldb:mem:
-torque.dsfactory.default.connection.user = sa
-torque.dsfactory.default.connection.password =
+#torque.dsfactory.default.connection.driver = org.hsqldb.jdbcDriver
+#torque.dsfactory.default.connection.url = jdbc:hsqldb:mem:
+#torque.dsfactory.default.connection.user = sa
+#torque.dsfactory.default.connection.password =
diff --git a/conf/test/TurbineURLMapperServiceTest.properties b/conf/test/TurbineURLMapperServiceTest.properties
index 0a7c7915..ae3e62df 100644
--- a/conf/test/TurbineURLMapperServiceTest.properties
+++ b/conf/test/TurbineURLMapperServiceTest.properties
@@ -24,7 +24,7 @@
 log4j2.file = log4j2.xml
 
 # resource relative to context
-pipeline.default.descriptor = /conf/turbine-classic-pipeline.xml
+pipeline.default.descriptor = /conf/turbine-classic-pipeline-extended.xml
 
 
 # If module.cache=true, then how large should we make the hashtables
diff --git a/conf/test/docker-manager/CompleteTurbineResources.properties b/conf/test/docker-manager/CompleteTurbineResources.properties
index 10cd8ad6..cbaa2c2d 100644
--- a/conf/test/docker-manager/CompleteTurbineResources.properties
+++ b/conf/test/docker-manager/CompleteTurbineResources.properties
@@ -504,6 +504,7 @@ tool.ui.css = skins.css
 # links generated from the $content pull tool.
 #
 tool.content.want.encoding = false
+tool.link.want.encoding = false
 
 #
 # Both the link and the content tool normally return absolute URIs
diff --git a/conf/test/fulcrumComponentConfiguration.xml b/conf/test/fulcrumComponentConfiguration.xml
index c45ee5bf..30003e01 100644
--- a/conf/test/fulcrumComponentConfiguration.xml
+++ b/conf/test/fulcrumComponentConfiguration.xml
@@ -110,5 +110,7 @@
             </properties>
         </configuration>
     </quartz>
+    
+    <serviceWithServiceInjection/>
 
 </componentConfig>
diff --git a/conf/test/fulcrumRoleConfiguration.xml b/conf/test/fulcrumRoleConfiguration.xml
index cc8cfe0d..dd2468f9 100644
--- a/conf/test/fulcrumRoleConfiguration.xml
+++ b/conf/test/fulcrumRoleConfiguration.xml
@@ -47,6 +47,13 @@
         name="org.apache.fulcrum.localization.LocalizationService"
         shorthand="localization"
         default-class="org.apache.fulcrum.localization.DefaultLocalizationService"/>
+     
+     <!-- 
+    <role
+        name="org.apache.fulcrum.localization.LocalizationService"
+        shorthand="localization"
+        default-class="org.apache.turbine.services.localization.RundataLocalizationService"/>
+    -->
 
     <role
         name="org.apache.fulcrum.intake.IntakeService"
@@ -114,6 +121,12 @@
         name="org.apache.fulcrum.security.model.ACLFactory"
         shorthand="aclFactory"
         default-class="org.apache.fulcrum.security.model.turbine.TurbineACLFactory"/>
+        
+    <role
+        name="org.apache.turbine.services.ServiceWithServiceInjection"
+        shorthand="serviceWithServiceInjection"
+        default-class="org.apache.turbine.services.ServiceWithServiceInjection"
+     /> 
 
 </role-list>
 
diff --git a/conf/test/fulcrumRundataRoleConfiguration.xml b/conf/test/fulcrumRundataRoleConfiguration.xml
new file mode 100644
index 00000000..84c1e009
--- /dev/null
+++ b/conf/test/fulcrumRundataRoleConfiguration.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+-->
+<!--
+	This configuration file for Avalon components is used for testing components with Turbine.
+-->
+
+<role-list>
+
+    <role
+        name="org.apache.fulcrum.localization.LocalizationService"
+        shorthand="localization"
+        default-class="org.apache.turbine.services.localization.RundataLocalizationService"/>
+
+    <role
+        name="org.apache.fulcrum.factory.FactoryService"
+        shorthand="factory"
+        default-class="org.apache.fulcrum.factory.DefaultFactoryService"/>
+
+    <role
+        name="org.apache.fulcrum.pool.PoolService"
+        shorthand="pool"
+        default-class="org.apache.fulcrum.pool.DefaultPoolService"/>
+
+    <role
+        name="org.apache.fulcrum.parser.ParserService"
+        shorthand="parser"
+        default-class="org.apache.fulcrum.parser.DefaultParserService"/>
+
+    <!-- These components belong to the Fulcrum-Security services -->
+    <role
+        name="org.apache.fulcrum.security.SecurityService"
+        shorthand="securityService"
+        default-class="org.apache.fulcrum.security.BaseSecurityService"/>
+  
+</role-list>
+
diff --git a/conf/test/log4j2-test.xml b/conf/test/log4j2-test.xml
index 8930a613..3e317772 100644
--- a/conf/test/log4j2-test.xml
+++ b/conf/test/log4j2-test.xml
@@ -34,6 +34,10 @@
           <AppenderRef ref="logfile" />
           <AppenderRef ref="console" level="info"/>
        </Logger>
+       <Logger name="org.apache.turbine.services" level="debug" additivity="false">
+          <AppenderRef ref="logfile"/>
+          <AppenderRef ref="console" level="info"/>
+       </Logger>
        <Logger name="avalon" level="info" additivity="false">
         <AppenderRef ref="console"/>
         <AppenderRef ref="logfile"/>
diff --git a/conf/test/rundataTemplateService.properties b/conf/test/rundataTemplateService.properties
new file mode 100644
index 00000000..993fd569
--- /dev/null
+++ b/conf/test/rundataTemplateService.properties
@@ -0,0 +1,23 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+services.AvalonComponentService.componentRoles = conf/test/fulcrumRundataRoleConfiguration.xml
+
+include=TemplateService.properties
+
+
+
diff --git a/conf/turbine-classic-pipeline-extended.xml b/conf/turbine-classic-pipeline-extended.xml
new file mode 100644
index 00000000..2c2f2818
--- /dev/null
+++ b/conf/turbine-classic-pipeline-extended.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+-->
+<pipeline name="default">
+  <valves>
+    <valve>org.apache.turbine.pipeline.DefaultSetEncodingValve</valve>
+    <valve>org.apache.turbine.pipeline.DetermineActionValve</valve>
+    <valve>org.apache.turbine.pipeline.DetermineTargetValve</valve>
+    <valve>org.apache.turbine.pipeline.DefaultSessionTimeoutValve</valve>
+    <valve>org.apache.turbine.pipeline.DefaultLoginValve</valve>
+    <valve>org.apache.turbine.pipeline.DefaultSessionValidationValve</valve>
+    <valve>org.apache.turbine.pipeline.DefaultACLCreationValve</valve>
+    <valve>org.apache.turbine.services.urlmapper.URLMapperValve</valve>
+    <valve>org.apache.turbine.pipeline.ExecutePageValve</valve>
+    <valve>org.apache.turbine.pipeline.CleanUpValve</valve>
+    <valve>org.apache.turbine.pipeline.DetermineRedirectRequestedValve</valve>
+  </valves>
+</pipeline>
diff --git a/conf/turbine-classic-pipeline.xml b/conf/turbine-classic-pipeline.xml
index 2c2f2818..bac4aa73 100644
--- a/conf/turbine-classic-pipeline.xml
+++ b/conf/turbine-classic-pipeline.xml
@@ -26,7 +26,6 @@
     <valve>org.apache.turbine.pipeline.DefaultLoginValve</valve>
     <valve>org.apache.turbine.pipeline.DefaultSessionValidationValve</valve>
     <valve>org.apache.turbine.pipeline.DefaultACLCreationValve</valve>
-    <valve>org.apache.turbine.services.urlmapper.URLMapperValve</valve>
     <valve>org.apache.turbine.pipeline.ExecutePageValve</valve>
     <valve>org.apache.turbine.pipeline.CleanUpValve</valve>
     <valve>org.apache.turbine.pipeline.DetermineRedirectRequestedValve</valve>
diff --git a/extensions/torque/src/java/org/apache/turbine/services/security/torque/GroupPeerManager.java b/extensions/torque/src/java/org/apache/turbine/services/security/torque/GroupPeerManager.java
index a2e0aa70..87dfc3b5 100644
--- a/extensions/torque/src/java/org/apache/turbine/services/security/torque/GroupPeerManager.java
+++ b/extensions/torque/src/java/org/apache/turbine/services/security/torque/GroupPeerManager.java
@@ -236,7 +236,7 @@ public class GroupPeerManager
 
         try
         {
-            obj = (Persistent) groupObject.newInstance();
+            obj = (Persistent) groupObject.getDeclaredConstructor().newInstance();
         }
         catch (Exception e)
         {
diff --git a/extensions/torque/src/java/org/apache/turbine/services/security/torque/package-info.java b/extensions/torque/src/java/org/apache/turbine/services/security/torque/package-info.java
new file mode 100644
index 00000000..6b8d2116
--- /dev/null
+++ b/extensions/torque/src/java/org/apache/turbine/services/security/torque/package-info.java
@@ -0,0 +1,6 @@
+/**
+ * A security service implementation based on Torque generated peer classes.
+ * <br>
+ * <font size="-2">$Id$</font>
+*/
+package extensions/torque/src/java/org/apache/turbine/services/security/torque;
diff --git a/pom.xml b/pom.xml
index f0d9842b..100e29ec 100644
--- a/pom.xml
+++ b/pom.xml
@@ -22,11 +22,12 @@
   <parent>
     <groupId>org.apache.turbine</groupId>
     <artifactId>turbine-parent</artifactId>
-    <version>9</version>
+    <version>12</version>
+    <relativePath />
   </parent>
   <artifactId>turbine</artifactId>
   <name>Apache Turbine</name>
-  <version>5.2-SNAPSHOT</version>
+  <version>6.1-SNAPSHOT</version>
   <description>Turbine is a servlet based framework that allows experienced Java
     developers to quickly build secure web applications. Parts of Turbine
     can also be used independently of the web portion of Turbine as
@@ -528,13 +529,28 @@
         <artifactId>torque-maven-plugin</artifactId>
         <version>${torque.version}</version>
         </plugin>
+        <plugin>
+            <groupId>org.apache.rat</groupId>
+            <artifactId>apache-rat-plugin</artifactId>
+            <version>0.15</version>
+            <configuration>
+                <excludes>
+                  <exclude>xdocs/images/*</exclude>
+                  <exclude>src/site/**</exclude>
+                  <exclude>proposals/**</exclude>
+                  <exclude>extensions/**</exclude>
+                  <exclude>conf/**</exclude>
+                  <exclude>README.md</exclude>
+                </excludes>
+              </configuration>
+          </plugin>
       </plugins>
     </pluginManagement>
 
     <plugins>
 
      <plugin>
-       <!-- hint: mvn verify  -->
+       <!-- hint: mvn verify or skip with -Ddependency.check.skip=true  -->
         <groupId>org.owasp</groupId>
         <artifactId>dependency-check-maven</artifactId>
         <configuration>
@@ -544,7 +560,7 @@
             </suppressionFiles>
            <!-- no .NET code inside turbine -->
            <assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>
-           <skip>false</skip>
+           <skip>${dependency.check.skip}</skip>
         </configuration>
       </plugin>
       <plugin>
@@ -565,10 +581,8 @@
       <plugin>
         <groupId>org.apache.torque</groupId>
         <artifactId>torque-maven-plugin</artifactId>
-        <version>${torque.version}</version>
         <configuration>
-          <targetDatabase>mysql</targetDatabase>
-          <schemaDir>src/torque/schema</schemaDir>
+          <runOnlyOnSourceChange>true</runOnlyOnSourceChange>
         </configuration>
         <executions>
           <execution>
@@ -833,8 +847,17 @@
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jxr-plugin</artifactId>
         <configuration>
-          <aggregate>false</aggregate>
+          <linkJavadoc>true</linkJavadoc>
         </configuration>
+        <!-- no usable for aggregate, but we are aggregate = false implicitely  -->
+        <reportSets>
+          <reportSet>
+            <reports>
+              <report>jxr-no-fork</report>
+              <report>test-jxr-no-fork</report>
+            </reports>
+          </reportSet>
+        </reportSets>
       </plugin>
       <plugin>
         <groupId>org.jacoco</groupId>
@@ -848,6 +871,12 @@
           </reportSet>
         </reportSets>
       </plugin>
+      <plugin>
+        <!-- check the Apache Licence in all source files -->
+        <groupId>org.apache.rat</groupId>
+        <artifactId>apache-rat-plugin</artifactId>
+        <version>0.15</version>
+      </plugin>
     </plugins>
   </reporting>
 
@@ -871,22 +900,22 @@
     <dependency>
       <groupId>org.apache.commons</groupId>
       <artifactId>commons-configuration2</artifactId>
-      <version>2.7</version>
+      <version>2.8.0</version>
     </dependency>
     <dependency>
       <groupId>org.apache.commons</groupId>
       <artifactId>commons-email</artifactId>
-      <version>1.5</version>
+      <version>1.6.0</version>
     </dependency>
     <dependency>
       <groupId>org.apache.commons</groupId>
       <artifactId>commons-lang3</artifactId>
-      <version>3.12.0</version>
+      <version>3.14.0</version>
     </dependency>
     <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-text</artifactId>
-       <version>1.9</version>
+       <version>1.11.0</version>
     </dependency>
     <dependency>
       <groupId>commons-beanutils</groupId>
@@ -902,7 +931,8 @@
     <dependency>
       <groupId>nl.basjes.parse.useragent</groupId>
       <artifactId>yauaa</artifactId>
-      <version>5.23</version>
+      <!-- java 11 required for v6.1+ -->
+      <version>7.24.0</version>
     </dependency>
     <dependency>
       <groupId>org.apache.fulcrum</groupId>
@@ -930,6 +960,12 @@
       <artifactId>fulcrum-parser</artifactId>
       <version>${fulcrum.parser}</version>
     </dependency>
+    <!-- overrid dep from torque-runtime -->
+    <dependency>
+        <groupId>org.apache.commons</groupId>
+        <artifactId>commons-pool2</artifactId>
+        <version>2.12.0</version>
+    </dependency>
     <dependency>
       <groupId>org.apache.fulcrum</groupId>
       <artifactId>fulcrum-intake</artifactId>
@@ -1010,7 +1046,7 @@
     <dependency>
       <groupId>org.python</groupId>
       <artifactId>jython-standalone</artifactId>
-      <version>2.7.2</version>
+      <version>2.7.3</version>
       <optional>true</optional>
     </dependency>
     <dependency>
@@ -1053,6 +1089,11 @@
       <version>${turbine.log4j2.version}</version>
       <scope>runtime</scope>
     </dependency>
+    <dependency>
+        <groupId>org.slf4j</groupId>
+        <artifactId>slf4j-api</artifactId>
+        <version>2.0.11</version>
+    </dependency>
     <dependency>
       <groupId>org.apache.logging.log4j</groupId>
       <artifactId>log4j-api</artifactId>
@@ -1085,25 +1126,18 @@
  	<dependency>
         <groupId>jakarta.xml.bind</groupId>
         <artifactId>jakarta.xml.bind-api</artifactId>
-        <version>2.3.3</version>
+        <version>4.0.0</version>
     </dependency>
     <dependency>
-        <groupId>com.sun.xml.bind</groupId>
-        <artifactId>jaxb-impl</artifactId>
-        <version>2.3.3</version>
-        <scope>runtime</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.hsqldb</groupId>
-      <artifactId>hsqldb</artifactId>
-      <version>2.5.1</version>
-      <scope>test</scope>
-    </dependency>
+         <groupId>org.glassfish.jaxb</groupId>
+          <artifactId>jaxb-runtime</artifactId>
+           <version>4.0.4</version>
+     </dependency>
     <!-- testcontainer minimal shared resources -->
     <dependency>
       <groupId>org.apache.fulcrum</groupId>
       <artifactId>fulcrum-testcontainer</artifactId>
-      <version>1.0.10-SNAPSHOT</version>
+      <version>2.0.0</version>
       <scope>test</scope>
     </dependency> 
     <dependency>
@@ -1145,6 +1179,15 @@
                 </goals>
               </execution>
             </executions>
+            <configuration>
+                <reportPlugins>
+                  <reportPlugin>
+                    <groupId>org.apache.rat</groupId>
+                    <artifactId>apache-rat-plugin</artifactId>
+                    <version>0.15</version>
+                  </reportPlugin>
+                </reportPlugins>
+            </configuration>
           </plugin>
           <plugin>
             <!-- build the source and binary distribution packages -->
@@ -1169,7 +1212,7 @@
                     <descriptor>./src/assembly/binaries.xml</descriptor>
                     <descriptor>./src/assembly/source.xml</descriptor>
                   </descriptors>
-                  <tarLongFileFormat>gnu</tarLongFileFormat>
+                  <tarLongFileMode>gnu</tarLongFileMode>
                 </configuration>
               </execution>
             </executions>
@@ -1251,9 +1294,9 @@
             </exclusions>
           </dependency>
           <dependency>
-            <groupId>mysql</groupId>
-            <artifactId>mysql-connector-java</artifactId>
-            <version>8.0.27</version>
+            <groupId>com.mysql</groupId>
+            <artifactId>mysql-connector-j</artifactId>
+            <version>8.3.0</version>
           </dependency>
       </dependencies>
     </profile>
@@ -1288,23 +1331,87 @@
            </dependency>
        </dependencies>
     </profile>
+    <profile>
+      <!-- allow reproducible / verifibable builds: build first and check with 
+          mvn clean install -Prv-builds
+          mvn clean verify artifact:compare -Prv-builds  
+          diffoscope ..
+       -->
+      <id>rv-builds</id>
+      <build>
+        <plugins>
+          <plugin>
+              <groupId>org.apache.torque</groupId>
+              <artifactId>torque-maven-plugin</artifactId>
+              <executions>
+                <execution>
+                  <id>generate-om-scheduler-sources</id>
+                  <configuration>
+                    <options>
+                       <!-- to allow for reproducible builds -->
+                      <torque.om.addTimeStamp>false</torque.om.addTimeStamp>
+                    </options>
+                  </configuration>
+                </execution>
+               </executions>
+          </plugin>
+            <!--  1) to be moved to parent to get buildNumber in parent implemenation.build property 
+                    2) requires no local midifications! 
+             -->
+            <!--plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>buildnumber-maven-plugin</artifactId>
+                <version>3.1.0</version>
+                <executions>
+                  <execution>
+                    <phase>validate</phase>
+                    <goals>
+                      <goal>create</goal>
+                    </goals>
+                  </execution>
+                </executions>
+                <configuration>
+                  <doCheck>true</doCheck>
+                  <doUpdate>true</doUpdate>
+                </configuration>
+            </plugin-->
+        </plugins>
+      </build>
+      <properties>
+          <!-- allow for reproducible builds: should not be inherited but defined in POM for  -->
+          <project.build.outputTimestamp>10</project.build.outputTimestamp>
+          <implementation.build>${scmBranch}@r${buildNumber};noTimeStamp</implementation.build>
+          <scmBranch>trunk</scmBranch>
+      </properties>
+    </profile>
   </profiles>
 
   <properties>
     <!-- maven.compiler setting in turbine parent -->
     <turbine.site.path>turbine-core</turbine.site.path>
-    <fulcrum.intake>2.0.0</fulcrum.intake>
-    <fulcrum.parser>2.0.1</fulcrum.parser>
-    <!--fulcrum.securityafter release change to 2.1.0 -->
-     <fulcrum.security>2.1.0</fulcrum.security>
-    <fulcrum.yaafi>1.0.9-SNAPSHOT</fulcrum.yaafi>
-    <torque.version>5.0</torque.version>
-    <jackson2.version>2.13.0</jackson2.version>
+    <fulcrum.intake>3.0.0</fulcrum.intake>
+    <fulcrum.parser>3.0.0</fulcrum.parser>
+    <fulcrum.security>3.0.0</fulcrum.security>
+    <fulcrum.yaafi>2.0.0</fulcrum.yaafi>
+    <torque.version>5.1</torque.version>
+    <jackson2.version>2.16.1</jackson2.version>
     <doclint>none</doclint>
-    <docker.testcontainers.version>1.16.2</docker.testcontainers.version>
+    <docker.testcontainers.version>1.18.3</docker.testcontainers.version>
     <jacoco.skip>true</jacoco.skip>
     <argLine />
   </properties>
-
+  
+  
+    <!-- to allow snapshot parents:  https://issues.apache.org/jira/browse/INFRA-15815  jenkins settings.xml is unchanged from beginning -->
+    <repositories>
+      <repository>
+        <id>apache.snapshots</id>
+        <name>Apache Snapshot Repository</name>
+        <url>https://repository.apache.org/snapshots</url>
+        <releases>
+          <enabled>false</enabled>
+        </releases>
+      </repository>
+    </repositories>
 </project>
 
diff --git a/proposals/gk/log4j2/pom.xml b/proposals/gk/log4j2/pom.xml
deleted file mode 100644
index 4b59d0a1..00000000
--- a/proposals/gk/log4j2/pom.xml
+++ /dev/null
@@ -1,1175 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-     <groupId>org.apache.turbine</groupId>
-     <artifactId>turbine-parent</artifactId>
-     <version>5</version>
-  </parent>
-  <groupId>org.apache.turbine</groupId>
-  <artifactId>turbine</artifactId>
-  <name>Apache Turbine</name>
-  <version>5.0-SNAPSHOT</version>
-  <description>Turbine is a servlet based framework that allows experienced Java
-    developers to quickly build secure web applications. Parts of Turbine
-    can also be used independently of the web portion of Turbine as
-    well. In other words, we strive to make portions of Turbine easily
-    available for use in other applications.</description>
-
-  <url>http://turbine.apache.org/${turbine.site.path}</url>
-
-  <inceptionYear>2000</inceptionYear>
-
-  <developers>
-    <developer>
-      <id>brekke</id>
-      <name>Jeff Brekke</name>
-      <email>ekkerbj@yahoo.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </developer>
-    <developer>
-      <id>hoffmann</id>
-      <name>Jürgen Hoffmann</name>
-      <email>hoffmann@apache.org</email>
-      <url />
-      <organization />
-      <timezone />
-    </developer>
-    <developer>
-      <id>daveb</id>
-      <name>Dave Bryson</name>
-      <email>mbryson@mont.mindspring.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </developer>
-    <developer>
-      <id>burton</id>
-      <name>Kevin A. Burton</name>
-      <email>burton@relativity.yi.org</email>
-      <url />
-      <organization />
-      <timezone />
-    </developer>
-    <developer>
-      <id>dobbs</id>
-      <name>Eric Dobbs</name>
-      <email>dobbs@apache.org</email>
-      <url />
-      <organization />
-      <timezone />
-    </developer>
-    <developer>
-      <id>seade</id>
-      <name>Scott Eade</name>
-      <email>seade@backstagetech.com.au</email>
-      <url />
-      <organization>Backstage Technologies Pty. Ltd.</organization>
-      <timezone />
-    </developer>
-    <developer>
-      <id>fedor</id>
-      <name>Fedor Karpelevitch</name>
-      <email>fedor@karpelevitch.net</email>
-      <url />
-      <organization />
-      <timezone />
-    </developer>
-    <developer>
-      <id>legassick</id>
-      <name>Sean Legassick</name>
-      <email>sean@informage.net</email>
-      <url />
-      <organization />
-      <timezone />
-    </developer>
-    <developer>
-      <id>jmcnally</id>
-      <name>John McNally</name>
-      <email>jmcnally@collab.net</email>
-      <url />
-      <organization>CollabNet, Inc.</organization>
-      <timezone />
-    </developer>
-    <developer>
-      <id>quintonm</id>
-      <name>Quinton McCombs</name>
-      <email>quintonm@bellsouth.net</email>
-      <url />
-      <organization>NEqualsOne</organization>
-      <roles>
-        <role>Java Developer</role>
-      </roles>
-      <timezone />
-    </developer>
-    <developer>
-      <id>painter</id>
-      <name>Jeffery Painter</name>
-      <email>jeff@jivecast.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </developer>
-    <developer>
-      <id>mpoeschl</id>
-      <name>Martin Poeschl</name>
-      <email>mpoeschl@marmot.at</email>
-      <url />
-      <organization>tucana.at</organization>
-      <timezone />
-    </developer>
-    <developer>
-      <id>epugh</id>
-      <name>Eric Pugh</name>
-      <email>epugh@upstate.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </developer>
-    <developer>
-      <id>dlr</id>
-      <name>Daniel Rall</name>
-      <email>dlr@finemaltcoding.com</email>
-      <url />
-      <organization>CollabNet, Inc.</organization>
-      <timezone />
-    </developer>
-    <developer>
-      <id>henning</id>
-      <name>Henning P. Schmiedehausen</name>
-      <email>hps@intermeta.de</email>
-      <url />
-      <organization>INTERMETA - Gesellschaft fuer Mehrwertdienste mbH</organization>
-      <roles>
-        <role>Java Developer</role>
-      </roles>
-      <timezone>1</timezone>
-    </developer>
-    <developer>
-      <id>kschrader</id>
-      <name>Kurt Schrader</name>
-      <email>kschrader@karmalab.org</email>
-      <url />
-      <organization>University of Michigan</organization>
-      <timezone />
-    </developer>
-    <developer>
-      <id>jon</id>
-      <name>Jon Scott Stevens</name>
-      <email>jon@latchkey.com</email>
-      <url />
-      <organization>CollabNet, Inc.</organization>
-      <timezone />
-    </developer>
-    <developer>
-      <name>Thomas Vandahl</name>
-      <id>tv</id>
-      <email>tv@apache.org</email>
-      <organization />
-      <roles>
-        <role>Java Developer</role>
-      </roles>
-      <timezone>1</timezone>
-    </developer>
-    <developer>
-      <name>Ludwig Magnusson</name>
-      <id>ludwig</id>
-      <email>ludwig@apache.org</email>
-      <organization />
-      <roles>
-        <role>Java Developer</role>
-      </roles>
-      <timezone>1</timezone>
-    </developer>
-    <developer>
-      <name>Georg Kallidis</name>
-      <id>gk</id>
-      <email>gk@apache.org</email>
-      <organization />
-      <roles>
-        <role>Java Developer</role>
-      </roles>
-      <timezone>1</timezone>
-    </developer>
-  </developers>
-  <contributors>
-    <contributor>
-      <name>Gary Bartlett</name>
-      <email>gary_a_bartlett@yahoo.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Youngho Cho</name>
-      <email>youngho@nannet.co.kr</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Frank Conradie</name>
-      <email>frank@opticode.co.za</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Gonzalo A. Diethelm</name>
-      <email>gonzalo.diethelm@iname.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>David Duddleston</name>
-      <email>david@i2a.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Christopher Elkins</name>
-      <email>celkins@scardini.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>M. Sean Gilligan</name>
-      <email>Sean_Gilligan@catalla.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Jian He</name>
-      <email>hjnet@163.net</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Humberto Hernandez</name>
-      <email>hhernandez@itweb.com.mx</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Nissim Karpenstein</name>
-      <email>nissim@nksystems.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Rafal Krzewski</name>
-      <email>krzewski@e-point.pl</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Chris Kimpton</name>
-      <email>kimptoc.mail@bigfoot.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Brian Lawler</name>
-      <email>brian@tribenetwork.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Josh Lucas</name>
-      <email>josh@stonecottage.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Carl Ludwig</name>
-      <email>carl@destinymusic.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Jonas Mauras</name>
-      <email>jm@mediaphil.de</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Brett McLaughlin</name>
-      <email>bmclaugh@algx.net</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Leon Messerschmidt</name>
-      <email>leon@opticode.co.za</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Chris Meyer</name>
-      <email>cmeyer@gatan.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Steven Nagy</name>
-      <email>snagy@web-publicity.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Kasper Nielsen</name>
-      <email>kav@kav.dk</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Paul O'Leary</name>
-      <email>paul@evolventtech.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Giacomo Pati</name>
-      <email>Giacomo.Pati@pwr.ch</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Mark Porter</name>
-      <email>mark.porter@canlink.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Jeff Prickett</name>
-      <email>jeffprickett@mindspring.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Ilkka Priha</name>
-      <email>ilkka.priha@simsoft.fi</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Cameron Riley</name>
-      <email>criley@ekmail.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Greg Ritter</name>
-      <email>greg@shwoop.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Ingo Schuster</name>
-      <email>ingo@raleigh.ibm.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Costas Stergiou</name>
-      <email>csterg@aias.gr</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>George Stewart</name>
-      <email>georgestewart@yahoo.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Ralf Stranzenbach</name>
-      <email>ralf@reswi.ruhr.de</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Hakan Tandogan</name>
-      <email>hakan42@gmx.de</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Scott C. Tavares</name>
-      <email>stavares@home.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>John Thorhauer</name>
-      <email>john@zenplex.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Magnús Þór Torfason</name>
-      <email>magnus@handpoint.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Scott Weaver</name>
-      <email>sweaver@rippe.com</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-    <contributor>
-      <name>Siegfried Goeschl</name>
-      <email>sgoeschl@apache.org</email>
-      <url />
-      <organization />
-      <timezone />
-    </contributor>
-  </contributors>
-
-  <scm>
-    <connection>scm:svn:http://svn.apache.org/repos/asf/turbine/core/trunk</connection>
-    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/turbine/core/trunk</developerConnection>
-    <url>http://svn.apache.org/viewcvs/turbine/core/trunk/</url>
-  </scm>
-
-  <build>
-    <sourceDirectory>src/java</sourceDirectory>
-    <testSourceDirectory>src/test</testSourceDirectory>
-
-    <resources>
-      <resource>
-        <directory>src/macros</directory>
-        <targetPath>macros</targetPath>
-        <includes>
-          <include>TurbineMacros.vm</include>
-        </includes>
-      </resource>
-      <resource>
-          <directory>${basedir}/src/main/resources</directory>
-          <filtering>true</filtering>
-          <includes>
-              <include>**/*.properties</include>
-              <include>**/*.xml</include>
-          </includes>
-      </resource>
-    </resources>
-
-    <testResources>
-      <testResource>
-        <targetPath />
-        <directory>conf/test</directory>
-        <includes>
-          <include>log4j2-test.xml</include><!-- cft. loading path https://logging.apache.org/log4j/2.x/manual/configuration.html -->
-        </includes>
-      </testResource>
-    </testResources>
-
-    <plugins>
-      <!-- run optionally, use not as reporting plugin, as it exposes file paths to artifacts and
-        check each possible vulnerability carefully, find more info about how to read, false positives et al. here: 
-        https://jeremylong.github.io/DependencyCheck/dependency-check-maven/plugin-info.html or
-        https://github.com/jeremylong/DependencyCheck
-        CLI mvn phase
-        $>mvn verify -Ddependency.check.skip=false
-        or to invoke goal only:
-        $>mvn org.owasp:dependency-check-maven:check -Ddependency.check.skip=false
-      -->
-      <plugin>
-        <groupId>org.owasp</groupId>
-        <artifactId>dependency-check-maven</artifactId>
-        <version>3.1.2</version><!-- requires mvn version > 3.3! For older version try to check v 3.2.1 or 3.1.2 -->
-        <executions>
-           <execution>
-                <goals>
-                    <goal>check</goal>
-                </goals>
-            </execution>
-        </executions>
-        <configuration>
-           <skip>${dependency.check.skip}</skip>
-           <!-- suppress false positive -->
-           <suppressionFiles>
-            <suppressionFile>${project.basedir}/suppression-owasp-fp.xml</suppressionFile>
-            </suppressionFiles>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-surefire-plugin</artifactId>
-        <configuration>
-          <!--default setting is forkCount=1/reuseForks=true -->
-          <reuseForks>false</reuseForks>
-          <forkCount>1</forkCount>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.torque</groupId>
-        <artifactId>torque-maven-plugin</artifactId>
-        <version>4.0</version>
-        <configuration>
-          <targetDatabase>mysql</targetDatabase>
-          <schemaDir>src/torque/schema</schemaDir>
-        </configuration>
-        <executions>
-          <execution>
-            <id>generate-om-scheduler-sources</id>
-            <phase>generate-sources</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.om</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <sourceIncludes>
-                <include>scheduler-schema.xml</include>
-              </sourceIncludes>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>mysql</torque.database>
-                <torque.om.addGetByNameMethods>false</torque.om.addGetByNameMethods>
-                <torque.om.save.saveException>TorqueException</torque.om.save.saveException>
-                <torque.om.package>org.apache.turbine.services.schedule</torque.om.package>
-                <torque.om.useIsForBooleanGetters>true</torque.om.useIsForBooleanGetters>
-                <torque.runOnlyOnSourceChange>true</torque.runOnlyOnSourceChange>
-              </options>
-              <outputDirMap>
-                <modifiable>${project.build.directory}/generated-sources</modifiable>
-              </outputDirMap>
-            </configuration>
-          </execution>
-          <execution>
-            <id>torque-sql-mysql</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.sql</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/mysql</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>mysql</torque.database>
-              </options>
-            </configuration>
-          </execution>
-          <execution>
-            <id>torque-sql-hsqldb</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.sql</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/hsqldb</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>hsqldb</torque.database>
-              </options>
-            </configuration>
-          </execution>
-          <execution>
-            <id>torque-sql-derby</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.sql</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/derby</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>derby</torque.database>
-              </options>
-            </configuration>
-          </execution>
-          <execution>
-            <id>torque-sql-oracle</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.sql</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/oracle</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>oracle</torque.database>
-              </options>
-            </configuration>
-          </execution>
-          <execution>
-            <id>torque-sql-postgresql</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.sql</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/postgresql</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>postgresql</torque.database>
-              </options>
-            </configuration>
-          </execution>
-          <execution>
-            <id>torque-sql-mssql</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.sql</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/mssql</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>mssql</torque.database>
-              </options>
-            </configuration>
-          </execution>
-
-          <execution>
-            <id>torque-idtable-mysql</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.idtable</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/mysql</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>mysql</torque.database>
-              </options>
-            </configuration>
-          </execution>
-          <execution>
-            <id>torque-idtable-hsqldb</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.idtable</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/hsqldb</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>hsqldb</torque.database>
-              </options>
-            </configuration>
-          </execution>
-          <execution>
-            <id>torque-idtable-derby</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.idtable</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/derby</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>derby</torque.database>
-              </options>
-            </configuration>
-          </execution>
-          <execution>
-            <id>torque-idtable-oracle</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.idtable</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/oracle</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>oracle</torque.database>
-              </options>
-            </configuration>
-          </execution>
-          <execution>
-            <id>torque-idtable-postgresql</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.idtable</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/postgresql</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>postgresql</torque.database>
-              </options>
-            </configuration>
-          </execution>
-          <execution>
-            <id>torque-idtable-mssql</id>
-            <phase>package</phase>
-            <goals>
-              <goal>generate</goal>
-            </goals>
-            <configuration>
-              <packaging>classpath</packaging>
-              <configPackage>org.apache.torque.templates.idtable</configPackage>
-              <sourceDir>src/torque/schema</sourceDir>
-              <defaultOutputDir>${project.build.directory}/generated-sql/torque/mssql</defaultOutputDir>
-              <defaultOutputDirUsage>none</defaultOutputDirUsage>
-              <loglevel>error</loglevel>
-              <options>
-                <torque.database>mssql</torque.database>
-              </options>
-            </configuration>
-          </execution>
-        </executions>
-        <dependencies>
-            <dependency>
-                <groupId>org.apache.torque</groupId>
-                <artifactId>torque-templates</artifactId>
-                <version>4.0</version>
-            </dependency>
-        </dependencies>
-      </plugin>
-    </plugins>
-  </build>
-
-  <reporting>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-jxr-plugin</artifactId>
-        <configuration>
-          <aggregate>false</aggregate>
-        </configuration>
-      </plugin>
-      <plugin><!-- since 2.7 running the old report requires to register it explicitely, otherwise the build may fail -->
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>cobertura-maven-plugin</artifactId>
-        <reportSets>
-          <reportSet>
-            <reports>
-              <report>cobertura</report>
-            </reports>
-          </reportSet>
-        </reportSets>
-      </plugin>
-    </plugins>
-  </reporting>
-
-  <dependencies>
-	<dependency>
-	    <groupId>javax.servlet</groupId>
-	    <artifactId>javax.servlet-api</artifactId>
-	    <version>3.1.0</version>
-	    <scope>provided</scope>
-	</dependency>
-    <dependency>
-      <groupId>org.apache.avalon.framework</groupId>
-      <artifactId>avalon-framework-api</artifactId>
-      <version>4.3.1</version>
-    </dependency>
-    <dependency>
-    	<groupId>commons-codec</groupId>
-    	<artifactId>commons-codec</artifactId>
-      <version>1.11</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.commons</groupId>
-      <artifactId>commons-configuration2</artifactId>
-      <version>2.3</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.commons</groupId>
-      <artifactId>commons-email</artifactId>
-      <version>1.5</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.commons</groupId>
-      <artifactId>commons-lang3</artifactId>
-      <version>3.8.1</version>
-    </dependency>
-    <dependency>
-       <groupId>org.apache.commons</groupId>
-       <artifactId>commons-text</artifactId>
-       <version>1.6</version>
-    </dependency>
-    <dependency>
-      <groupId>commons-logging</groupId>
-      <artifactId>commons-logging</artifactId>
-      <version>1.2</version>
-    </dependency>
-    <dependency>
-      <groupId>commons-beanutils</groupId>
-      <artifactId>commons-beanutils</artifactId>
-      <version>1.9.3</version>
-    </dependency>
-    <dependency>
-      <groupId>ecs</groupId>
-      <artifactId>ecs</artifactId>
-      <version>1.4.2</version>
-    </dependency>
-    <dependency>
-      <groupId>net.sf.uadetector</groupId>
-      <artifactId>uadetector-resources</artifactId>
-      <version>2014.10</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-cache</artifactId>
-      <version>1.1.0</version>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-factory</artifactId>
-      <version>1.1.1-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-pool</artifactId>
-      <version>1.0.5-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-localization</artifactId>
-      <version>1.0.7-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-parser</artifactId>
-      <version>2.0.0-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-intake</artifactId>
-      <version>${fulcrum.intake}</version>
-    </dependency>
-    <!-- yaafi 1.0.7 is in group turbine, 1.0.8 will be in group fulcrum again (package ) -->
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-yaafi</artifactId>
-      <version>1.0.8-SNAPSHOT</version>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-crypto</artifactId>
-      <version>1.0.8-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-xslt</artifactId>
-      <version>1.1.1-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-mimetype</artifactId>
-      <version>1.0.6-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.torque</groupId>
-      <artifactId>torque-runtime</artifactId>
-      <version>4.0</version>
-      <exclusions>
-        <exclusion>
-            <groupId>avalon-framework</groupId>
-            <artifactId>avalon-framework-api</artifactId>
-        </exclusion>
-        <exclusion>
-            <groupId>avalon-logkit</groupId>
-            <artifactId>avalon-logkit</artifactId>
-        </exclusion>
-        <exclusion>  <!-- exclude this to exclude beanutils v1.8.0 -> CVE-2014-0114  -->
-          <groupId>commons-configuration</groupId>
-          <artifactId>commons-configuration</artifactId>
-        </exclusion>
-      </exclusions>
-    </dependency>
-    <dependency> <!-- include more modern version just for torque-runtime v4.0 -->
-         <groupId>commons-configuration</groupId>
-         <artifactId>commons-configuration</artifactId>
-         <version>1.10</version>
-    </dependency>
-    <!-- using snapshot, until released -->
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-security-api</artifactId>
-      <version>${fulcrum.security}</version>
-    </dependency>
-     <!-- using snapshot, until released -->
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-security-memory</artifactId>
-      <version>${fulcrum.security}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-security-api</artifactId>
-      <version>${fulcrum.security}</version>
-      <classifier>tests</classifier>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-quartz</artifactId>
-      <version>1.1.1-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <!-- TODO update to stable 2.7.1, because of CVE-2016-5699 -->
-      <groupId>org.python</groupId>
-      <artifactId>jython</artifactId>
-      <version>2.7.0</version>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>org.jabsorb</groupId>
-      <artifactId>jabsorb</artifactId>
-      <version>1.3.2</version>
-      <optional>true</optional>
-      <!-- reqires maven version >= 3,  exclude old versions: org.slf4j:slf4j-jdk14,slf4j-api,(renamed)cl104-over-slf4j,org.mortbay.jetty:jsp-2.1, commons-httpclient:commons-httpclient,
-         mvn eclipse:eclipse still no wildcard exclude (mvn version 3.3.9)
-      -->
-      <exclusions>
-       <exclusion>
-          <artifactId>jsp-2.1</artifactId>
-          <groupId>org.mortbay.jetty</groupId>
-        </exclusion>
-        <exclusion>
-          <artifactId>jcl104-over-slf4j</artifactId>
-          <groupId>org.slf4j</groupId>
-        </exclusion>
-        <exclusion>
-          <artifactId>slf4j-jdk14</artifactId>
-          <groupId>org.slf4j</groupId>
-        </exclusion>
-        <exclusion>
-          <artifactId>*</artifactId>
-          <groupId>*</groupId>
-        </exclusion>
-      </exclusions>
-    </dependency>
-    <dependency><!-- allow extensions, eg. logback with slf4j -->
-      <groupId>org.slf4j</groupId>
-      <artifactId>slf4j-api</artifactId>
-      <version>${slf4j.version}</version>
-    </dependency>
-     <dependency>     <!-- redirect JCL to slf4j -->
-      <groupId>org.slf4j</groupId>
-      <artifactId>jcl-over-slf4j</artifactId>
-      <version>${slf4j.version}</version>
-    </dependency>
-    <dependency><!-- delegate slf4j to log4j2 -->
-       <groupId>org.apache.logging.log4j</groupId>
-       <artifactId>log4j-slf4j-impl</artifactId>
-       <version>${log4j2.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.logging.log4j</groupId>
-      <artifactId>log4j-api</artifactId>
-      <version>${log4j2.version}</version>
-    </dependency>
-    <dependency>
-       <groupId>org.apache.logging.log4j</groupId>
-       <artifactId>log4j-core</artifactId>
-       <version>${log4j2.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.logging.log4j</groupId>
-      <artifactId>log4j-web</artifactId>
-      <version>${log4j2.version}</version>
-    </dependency>
-    <!-- log3j1 bridge instead of log4j -->
-    <dependency>
-        <groupId>org.apache.logging.log4j</groupId>
-        <artifactId>log4j-1.2-api</artifactId>
-        <version>${log4j2.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.velocity</groupId>
-      <artifactId>velocity-engine-core</artifactId>
-      <version>2.0</version>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>4.12</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.hsqldb</groupId>
-      <artifactId>hsqldb</artifactId>
-      <version>2.2.9</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.fulcrum</groupId>
-      <artifactId>fulcrum-testcontainer</artifactId>
-      <version>1.0.8-SNAPSHOT</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-
-  <profiles>
-    <profile>
-      <id>apache-release</id>
-      <build>
-        <plugins>
-           <plugin>
-            <groupId>org.owasp</groupId>
-            <artifactId>dependency-check-maven</artifactId>
-            <configuration>
-               <skip>false</skip>
-            </configuration>
-          </plugin>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-site-plugin</artifactId>
-            <executions>
-              <execution>
-                <id>turbine-release-site</id>
-                <phase>prepare-package</phase>
-                <goals>
-                  <goal>site</goal>
-                </goals>
-              </execution>
-            </executions>
-          </plugin>
-          <plugin>
-            <!-- build the source and binary distribution packages -->
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-assembly-plugin</artifactId>
-            <executions>
-              <execution>
-                <id>turbine-default-assembly</id>
-                <configuration>
-                  <skipAssembly>true</skipAssembly>
-                </configuration>
-              </execution>
-              <execution>
-                <id>turbine-core-assembly</id>
-                <phase>package</phase>
-                <goals>
-                  <goal>single</goal>
-                </goals>
-                <configuration>
-                  <runOnlyAtExecutionRoot>true</runOnlyAtExecutionRoot>
-                  <descriptors>
-                    <descriptor>./src/assembly/binaries.xml</descriptor>
-                    <descriptor>./src/assembly/source.xml</descriptor>
-                  </descriptors>
-                  <tarLongFileFormat>gnu</tarLongFileFormat>
-                </configuration>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-      <properties> 
-        <dependency.check.skip>false</dependency.check.skip>
-        <doclint>none</doclint><!-- since javadoc v.3 this is the reuqired instead of -Xdoclint:none, remove if turbine parent is correct again using profile java8  -->
-      </properties>
-    </profile>
-  </profiles>
-
-  <properties>
-    <!-- maven.compiler setting in turbine parent -->
-    <!-- TODO: Change for release -->
-    <turbine.site.path>turbine/turbine-5.0</turbine.site.path>
-    <fulcrum.intake>2.0.0-SNAPSHOT</fulcrum.intake>
-    <fulcrum.security>1.1.3-SNAPSHOT</fulcrum.security>
-    <slf4j.version>1.7.25</slf4j.version>
-    <log4j2.version>2.11.1</log4j2.version>
-    <dependency.check.skip>true</dependency.check.skip>
-  </properties>
-
-</project>
diff --git a/proposals/gk/log4j2/src/java/org/apache/turbine/Turbine.java b/proposals/gk/log4j2/src/java/org/apache/turbine/Turbine.java
index f347ee27..30fd78d8 100644
--- a/proposals/gk/log4j2/src/java/org/apache/turbine/Turbine.java
+++ b/proposals/gk/log4j2/src/java/org/apache/turbine/Turbine.java
@@ -42,8 +42,8 @@ import javax.servlet.annotation.WebServlet;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.Unmarshaller;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.Unmarshaller;
 
 import org.apache.commons.configuration2.Configuration;
 import org.apache.commons.configuration2.PropertiesConfiguration;
diff --git a/proposals/tv/osgi/service/java/org/apache/turbine/services/osgi/package-info.java b/proposals/tv/osgi/service/java/org/apache/turbine/services/osgi/package-info.java
new file mode 100644
index 00000000..b2ace09b
--- /dev/null
+++ b/proposals/tv/osgi/service/java/org/apache/turbine/services/osgi/package-info.java
@@ -0,0 +1,6 @@
+/**
+ * OSGi based component service to provide access to OSGi bundles for Turbine applications.
+ * <br>
+ * <font size="-2">$Id: package.html 615328 2008-01-25 20:25:05Z tv $</font>
+*/
+package proposals/tv/osgi/service/java/org/apache/turbine/services/osgi;
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index f001f27f..8b737028 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -24,7 +24,36 @@
   </properties>
 
   <body>
-     <release version="5.1" date="in Git">
+     <release version="6.0-SNAPSHOT" date="in Git">
+       <action type="add" dev="gk">
+        Provide mechanism to allow auto loading of Turbine (and Fulcrum) services. If a "known" service is extending FieldAnnotatedTurbineBaseService or 
+        MethodAnnotatedTurbineBaseService it could declare fields and methods with more Turbine annotations. 
+        Examples are  annotating a service with @TurbineService or autoload a service, which has class level annotation @TurbineService, if the callingclass itself is TurbineService annotated.
+      </action>
+       <action type="add" dev="gk">
+        New  service DateTimeFormatterService and tool DateTimeFormatterTool, which allow date time formatting with locale and zone configuration.
+      </action>
+       <action type="update" dev="gk">
+        Dependency version update yauaa to 7.24.0, commons-pool2 2.12.0, slf4j-api 2.0.11, jaxb-runtime 4.0.4, fulcrum.security 3.0.0, fulcrum.intake 3.0.0, fulcrum.parser 3.0.0, fulcrum.yaafi 2.0.0,
+        commons  email to 1.6.0, commons lang3 to 3.14.0, commons text to 1.11.0
+      </action>
+      <action type="update" dev="gk">
+        Minor version update to Torque 5.1, Jackson to 2.16.1 (yaml profile), docker-testcontainers to 1.18.3 (docker profile), commons-configuration2 to 2.8.0, commons-text 1.10.0
+      </action>
+      <action type="update" dev="gk">
+        Fix java.lang.NoSuchFieldError: DEFAULT_TIME_BETWEEN_EVICTION_RUNS. This field changed from being an long to a Duration in commons-pool2 v 2.10.0 and commons-dbcp2 v2.9.0.
+      </action>
+      <action type="update" dev="tv">
+        Migrate to package-info.java from package.html.
+      </action>
+      <action type="update" dev="tv">
+        Optimize JobQueue and add JobQueueTest
+      </action>    
+    </release>
+    <action type="add" dev="gk">
+       Add Annotation @TurbineTool to annotate tools for advanced usage in action methods.
+    </action>
+    <release version="5.1" date="2021-11-23">
         <action type="update" dev="painter">
         Updated dependencies: yauaa to 5.23, commons-lang3 to 3.12, jython-standalone to 2.7.2
         Update turbine-parent 8 (released)
@@ -32,7 +61,7 @@
         <action type="update" dev="gk">
         Update yauaa to 5.21 ( CVE-2020-13956),  junit to 4.13.1 (CVE-2020-15250)
       </action>
-       <action type="add" dev="tv">
+     <action type="add" dev="tv">
         New service URL mapper implementation: render beautified URL and map parameters back when parsed.
       </action>
        <action type="update" dev="tv">
diff --git a/src/java/org/apache/turbine/Turbine.java b/src/java/org/apache/turbine/Turbine.java
index 06a5bec6..3f3a2fb3 100644
--- a/src/java/org/apache/turbine/Turbine.java
+++ b/src/java/org/apache/turbine/Turbine.java
@@ -38,8 +38,8 @@ import javax.servlet.annotation.WebServlet;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.Unmarshaller;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.Unmarshaller;
 
 import org.apache.commons.configuration2.Configuration;
 import org.apache.commons.configuration2.PropertiesConfiguration;
@@ -465,7 +465,7 @@ public class Turbine extends HttpServlet
                                         .setFileName(confFile)
                                         .setListDelimiterHandler(new DefaultListDelimiterHandler(','))
                                         .setLocationStrategy(new HomeDirectoryLocationStrategy(confPath.getCanonicalPath(), false)));
-                // meta configuration : this may contain any commons configuration: system<>, jndi, env
+                // meta configuration: this may contain any commons configuration: system<>, jndi, env
                 configuration = propertiesBuilder.getConfiguration();
                 break;
             case JSON:
@@ -790,6 +790,7 @@ public class Turbine extends HttpServlet
         catch (Throwable t)
         {
             handleHorribleException(res, t);
+
         }
     }
 
diff --git a/src/java/org/apache/turbine/annotation/AnnotationProcessor.java b/src/java/org/apache/turbine/annotation/AnnotationProcessor.java
index 7913dcec..58149f8c 100644
--- a/src/java/org/apache/turbine/annotation/AnnotationProcessor.java
+++ b/src/java/org/apache/turbine/annotation/AnnotationProcessor.java
@@ -22,17 +22,22 @@ package org.apache.turbine.annotation;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
 import org.apache.commons.configuration2.Configuration;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.fulcrum.pool.PoolException;
+import org.apache.fulcrum.pool.PoolService;
 import org.apache.fulcrum.security.model.turbine.TurbineAccessControlList;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.turbine.Turbine;
 import org.apache.turbine.modules.Loader;
+import org.apache.turbine.services.Service;
 import org.apache.turbine.services.ServiceManager;
 import org.apache.turbine.services.TurbineServices;
 import org.apache.turbine.services.assemblerbroker.AssemblerBrokerService;
@@ -226,11 +231,32 @@ public class AnnotationProcessor
      * @throws TurbineException if the objects could not be injected
      */
     public static void process(Object object) throws TurbineException
+    {
+        process(object, false);
+    }
+
+    /**
+     * Search for annotated fields and optionally of method fields of the object and inject the appropriate
+     * objects
+     *
+     * @param object the object
+     * @param hasTurbineServicesInMethodFields set <code>true </code>, if methods should be parsed
+     * @throws TurbineException if the objects could not be injected
+     */
+    public static void process(Object object, Boolean hasTurbineServicesInMethodFields) throws TurbineException
     {
         ServiceManager manager = null;
         Configuration config = null;
         AssemblerBrokerService assembler = null;
+        PoolService pool= null;
         Class<?> clazz = object.getClass();
+        
+        boolean isTurbineService = false;
+        if ( clazz.isAnnotationPresent(TurbineService.class)) {
+            TurbineService service = clazz.getAnnotation(TurbineService.class);
+            log.debug("retrieved class annotation: "+ service);
+            isTurbineService = true;
+        } 
 
         while (clazz != null)
         {
@@ -267,15 +293,79 @@ public class AnnotationProcessor
                         }
                         injectTurbineLoader(object, assembler, field, (TurbineLoader) a);
                     }
+                    else if (a instanceof TurbineTool)
+                    {
+                        if (pool == null)
+                        {
+                            pool = (PoolService)TurbineServices.getInstance()
+                                    .getService(PoolService.ROLE);
+                        }
+                        injectTurbineTool(object, pool, field, (TurbineTool) a);
+                    }
                 }
+                if (isTurbineService)
+                {
+                    if (field.getType().isAnnotationPresent(TurbineService.class)) {
+                        TurbineService service = field.getType().getAnnotation(TurbineService.class);
+                        log.debug("retrieved implicit class annotation: "+ service);
+                        if (manager == null)
+                        {
+                            manager = TurbineServices.getInstance();
+                        }
+                        injectTurbineService(object, manager, field, service);
+                    }    
+                }
+            }
+
+            if (hasTurbineServicesInMethodFields) {
+                manager = processMethods(object, manager, clazz, isTurbineService);
             }
 
             clazz = clazz.getSuperclass();
         }
     }
 
+    private static ServiceManager processMethods(Object object, ServiceManager manager, Class<?> clazz, boolean isTurbineService) throws TurbineException {
+        Method[] methods = clazz.getMethods();
+
+        for (Method method : methods)
+        {
+            Annotation[] annotations = getAnnotations(method);
+            for (Annotation a : annotations)
+            {
+                if (a instanceof TurbineService)
+                {
+
+                    if (manager == null)
+                    {
+                        manager = TurbineServices.getInstance();
+                    }
+                    injectTurbineService(object, manager, method, (TurbineService) a);
+                }
+            }
+            if (isTurbineService)
+            {
+                if (manager == null)
+                {
+                    manager = TurbineServices.getInstance();
+                }
+                Class<?>[] classes = method.getParameterTypes();
+                for (Class<?> c : classes)
+                {
+                    if ( c.isAnnotationPresent(TurbineService.class)) {
+                        TurbineService service = c.getAnnotation(TurbineService.class);
+                        log.debug("retrieved implicit service in Turbien service: "+ service);
+                        injectTurbineService(object, manager, method, service);
+                    } 
+                    
+                }
+            }
+        }
+        return manager;
+    }
+
     /**
-     * Inject Turbine configuration into field of object
+     * Inject Turbine loader into field of object
      *
      * @param object the object to process
      * @param assembler AssemblerBrokerService, provides the loader
@@ -301,6 +391,38 @@ public class AnnotationProcessor
                     + loader + " into object " + object, e);
         }
     }
+    
+    /**
+     * Inject Turbine tool into field of object and 
+     * injects annotations provided in the tool.
+     *
+     * @param object the object to process
+     * @param pool PoolService, provides the pool
+     * @param field the field
+     * @param annotation the value of the annotation
+     *
+     * @throws TurbineException if loader cannot be set
+     */
+    private static void injectTurbineTool(Object object, PoolService pool, Field field, TurbineTool annotation) throws TurbineException
+    {
+        Object tool = null;
+        try
+        {
+            tool = pool.getInstance(annotation.value());
+            // inject annotations in tool
+            process(tool);
+
+            field.setAccessible(true);
+            log.debug("Injection of {} into object {}", tool, object);
+
+            field.set(object, tool);
+        }
+        catch (PoolException | IllegalArgumentException | IllegalAccessException e)
+        {
+            throw new TurbineException("Could not inject tool "
+                    + tool + " into object " + object, e);
+        } 
+    }
 
     /**
      * Inject Turbine configuration into field of object
@@ -343,7 +465,7 @@ public class AnnotationProcessor
                 if ( String.class.isAssignableFrom( type ) )
                 {
                     String value = conf.getString(key);
-                    log.debug("Injection of {} into object {}", value, object);
+                    log.debug("Injection of key {} into object {}", value, object);
 
                     field.setAccessible(true);
                     field.set(object, value);
@@ -351,7 +473,7 @@ public class AnnotationProcessor
                 else if ( Boolean.TYPE.isAssignableFrom( type ) )
                 {
                     boolean value = conf.getBoolean(key);
-                    log.debug("Injection of {} into object {}", value, object);
+                    log.debug("Injection of key {} into object {}", value, object);
 
                     field.setAccessible(true);
                     field.setBoolean(object, value);
@@ -359,7 +481,7 @@ public class AnnotationProcessor
                 else if ( Integer.TYPE.isAssignableFrom( type ) )
                 {
                     int value = conf.getInt(key);
-                    log.debug("Injection of {} into object {}", value, object);
+                    log.debug("Injection of key {} into object {}", value, object);
 
                     field.setAccessible(true);
                     field.setInt(object, value);
@@ -367,7 +489,7 @@ public class AnnotationProcessor
                 else if ( Long.TYPE.isAssignableFrom( type ) )
                 {
                     long value = conf.getLong(key);
-                    log.debug("Injection of {} into object {}", value, object);
+                    log.debug("Injection of key {} into object {}", value, object);
 
                     field.setAccessible(true);
                     field.setLong(object, value);
@@ -375,7 +497,7 @@ public class AnnotationProcessor
                 else if ( Short.TYPE.isAssignableFrom( type ) )
                 {
                     short value = conf.getShort(key);
-                    log.debug("Injection of {} into object {}", value, object);
+                    log.debug("Injection of key {} into object {}", value, object);
 
                     field.setAccessible(true);
                     field.setShort(object, value);
@@ -383,7 +505,7 @@ public class AnnotationProcessor
                 else if ( Long.TYPE.isAssignableFrom( type ) )
                 {
                     long value = conf.getLong(key);
-                    log.debug("Injection of {} into object {}", value, object);
+                    log.debug("Injection of key {} into object {}", value, object);
 
                     field.setAccessible(true);
                     field.setLong(object, value);
@@ -391,7 +513,7 @@ public class AnnotationProcessor
                 else if ( Float.TYPE.isAssignableFrom( type ) )
                 {
                     float value = conf.getFloat(key);
-                    log.debug("Injection of {} into object {}", value, object);
+                    log.debug("Injection of key {} into object {}", value, object);
 
                     field.setAccessible(true);
                     field.setFloat(object, value);
@@ -399,7 +521,7 @@ public class AnnotationProcessor
                 else if ( Double.TYPE.isAssignableFrom( type ) )
                 {
                     double value = conf.getDouble(key);
-                    log.debug("Injection of {} into object {}", value, object);
+                    log.debug("Injection of key {} into object {}", value, object);
 
                     field.setAccessible(true);
                     field.setDouble(object, value);
@@ -407,7 +529,7 @@ public class AnnotationProcessor
                 else if ( Byte.TYPE.isAssignableFrom( type ) )
                 {
                     byte value = conf.getByte(key);
-                    log.debug("Injection of {} into object {}", value, object);
+                    log.debug("Injection of key {} into object {}", value, object);
 
                     field.setAccessible(true);
                     field.setByte(object, value);
@@ -415,11 +537,21 @@ public class AnnotationProcessor
                 else if ( List.class.isAssignableFrom( type ) )
                 {
                     List<Object> values = conf.getList(key);
-                    log.debug("Injection of {} into object {}", values, object);
+                    log.debug("Injection of key {} into object {}", values, object);
 
                     field.setAccessible(true);
                     field.set(object, values);
+                } else {
+                    throw new TurbineException("Could not inject type " + 
+                      type + " into object " + object + ". Type "+ type + " not assignable in configuration "
+                      + conf + " (allowed: String, Boolean, List, Number Types, "+ Configuration.class.getName() + ").");
                 }
+            } else {
+                field.setAccessible(true);
+                Object defaultValue = field.get(object);
+                // this should not throw an error as it might be set later from container  e. g. session.timeout 
+                // we might check field.get<Type> to show the default value of the field, but this is only a guess, it might be set even later..
+                log.info("No key {} of type {} injected into object {}. Field {} is set to default {}.", key, type, object, field.getName(), defaultValue);
             }
         }
         catch (IllegalArgumentException | IllegalAccessException e)
@@ -443,46 +575,28 @@ public class AnnotationProcessor
     {
         String serviceName = null;
         // Check for annotation value
-        if (StringUtils.isNotEmpty(annotation.value()))
+        if (annotation != null && StringUtils.isNotEmpty(annotation.value()))
         {
             serviceName = annotation.value();
         }
         // Check for fields SERVICE_NAME and ROLE
         else
-        {
+        { 
+            // check field level annotation
             Field[] typeFields = field.getType().getFields();
-            for (Field f : typeFields)
-            {
-                if (TurbineService.SERVICE_NAME.equals(f.getName()))
-                {
-                    try
-                    {
-                        serviceName = (String)f.get(null);
-                    }
-                    catch (IllegalArgumentException | IllegalAccessException e)
-                    {
-                        continue;
-                    }
-                    break;
-                }
-                else if (TurbineService.ROLE.equals(f.getName()))
-                {
-                    try
-                    {
-                        serviceName = (String)f.get(null);
-                    }
-                    catch (IllegalArgumentException | IllegalAccessException e)
-                    {
-                        continue;
-                    }
-                    break;
-                }
-            }
+            serviceName = checkServiceOrRoleInField(serviceName, typeFields);
+            // if it is the default Service, we check class level annotation
+            if ( (serviceName == null || serviceName.equals(Service.SERVICE_NAME)) &&
+                    field.getType().isAnnotationPresent(TurbineService.class)) {
+                TurbineService service = field.getType().getAnnotation(TurbineService.class);
+                log.debug("retrieved class annotation: "+ service);
+                serviceName = service.value();
+            } 
         }
 
         if (StringUtils.isEmpty(serviceName))
         {
-            // Try interface class name
+            // Try interface class name (e.g. used by Fulcrum)
             serviceName = field.getType().getName();
         }
 
@@ -503,4 +617,94 @@ public class AnnotationProcessor
                     + serviceName + " into object " + object, e);
         }
     }
+
+    /**
+     * Injects Turbine service into method fields 
+     * 
+     * @param object the object to process
+     * @param manager the service manager
+     * @param method The method
+     * @param annotation the value of the annotation
+     * @throws TurbineException - If service could not be injected.
+     */
+    private static void injectTurbineService(Object object, ServiceManager manager, Method method, TurbineService annotation) throws TurbineException
+    {
+        String serviceName = null;
+        // Check for annotation value
+        if (annotation != null && StringUtils.isNotEmpty(annotation.value()))
+        {
+            serviceName = annotation.value();
+        }
+        else
+        {
+            Class<?>[] classes = method.getParameterTypes();
+            for (Class<?> c : classes)
+            {
+                Field[] fields = c.getFields();
+                // Check for fields SERVICE_NAME and ROLE
+                serviceName = checkServiceOrRoleInField(serviceName, fields);
+                
+                if ( (serviceName == null || serviceName.equals(Service.SERVICE_NAME)) &&
+                        c.isAnnotationPresent(TurbineService.class)) {
+                    TurbineService service = c.getAnnotation(TurbineService.class);
+                    log.debug("retrieved class annotation: "+ service);
+                    serviceName = service.value();
+                } 
+                
+            }
+        }
+
+        log.debug("Looking up service for injection: {} for object {}", serviceName, object);
+        if (StringUtils.isEmpty(serviceName))
+        {
+            // Try interface class name
+            serviceName = method.getName();
+        }
+
+        Object service = manager.getService(serviceName); // throws Exception on unknown service
+        method.setAccessible(true);
+
+        try
+        {
+            log.debug("Injection of {} into object {}", serviceName, object);
+
+            Object[] paramValues = new Object[1];
+            paramValues[0] = service;
+            method.invoke(object, paramValues);
+        }
+        catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException e)
+        {
+            throw new TurbineException("Could not inject service "
+                    + serviceName + " into object " + object, e);
+        }
+    }
+
+    private static String checkServiceOrRoleInField(String serviceName, Field[] fields) {
+        for (Field f : fields)
+            if (TurbineService.SERVICE_NAME.equals(f.getName()))
+            {
+                try
+                {
+                    serviceName = (String)f.get(null);
+                }
+                catch (IllegalArgumentException | IllegalAccessException e)
+                {
+                    continue;
+                }
+                break;
+            }
+            else if (TurbineService.ROLE.equals(f.getName()))
+            {
+                try
+                {
+                    serviceName = (String)f.get(null);
+                }
+                catch (IllegalArgumentException | IllegalAccessException e)
+                {
+                    continue;
+                }
+                break;
+            }
+        return serviceName;
+    }
 }
diff --git a/src/java/org/apache/turbine/annotation/TurbineService.java b/src/java/org/apache/turbine/annotation/TurbineService.java
index 5a4d59ae..e9d653d2 100644
--- a/src/java/org/apache/turbine/annotation/TurbineService.java
+++ b/src/java/org/apache/turbine/annotation/TurbineService.java
@@ -26,10 +26,12 @@ import java.lang.annotation.Target;
 
 
 /**
- * Annotation to mark fields in modules that require a service to be injected
+ * Annotation to mark class and fields in modules that require a service to be injected
+ * 
+ * Explicit field annotation of {@link #SERVICE_NAME} will take precedence of class annotation. 
  */
 @Retention( RetentionPolicy.RUNTIME )
-@Target( ElementType.FIELD )
+@Target( {ElementType.TYPE, ElementType.FIELD, ElementType.METHOD} )
 public @interface TurbineService
 {
     /**
diff --git a/src/java/org/apache/turbine/annotation/TurbineTool.java b/src/java/org/apache/turbine/annotation/TurbineTool.java
new file mode 100644
index 00000000..292e2341
--- /dev/null
+++ b/src/java/org/apache/turbine/annotation/TurbineTool.java
@@ -0,0 +1,43 @@
+package org.apache.turbine.annotation;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+import org.apache.turbine.services.pull.ApplicationTool;
+
+
+/**
+ * Annotation to mark fields in modules and actions that require a tool to be injected
+ */
+@Retention( RetentionPolicy.RUNTIME )
+@Target( ElementType.FIELD )
+public @interface TurbineTool
+{
+    /**
+     * Get the class of the tool target to inject
+     *
+     * @return the class the tool is responsible for
+     */
+    Class<? extends ApplicationTool> value();
+}
diff --git a/src/java/org/apache/turbine/annotation/package-info.java b/src/java/org/apache/turbine/annotation/package-info.java
new file mode 100644
index 00000000..d4b8a652
--- /dev/null
+++ b/src/java/org/apache/turbine/annotation/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Turbine Annotations and annotation processor.
+ * <br>
+*/
+package org.apache.turbine.annotation;
diff --git a/src/java/org/apache/turbine/modules/ActionEvent.java b/src/java/org/apache/turbine/modules/ActionEvent.java
index 5bbc7ff2..0b0ad64a 100644
--- a/src/java/org/apache/turbine/modules/ActionEvent.java
+++ b/src/java/org/apache/turbine/modules/ActionEvent.java
@@ -25,6 +25,7 @@ import java.lang.reflect.Method;
 import java.util.Arrays;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+import java.util.stream.Collectors;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.fulcrum.parser.ParameterParser;
@@ -133,13 +134,12 @@ public abstract class ActionEvent implements Action
 	 */
 	protected Method getMethod(String name, Class<?>[] signature, ParameterParser pp) throws NoSuchMethodException
 	{
-	    StringBuilder cacheKey = new StringBuilder(name);
-	    for (Class<?> clazz : signature)
-	    {
-	        cacheKey.append(':').append(clazz.getCanonicalName());
-	    }
+	    String cacheKey =
+				Arrays.stream(signature)
+						.map(clazz -> ':' + clazz.getCanonicalName())
+						.collect(Collectors.joining("", name, ""));
 
-	    Method method = this.methodCache.get(cacheKey.toString());
+		Method method = this.methodCache.get(cacheKey);
 
 	    if (method == null)
 	    {
@@ -172,7 +172,7 @@ public abstract class ActionEvent implements Action
 	            method = getClass().getMethod(METHOD_NAME_PREFIX + StringUtils.capitalize(tmp), signature);
 	        }
 
-	        Method oldMethod = this.methodCache.putIfAbsent(cacheKey.toString(), method);
+	        Method oldMethod = this.methodCache.putIfAbsent(cacheKey, method);
 	        if (oldMethod != null)
 	        {
 	            method = oldMethod;
diff --git a/src/java/org/apache/turbine/modules/ActionLoader.java b/src/java/org/apache/turbine/modules/ActionLoader.java
index fe6ee092..eb881eec 100644
--- a/src/java/org/apache/turbine/modules/ActionLoader.java
+++ b/src/java/org/apache/turbine/modules/ActionLoader.java
@@ -31,7 +31,7 @@ import org.apache.turbine.pipeline.PipelineData;
  * @author <a href="mailto:peter@courcoux.biz">Peter Courcoux</a>
  * @version $Id$
  */
-public class ActionLoader
+public final class ActionLoader
     extends GenericLoader<Action>
 {
     /** The single instance of this class. */
diff --git a/src/java/org/apache/turbine/modules/Assembler.java b/src/java/org/apache/turbine/modules/Assembler.java
index d4d72544..7d6a4771 100644
--- a/src/java/org/apache/turbine/modules/Assembler.java
+++ b/src/java/org/apache/turbine/modules/Assembler.java
@@ -23,6 +23,9 @@ package org.apache.turbine.modules;
  * This is an interface that defines what an Assembler is. All the current
  * modules extend off of this class. It is currently empty and future use is yet
  * to be determined.
+ * 
+ * Currently this are mostly one of the classes, which could be loaded by {@link Loader}.
+ * Check also the assembler classes having a loader {@link GenericLoader}.
  *
  * @author <a href="mailto:mbryson@mont.mindspring.com">Dave Bryson</a>
  * @author <a href="mailto:peter@courcoux.biz">Peter Courcoux</a>
diff --git a/src/java/org/apache/turbine/modules/LayoutLoader.java b/src/java/org/apache/turbine/modules/LayoutLoader.java
index 90b67d80..f548b0d8 100644
--- a/src/java/org/apache/turbine/modules/LayoutLoader.java
+++ b/src/java/org/apache/turbine/modules/LayoutLoader.java
@@ -31,7 +31,7 @@ import org.apache.turbine.pipeline.PipelineData;
  * @author <a href="mailto:peter@courcoux.biz">Peter Courcoux</a>
  * @version $Id$
  */
-public class LayoutLoader
+public final class LayoutLoader
     extends GenericLoader<Layout>
 {
     /** The single instance of this class. */
diff --git a/src/java/org/apache/turbine/modules/Loader.java b/src/java/org/apache/turbine/modules/Loader.java
index 96e6defc..1185832c 100644
--- a/src/java/org/apache/turbine/modules/Loader.java
+++ b/src/java/org/apache/turbine/modules/Loader.java
@@ -20,7 +20,7 @@ package org.apache.turbine.modules;
  */
 
 /**
- * A common interface for Screen, Layout and Navigation Loader
+ * A common interface for Assembler classes like Action, Screen, Layout, Navigation Loader
  *
  * @author <a href="mailto:hps@intermeta.de">Henning P. Schmiedehausen</a>
  * @param <T> the specialized assembler type
diff --git a/src/java/org/apache/turbine/modules/NavigationLoader.java b/src/java/org/apache/turbine/modules/NavigationLoader.java
index f52408f8..3f7e9f20 100644
--- a/src/java/org/apache/turbine/modules/NavigationLoader.java
+++ b/src/java/org/apache/turbine/modules/NavigationLoader.java
@@ -31,7 +31,7 @@ import org.apache.turbine.pipeline.PipelineData;
  * @author <a href="mailto:peter@courcoux.biz">Peter Courcoux</a>
  * @version $Id$
  */
-public class NavigationLoader
+public final class NavigationLoader
     extends GenericLoader<Navigation>
 {
     /** The single instance of this class. */
diff --git a/src/java/org/apache/turbine/modules/PageLoader.java b/src/java/org/apache/turbine/modules/PageLoader.java
index 587567b6..1eab0255 100644
--- a/src/java/org/apache/turbine/modules/PageLoader.java
+++ b/src/java/org/apache/turbine/modules/PageLoader.java
@@ -31,7 +31,7 @@ import org.apache.turbine.pipeline.PipelineData;
  * @author <a href="mailto:peter@courcoux.biz">Peter Courcoux</a>
  * @version $Id$
  */
-public class PageLoader
+public final class PageLoader
     extends GenericLoader<Page>
 {
     /** The single instance of this class. */
diff --git a/src/java/org/apache/turbine/modules/ScheduledJobLoader.java b/src/java/org/apache/turbine/modules/ScheduledJobLoader.java
index c682d6d8..122aa3eb 100644
--- a/src/java/org/apache/turbine/modules/ScheduledJobLoader.java
+++ b/src/java/org/apache/turbine/modules/ScheduledJobLoader.java
@@ -32,7 +32,7 @@ import org.apache.turbine.services.schedule.JobEntry;
  * @author <a href="mailto:hps@intermeta.de">Henning P. Schmiedehausen</a>
  * @version $Id$
  */
-public class ScheduledJobLoader
+public final class ScheduledJobLoader
     extends GenericLoader<ScheduledJob>
 {
     /** The single instance of this class. */
diff --git a/src/java/org/apache/turbine/modules/ScreenLoader.java b/src/java/org/apache/turbine/modules/ScreenLoader.java
index 3b5b3034..25cea9b5 100644
--- a/src/java/org/apache/turbine/modules/ScreenLoader.java
+++ b/src/java/org/apache/turbine/modules/ScreenLoader.java
@@ -33,7 +33,7 @@ import org.apache.turbine.pipeline.PipelineData;
  * @author <a href="mailto:peter@courcoux.biz">Peter Courcoux</a>
  * @version $Id$
  */
-public class ScreenLoader
+public final class ScreenLoader
     extends GenericLoader<Screen>
 {
     /** The single instance of this class. */
diff --git a/src/java/org/apache/turbine/modules/actions/package-info.java b/src/java/org/apache/turbine/modules/actions/package-info.java
new file mode 100644
index 00000000..5084aa32
--- /dev/null
+++ b/src/java/org/apache/turbine/modules/actions/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Action class implementations.
+ * <br>
+*/
+package org.apache.turbine.modules.actions;
diff --git a/src/java/org/apache/turbine/modules/actions/package.html b/src/java/org/apache/turbine/modules/actions/package.html
deleted file mode 100644
index ef0b251b..00000000
--- a/src/java/org/apache/turbine/modules/actions/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Action class implementations.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/modules/actions/sessionvalidator/package-info.java b/src/java/org/apache/turbine/modules/actions/sessionvalidator/package-info.java
new file mode 100644
index 00000000..3e5033c6
--- /dev/null
+++ b/src/java/org/apache/turbine/modules/actions/sessionvalidator/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Session validator classes to be used with Turbine apps that use security.
+ * <br>
+*/
+package org.apache.turbine.modules.actions.sessionvalidator;
diff --git a/src/java/org/apache/turbine/modules/actions/sessionvalidator/package.html b/src/java/org/apache/turbine/modules/actions/sessionvalidator/package.html
deleted file mode 100644
index 58409225..00000000
--- a/src/java/org/apache/turbine/modules/actions/sessionvalidator/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Session validator classes to be used with Turbine apps that use security.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/modules/layouts/package-info.java b/src/java/org/apache/turbine/modules/layouts/package-info.java
new file mode 100644
index 00000000..9770abda
--- /dev/null
+++ b/src/java/org/apache/turbine/modules/layouts/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Layout class implementations.
+ * <br>
+*/
+package org.apache.turbine.modules.layouts;
diff --git a/src/java/org/apache/turbine/modules/layouts/package.html b/src/java/org/apache/turbine/modules/layouts/package.html
deleted file mode 100644
index 30cb5ad9..00000000
--- a/src/java/org/apache/turbine/modules/layouts/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Layout class implementations.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/modules/navigations/package-info.java b/src/java/org/apache/turbine/modules/navigations/package-info.java
new file mode 100644
index 00000000..41bafef0
--- /dev/null
+++ b/src/java/org/apache/turbine/modules/navigations/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Navigation class implementations.
+ * <br>
+*/
+package org.apache.turbine.modules.navigations;
diff --git a/src/java/org/apache/turbine/modules/navigations/package.html b/src/java/org/apache/turbine/modules/navigations/package.html
deleted file mode 100644
index 03abffe3..00000000
--- a/src/java/org/apache/turbine/modules/navigations/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Navigation class implementations.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/modules/package-info.java b/src/java/org/apache/turbine/modules/package-info.java
new file mode 100644
index 00000000..a22e9140
--- /dev/null
+++ b/src/java/org/apache/turbine/modules/package-info.java
@@ -0,0 +1,23 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Modules (Action, Screen, Layout, Navigation, Page) classes for the Turbine view.
+*/
+package org.apache.turbine.modules;
diff --git a/src/java/org/apache/turbine/modules/package.html b/src/java/org/apache/turbine/modules/package.html
deleted file mode 100644
index 7b0138da..00000000
--- a/src/java/org/apache/turbine/modules/package.html
+++ /dev/null
@@ -1,27 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Modules (Action, Screen, Layout, Navigation, Page) classes for the Turbine view.
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/modules/pages/package-info.java b/src/java/org/apache/turbine/modules/pages/package-info.java
new file mode 100644
index 00000000..59a6d3ac
--- /dev/null
+++ b/src/java/org/apache/turbine/modules/pages/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Page class implementations.
+ * <br>
+*/
+package org.apache.turbine.modules.pages;
diff --git a/src/java/org/apache/turbine/modules/pages/package.html b/src/java/org/apache/turbine/modules/pages/package.html
deleted file mode 100644
index d817c48b..00000000
--- a/src/java/org/apache/turbine/modules/pages/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Page class implementations.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/modules/screens/JSONScreen.java b/src/java/org/apache/turbine/modules/screens/JSONScreen.java
index 1da41277..8df01ea3 100644
--- a/src/java/org/apache/turbine/modules/screens/JSONScreen.java
+++ b/src/java/org/apache/turbine/modules/screens/JSONScreen.java
@@ -44,7 +44,7 @@ import org.jabsorb.JSONRPCBridge;
  * logged in prior to executing the functions you provide.
  *
  * <p>Here is an example from a superclass:
- * <code>
+ * {@code
  * public void doOutput(PipelineData data) throws Exception
  * {
  *     User user = data.getUser();
@@ -59,7 +59,7 @@ import org.jabsorb.JSONRPCBridge;
  *
  *     super.doOutput(data);
  * }
- * </code>
+ * }
  *
  * <p>The class MyFunctions would be something like:
  * <code>
diff --git a/src/java/org/apache/turbine/modules/screens/PlainJSONSecureAnnotatedScreen.java b/src/java/org/apache/turbine/modules/screens/PlainJSONSecureAnnotatedScreen.java
index 5adcd38b..e7ef668a 100644
--- a/src/java/org/apache/turbine/modules/screens/PlainJSONSecureAnnotatedScreen.java
+++ b/src/java/org/apache/turbine/modules/screens/PlainJSONSecureAnnotatedScreen.java
@@ -20,6 +20,7 @@ package org.apache.turbine.modules.screens;
  */
 
 import java.lang.reflect.Method;
+import java.util.Arrays;
 
 import org.apache.fulcrum.security.model.turbine.TurbineAccessControlList;
 import org.apache.turbine.annotation.AnnotationProcessor;
@@ -59,12 +60,14 @@ public class PlainJSONSecureAnnotatedScreen extends PlainJSONScreen
     protected boolean isAuthorized(PipelineData pipelineData) throws Exception {
         RunData data = pipelineData.getRunData();
         Method[] methods = getClass().getMethods();
-        for (Method m : methods) {
-            if (m.getName().equals( "doOutput" )) {
-                if ((TurbineAccessControlList)data.getACL() == null) return false;
-                return AnnotationProcessor.isAuthorized( m, (TurbineAccessControlList)data.getACL(), ConditionType.ANY );
-            }
-        }
-        return false;
+        // if the method passes the filter, it is authorized
+        return Arrays.stream(methods).filter(m ->
+                        m.getName().equals("doOutput"))
+                .takeWhile(m ->
+                        data.getACL() != null)
+                .findFirst()
+                .filter(m ->
+                        AnnotationProcessor.isAuthorized(m, (TurbineAccessControlList<?>) data.getACL(), ConditionType.ANY))
+                .isPresent();
     }
 }
diff --git a/src/java/org/apache/turbine/modules/screens/error/package-info.java b/src/java/org/apache/turbine/modules/screens/error/package-info.java
new file mode 100644
index 00000000..d8cb81ba
--- /dev/null
+++ b/src/java/org/apache/turbine/modules/screens/error/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Error Screen classes.
+ * <br>
+*/
+package org.apache.turbine.modules.screens.error;
diff --git a/src/java/org/apache/turbine/modules/screens/error/package.html b/src/java/org/apache/turbine/modules/screens/error/package.html
deleted file mode 100644
index ef2dfae2..00000000
--- a/src/java/org/apache/turbine/modules/screens/error/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Error Screen classes.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/modules/screens/package-info.java b/src/java/org/apache/turbine/modules/screens/package-info.java
new file mode 100644
index 00000000..ab5da54d
--- /dev/null
+++ b/src/java/org/apache/turbine/modules/screens/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Screen class implementations.
+ * <br>
+*/
+package org.apache.turbine.modules.screens;
diff --git a/src/java/org/apache/turbine/modules/screens/package.html b/src/java/org/apache/turbine/modules/screens/package.html
deleted file mode 100644
index 2039f6fe..00000000
--- a/src/java/org/apache/turbine/modules/screens/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Screen class implementations.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/om/OMTool.java b/src/java/org/apache/turbine/om/OMTool.java
index dec57356..5d8c8461 100644
--- a/src/java/org/apache/turbine/om/OMTool.java
+++ b/src/java/org/apache/turbine/om/OMTool.java
@@ -63,7 +63,7 @@ public class OMTool implements ApplicationTool, Recyclable
     {
         omMap = new ConcurrentHashMap<>();
         String className = Turbine.getConfiguration().getString("tool.om.factory");
-        this.omFactory = (RetrieverFactory)Class.forName(className).newInstance();
+        this.omFactory = (RetrieverFactory)Class.forName(className).getDeclaredConstructor().newInstance();
     }
 
     /**
diff --git a/src/java/org/apache/turbine/om/security/DefaultUserImpl.java b/src/java/org/apache/turbine/om/security/DefaultUserImpl.java
index 98295143..1f4aecb3 100644
--- a/src/java/org/apache/turbine/om/security/DefaultUserImpl.java
+++ b/src/java/org/apache/turbine/om/security/DefaultUserImpl.java
@@ -751,7 +751,7 @@ public class DefaultUserImpl implements User
 	 * @see org.apache.turbine.om.security.UserDelegate#setUserDelegate(org.apache.fulcrum.security.model.turbine.entity.TurbineUser)
 	 */
     @Override
-	public void setUserDelegate(TurbineUser userDelegate)
+	public final void setUserDelegate(TurbineUser userDelegate)
     {
         this.userDelegate = userDelegate;
     }
diff --git a/src/java/org/apache/turbine/om/security/package-info.java b/src/java/org/apache/turbine/om/security/package-info.java
new file mode 100644
index 00000000..d2a343ad
--- /dev/null
+++ b/src/java/org/apache/turbine/om/security/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Security object definitions for the Security Service.
+ * <br>
+*/
+package org.apache.turbine.om.security;
diff --git a/src/java/org/apache/turbine/om/security/package.html b/src/java/org/apache/turbine/om/security/package.html
deleted file mode 100644
index acccfc55..00000000
--- a/src/java/org/apache/turbine/om/security/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Security object definitions for the Security Service.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/package-info.java b/src/java/org/apache/turbine/package-info.java
new file mode 100644
index 00000000..f06c2b0a
--- /dev/null
+++ b/src/java/org/apache/turbine/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Turbine Servlet and Constants.
+ * <br>
+*/
+package org.apache.turbine;
diff --git a/src/java/org/apache/turbine/package.html b/src/java/org/apache/turbine/package.html
deleted file mode 100644
index 69de1603..00000000
--- a/src/java/org/apache/turbine/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Turbine Servlet and Constants.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/pipeline/TurbinePipeline.java b/src/java/org/apache/turbine/pipeline/TurbinePipeline.java
index d1ad7e41..fc9d3e4b 100644
--- a/src/java/org/apache/turbine/pipeline/TurbinePipeline.java
+++ b/src/java/org/apache/turbine/pipeline/TurbinePipeline.java
@@ -20,16 +20,17 @@ package org.apache.turbine.pipeline;
  */
 
 import java.io.IOException;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.concurrent.CopyOnWriteArrayList;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElementWrapper;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElementWrapper;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.apache.turbine.annotation.AnnotationProcessor;
 import org.apache.turbine.util.TurbineException;
@@ -157,7 +158,7 @@ public class TurbinePipeline
             throws TurbineException, IOException
     {
         // Initialize the per-thread state for this thread
-        state.set(valves.iterator());
+        state.set(Collections.unmodifiableCollection(valves).iterator());
 
         // Invoke the first Valve in this pipeline for this request
         invokeNext(pipelineData);
diff --git a/src/java/org/apache/turbine/pipeline/XmlValve.java b/src/java/org/apache/turbine/pipeline/XmlValve.java
index 46672faa..7d52714b 100644
--- a/src/java/org/apache/turbine/pipeline/XmlValve.java
+++ b/src/java/org/apache/turbine/pipeline/XmlValve.java
@@ -19,10 +19,10 @@ package org.apache.turbine.pipeline;
  * under the License.
  */
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.XmlValue;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlValue;
 
 /**
  * A JAXB Class for holding the class name of a valve.
diff --git a/src/java/org/apache/turbine/pipeline/XmlValveAdapter.java b/src/java/org/apache/turbine/pipeline/XmlValveAdapter.java
index f0cc6019..f396876c 100644
--- a/src/java/org/apache/turbine/pipeline/XmlValveAdapter.java
+++ b/src/java/org/apache/turbine/pipeline/XmlValveAdapter.java
@@ -19,7 +19,7 @@ package org.apache.turbine.pipeline;
  * under the License.
  */
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 /**
  * Creates Valve objects.
@@ -29,17 +29,17 @@ import javax.xml.bind.annotation.adapters.XmlAdapter;
 public class XmlValveAdapter extends XmlAdapter<XmlValve, Valve>
 {
     /**
-     * @see javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal(java.lang.Object)
+     * @see jakarta.xml.bind.annotation.adapters.XmlAdapter#unmarshal(java.lang.Object)
      */
     @Override
     public Valve unmarshal(XmlValve xmlValve) throws Exception
     {
         Class<?> valveClass = Class.forName(xmlValve.getClazz());
-        return (Valve) valveClass.newInstance();
+        return (Valve) valveClass.getDeclaredConstructor().newInstance();
     }
 
     /**
-     * @see javax.xml.bind.annotation.adapters.XmlAdapter#marshal(java.lang.Object)
+     * @see jakarta.xml.bind.annotation.adapters.XmlAdapter#marshal(java.lang.Object)
      */
     @Override
     public XmlValve marshal(Valve valve) throws Exception
diff --git a/src/java/org/apache/turbine/pipeline/package-info.java b/src/java/org/apache/turbine/pipeline/package-info.java
new file mode 100644
index 00000000..682fbcdd
--- /dev/null
+++ b/src/java/org/apache/turbine/pipeline/package-info.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * 
+ * <p>
+ *   The Turbine processing pipeline is modeled after the pipeline found
+ *   in Tomcat 4.0.1 (Catalina), and after the module architecture found
+ *   in Apache httpd.  It is extensible both laterally and
+ *   vertically via Valve additions and default Valve implementations
+ *   (respectively).  Even the semantics of the default Turbine
+ *   Pipeline (ClassicPipeline) can be changed by replacing or extending
+ *   the implementation with a custom one.
+ * </p>
+ * 
+ * <p>
+ *   As with Catalina, Turbine's Pipeline and Valve configuration is
+ *   setup via XML:
+ * 
+ *   <code>
+ * 	&lt;pipeline name="default"&gt;
+ * 	  &lt;valves&gt;
+ * 	    &lt;valve&gt;org.apache.turbine.pipeline.DetermineActionValve&lt;/valve&gt;
+ * 	    &lt;valve&gt;org.apache.turbine.pipeline.DetermineTargetValve&lt;/valve&gt;
+ * 	    &lt;valve&gt;org.apache.turbine.pipeline.DefaultSessionTimeoutValve&lt;/valve&gt;
+ * 	    &lt;valve&gt;org.apache.turbine.pipeline.DefaultLoginValve&lt;/valve&gt;
+ * 	    &lt;valve&gt;org.apache.turbine.pipeline.DefaultSessionValidationValve&lt;/valve&gt;
+ * 	    &lt;valve&gt;org.apache.turbine.pipeline.DefaultACLCreationValve&lt;/valve&gt;
+ * 	    &lt;valve&gt;org.apache.turbine.pipeline.ExecutePageValve&lt;/valve&gt;
+ * 	    &lt;valve&gt;org.apache.turbine.pipeline.CleanUpValve&lt;/valve&gt;
+ * 	    &lt;valve&gt;org.apache.turbine.pipeline.DetermineRedirectRequestedValve&lt;/valve&gt;
+ * 	  &lt;/valves&gt;
+ * 	&lt;/pipeline&gt;
+ *   </code>
+ * </p>
+ * 
+ * <p>
+ *   Please direct all comments, fixes, and enhancements to the
+ *   <a href="mailto:dev@turbine.apache.org">development list</a>.
+ * </p>
+ * 
+*/
+package org.apache.turbine.pipeline;
diff --git a/src/java/org/apache/turbine/pipeline/package.html b/src/java/org/apache/turbine/pipeline/package.html
deleted file mode 100644
index fce0bc4c..00000000
--- a/src/java/org/apache/turbine/pipeline/package.html
+++ /dev/null
@@ -1,65 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-
-<p>
-  The Turbine processing pipeline is modeled after the pipeline found
-  in Tomcat 4.0.1 (Catalina), and after the module architecture found
-  in Apache httpd.  It is extensible both laterally and
-  vertically via Valve additions and default Valve implementations
-  (respectively).  Even the semantics of the default Turbine
-  Pipeline (ClassicPipeline) can be changed by replacing or extending
-  the implementation with a custom one.
-</p>
-
-<p>
-  As with Catalina, Turbine's Pipeline and Valve configuration is
-  setup via XML:
-
-  <code>
-	&lt;pipeline name="default"&gt;
-	  &lt;valves&gt;
-	    &lt;valve&gt;org.apache.turbine.pipeline.DetermineActionValve&lt;/valve&gt;
-	    &lt;valve&gt;org.apache.turbine.pipeline.DetermineTargetValve&lt;/valve&gt;
-	    &lt;valve&gt;org.apache.turbine.pipeline.DefaultSessionTimeoutValve&lt;/valve&gt;
-	    &lt;valve&gt;org.apache.turbine.pipeline.DefaultLoginValve&lt;/valve&gt;
-	    &lt;valve&gt;org.apache.turbine.pipeline.DefaultSessionValidationValve&lt;/valve&gt;
-	    &lt;valve&gt;org.apache.turbine.pipeline.DefaultACLCreationValve&lt;/valve&gt;
-	    &lt;valve&gt;org.apache.turbine.pipeline.ExecutePageValve&lt;/valve&gt;
-	    &lt;valve&gt;org.apache.turbine.pipeline.CleanUpValve&lt;/valve&gt;
-	    &lt;valve&gt;org.apache.turbine.pipeline.DetermineRedirectRequestedValve&lt;/valve&gt;
-	  &lt;/valves&gt;
-	&lt;/pipeline&gt;
-  </code>
-</p>
-
-<p>
-  Please direct all comments, fixes, and enhancements to the
-  <a href="mailto:dev@turbine.apache.org">development list</a>.
-</p>
-
-</body>
-
-</html>
diff --git a/src/java/org/apache/turbine/services/BaseInitableBroker.java b/src/java/org/apache/turbine/services/BaseInitableBroker.java
index 6759c73c..61acbf48 100644
--- a/src/java/org/apache/turbine/services/BaseInitableBroker.java
+++ b/src/java/org/apache/turbine/services/BaseInitableBroker.java
@@ -233,19 +233,13 @@ public abstract class BaseInitableBroker
         {
             try
             {
-                initable = (Initable) Class.forName(className).newInstance();
+                initable = (Initable) Class.forName(className).getDeclaredConstructor().newInstance();
             }
-
-                    // those two errors must be passed to the VM
-            catch (ThreadDeath t)
+            // those two errors must be passed to the VM
+            catch (ThreadDeath | OutOfMemoryError t)
             {
                 throw t;
             }
-            catch (OutOfMemoryError t)
-            {
-                throw t;
-            }
-
             catch (Throwable t)
             {
                 // Used to indicate error condition.
diff --git a/src/java/org/apache/turbine/services/BaseServiceBroker.java b/src/java/org/apache/turbine/services/BaseServiceBroker.java
index e1ad7281..1cf50531 100644
--- a/src/java/org/apache/turbine/services/BaseServiceBroker.java
+++ b/src/java/org/apache/turbine/services/BaseServiceBroker.java
@@ -21,6 +21,7 @@ package org.apache.turbine.services;
 
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
@@ -324,7 +325,7 @@ public abstract class BaseServiceBroker implements ServiceBroker
      */
     public Iterator<String> getServiceNames()
     {
-        return mapping.keySet().iterator();
+        return Collections.unmodifiableSet(mapping.keySet()).iterator();
     }
 
     /**
@@ -337,15 +338,10 @@ public abstract class BaseServiceBroker implements ServiceBroker
     public Iterator<String> getServiceNames(String prefix)
     {
         Set<String> keys = new LinkedHashSet<>(mapping.keySet());
-        for(Iterator<String> key = keys.iterator(); key.hasNext();)
-        {
-            if (!key.next().startsWith(prefix))
-            {
-                key.remove();
-            }
-        }
 
-        return keys.iterator();
+        keys.removeIf(key -> !key.startsWith(prefix));
+
+        return Collections.unmodifiableSet(keys).iterator();
     }
 
     /**
@@ -358,18 +354,24 @@ public abstract class BaseServiceBroker implements ServiceBroker
      * service was not successful.
      */
     @Override
-    public synchronized void initService(String name)
+    public void initService(String name)
             throws InitializationException
     {
         // Calling getServiceInstance(name) assures that the Service
         // implementation has its name and broker reference set before
         // initialization.
         Service instance = getServiceInstance(name);
-
-        if (!instance.getInit())
-        {
-            // this call might result in an indirect recursion
-            instance.init();
+        
+        serviceLock.lock();
+        try {
+            if (!instance.getInit())
+            {
+                // this call might result in an indirect recursion
+                instance.init();
+            }
+            
+        } finally {
+            serviceLock.unlock();
         }
     }
 
@@ -457,20 +459,25 @@ public abstract class BaseServiceBroker implements ServiceBroker
      * uninitialized.
      */
     @Override
-    public synchronized void shutdownService(String name)
+    public void shutdownService(String name)
     {
         try
         {
             Service service = getServiceInstance(name);
             if (service != null && service.getInit())
             {
-                service.shutdown();
-
-                if (service.getInit() && service instanceof BaseService)
-                {
-                    // BaseService::shutdown() does this by default,
-                    // but could've been overriden poorly.
-                    ((BaseService) service).setInit(false);
+                serviceLock.lock();
+                try {
+                    service.shutdown();
+    
+                    if (service.getInit() && service instanceof BaseService)
+                    {
+                        // BaseService::shutdown() does this by default,
+                        // but could've been overriden poorly.
+                        ((BaseService) service).setInit(false);
+                    }
+                } finally {
+                    serviceLock.unlock();
                 }
             }
         }
@@ -508,9 +515,9 @@ public abstract class BaseServiceBroker implements ServiceBroker
             reverseServicesList.add(0, serviceName);
         }
 
-        for (Iterator<String> serviceNames = reverseServicesList.iterator(); serviceNames.hasNext();)
+        for (String s : reverseServicesList)
         {
-            serviceName = serviceNames.next();
+            serviceName = s;
             log.info("Shutting down service: {}", serviceName);
             shutdownService(serviceName);
         }
@@ -536,14 +543,16 @@ public abstract class BaseServiceBroker implements ServiceBroker
 	            service = getServiceInstance(name);
 	            if (!service.getInit())
 	            {
-	                synchronized (service.getClass())
-	                {
+	                serviceLock.lock(); // was synchronized (service.getClass(), but should be equivalent
+	                try {
 	                    if (!service.getInit())
 	                    {
 	                        log.info("Start Initializing service (late): {}", name);
 	                        service.init();
 	                        log.info("Finish Initializing service (late): {}", name);
 	                    }
+	                } finally {
+	                    serviceLock.unlock();
 	                }
 	            }
 	            if (!service.getInit())
@@ -624,7 +633,7 @@ public abstract class BaseServiceBroker implements ServiceBroker
 
                         try
                         {
-                            service = (Service) clazz.newInstance();
+                            service = (Service) clazz.getDeclaredConstructor().newInstance();
 
                             // check if the newly created service is also a
                             // service provider - if so then remember it
@@ -643,11 +652,7 @@ public abstract class BaseServiceBroker implements ServiceBroker
                             throw new InstantiationException("Class " + clazz +
                                     " doesn't implement the Service interface", e);
                         }
-                        catch (ThreadDeath t)
-                        {
-                            throw t;
-                        }
-                        catch (OutOfMemoryError t)
+                        catch (ThreadDeath | OutOfMemoryError t)
                         {
                             throw t;
                         }
diff --git a/src/java/org/apache/turbine/services/FieldAnnotatedTurbineBaseService.java b/src/java/org/apache/turbine/services/FieldAnnotatedTurbineBaseService.java
new file mode 100644
index 00000000..b8037a44
--- /dev/null
+++ b/src/java/org/apache/turbine/services/FieldAnnotatedTurbineBaseService.java
@@ -0,0 +1,63 @@
+package org.apache.turbine.services;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import org.apache.turbine.annotation.AnnotationProcessor;
+import org.apache.turbine.util.TurbineException;
+
+/**
+ * <p>This class provides a <code>Service</code> implementation that
+ * Services used in Turbine are required to extend. 
+ * This class provides the ability to process field annotation {@link TurbineServices} in a Turbine service.
+ * You could enable scanning globally by annotating the class (service) with the annotation {@link TurbineServices}.
+ * Field annotation could then be omitted, if the field class is {@link TurbineServices} annotated.
+ * </p>
+ *
+ */
+public abstract class FieldAnnotatedTurbineBaseService
+        extends TurbineBaseService
+{
+    
+    private static Logger log = LogManager.getLogger(FieldAnnotatedTurbineBaseService.class);
+    /**
+     * Performs late initialization.
+     *
+     * If your class relies on early initialization, and the object it
+     * expects was not received, you can use late initialization to
+     * throw an exception and complain.
+     *
+     * @throws InitializationException if initialization of this
+     * class was not successful.
+     */
+    @Override
+    public void init() throws InitializationException
+    {
+        try {
+            log.debug("parsing annotations for {}", this.getClass());
+            AnnotationProcessor.process(this, false);
+        } catch (TurbineException e) {
+            throw new InitializationException(e.getMessage(), e);
+        }
+        setInit(true);
+    }
+}
diff --git a/src/java/org/apache/turbine/services/MethodAnnotatedTurbineBaseService.java b/src/java/org/apache/turbine/services/MethodAnnotatedTurbineBaseService.java
new file mode 100644
index 00000000..97c0aba8
--- /dev/null
+++ b/src/java/org/apache/turbine/services/MethodAnnotatedTurbineBaseService.java
@@ -0,0 +1,59 @@
+package org.apache.turbine.services;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import org.apache.turbine.annotation.AnnotationProcessor;
+import org.apache.turbine.util.TurbineException;
+
+/**
+ * <p>This class provides a <code>Service</code> implementation that
+ * Services used in Turbine are required to extend. 
+ * This class provides the ability to process field and method annotations {@link TurbineServices} in a Turbine service.
+ * You could also enable scanning globally by annotating the class (service) with the annotation {@link TurbineServices}, 
+ * then method annotation could be omitted, if the argument class is {@link TurbineServices} annotated.  
+ * </p>
+ *
+ */
+public abstract class MethodAnnotatedTurbineBaseService
+        extends TurbineBaseService
+{
+    
+    /**
+     * Performs late initialization.
+     *
+     * If your class relies on early initialization, and the object it
+     * expects was not received, you can use late initialization to
+     * throw an exception and complain.
+     *
+     * @throws InitializationException if initialization of this
+     * class was not successful.
+     */
+    @Override
+    public void init() throws InitializationException
+    {
+        setInit(true);
+        try {
+            // if second parameter is true, we get into an endless loop if setInit is done last
+            AnnotationProcessor.process(this, true);
+        } catch (TurbineException e) {
+            throw new InitializationException(e.getMessage(), e);
+        }
+    }
+}
diff --git a/src/java/org/apache/turbine/services/ServiceManager.java b/src/java/org/apache/turbine/services/ServiceManager.java
index 06483c66..9d5a736e 100644
--- a/src/java/org/apache/turbine/services/ServiceManager.java
+++ b/src/java/org/apache/turbine/services/ServiceManager.java
@@ -67,4 +67,22 @@ public interface ServiceManager extends ServiceBroker
      * @param applicationRoot application root
      */
     void setApplicationRoot(String applicationRoot);
+    
+    /**
+     * Set an application specific service object
+     * that can be used by application specific
+     * services.
+     *
+     * @param name name of service object
+     * @param value value of service object
+     */
+    public void setServiceObject(String name, Object value);
+
+    /**
+     * Get an application specific service object.
+     *
+     * @param name the name of the service object
+     * @return Object application specific service object
+     */
+    public Object getServiceObject(String name);
 }
diff --git a/src/java/org/apache/turbine/services/assemblerbroker/TurbineAssemblerBrokerService.java b/src/java/org/apache/turbine/services/assemblerbroker/TurbineAssemblerBrokerService.java
index f78fa27e..7992c6fc 100644
--- a/src/java/org/apache/turbine/services/assemblerbroker/TurbineAssemblerBrokerService.java
+++ b/src/java/org/apache/turbine/services/assemblerbroker/TurbineAssemblerBrokerService.java
@@ -111,7 +111,7 @@ public class TurbineAssemblerBrokerService
             {
                 @SuppressWarnings("unchecked")
                 AssemblerFactory<? extends Assembler> af =
-                    (AssemblerFactory<? extends Assembler>) Class.forName(factory).newInstance();
+                    (AssemblerFactory<? extends Assembler>) Class.forName(factory).getDeclaredConstructor().newInstance();
                 registerFactory(af);
             }
             // these must be passed to the VM
diff --git a/src/java/org/apache/turbine/services/assemblerbroker/package-info.java b/src/java/org/apache/turbine/services/assemblerbroker/package-info.java
new file mode 100644
index 00000000..5965f3dd
--- /dev/null
+++ b/src/java/org/apache/turbine/services/assemblerbroker/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Assemblerbroker Service looks for action, screen, page, layout classes based on class fragments.
+ * <br>
+*/
+package org.apache.turbine.services.assemblerbroker;
diff --git a/src/java/org/apache/turbine/services/assemblerbroker/package.html b/src/java/org/apache/turbine/services/assemblerbroker/package.html
deleted file mode 100644
index 185e2bb6..00000000
--- a/src/java/org/apache/turbine/services/assemblerbroker/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Assemblerbroker Service looks for action, screen, page, layout classes based on class fragments.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/assemblerbroker/util/java/JavaBaseFactory.java b/src/java/org/apache/turbine/services/assemblerbroker/util/java/JavaBaseFactory.java
index 32dbdb41..0bbe528f 100644
--- a/src/java/org/apache/turbine/services/assemblerbroker/util/java/JavaBaseFactory.java
+++ b/src/java/org/apache/turbine/services/assemblerbroker/util/java/JavaBaseFactory.java
@@ -1,6 +1,8 @@
 package org.apache.turbine.services.assemblerbroker.util.java;
 
 
+import java.lang.reflect.InvocationTargetException;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -91,7 +93,7 @@ public abstract class JavaBaseFactory<T extends Assembler>
                             servClass = _servClass;
                         }
                     }
-                    assembler = servClass.newInstance();
+                    assembler = servClass.getDeclaredConstructor().newInstance();
                     break; // for()
                 }
                 catch (ClassNotFoundException cnfe)
@@ -105,7 +107,7 @@ public abstract class JavaBaseFactory<T extends Assembler>
                     log.debug("{}: No Class Definition found", className);
                 }
                 // With ClassCastException, InstantiationException we hit big problems
-                catch (ClassCastException | InstantiationException | IllegalAccessException e)
+                catch (ClassCastException | InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e)
                 {
                     // This means trouble!
                     // Alternatively we can throw this exception so
diff --git a/src/java/org/apache/turbine/services/assemblerbroker/util/java/package-info.java b/src/java/org/apache/turbine/services/assemblerbroker/util/java/package-info.java
new file mode 100644
index 00000000..c3f1f2ca
--- /dev/null
+++ b/src/java/org/apache/turbine/services/assemblerbroker/util/java/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Factories for the java class based view (all template views).
+ * <br>
+*/
+package org.apache.turbine.services.assemblerbroker.util.java;
diff --git a/src/java/org/apache/turbine/services/assemblerbroker/util/java/package.html b/src/java/org/apache/turbine/services/assemblerbroker/util/java/package.html
deleted file mode 100644
index f840e4a2..00000000
--- a/src/java/org/apache/turbine/services/assemblerbroker/util/java/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Factories for the java class based view (all template views).
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/assemblerbroker/util/package-info.java b/src/java/org/apache/turbine/services/assemblerbroker/util/package-info.java
new file mode 100644
index 00000000..9a096ed1
--- /dev/null
+++ b/src/java/org/apache/turbine/services/assemblerbroker/util/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The various lookup factories for the Assemblerbroker service.
+ * <br>
+*/
+package org.apache.turbine.services.assemblerbroker.util;
diff --git a/src/java/org/apache/turbine/services/assemblerbroker/util/package.html b/src/java/org/apache/turbine/services/assemblerbroker/util/package.html
deleted file mode 100644
index c2527086..00000000
--- a/src/java/org/apache/turbine/services/assemblerbroker/util/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-The various lookup factories for the Assemblerbroker service.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/assemblerbroker/util/python/package-info.java b/src/java/org/apache/turbine/services/assemblerbroker/util/python/package-info.java
new file mode 100644
index 00000000..78ca55d3
--- /dev/null
+++ b/src/java/org/apache/turbine/services/assemblerbroker/util/python/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Factory for the python / jython based view.
+ * <br>
+*/
+package org.apache.turbine.services.assemblerbroker.util.python;
diff --git a/src/java/org/apache/turbine/services/assemblerbroker/util/python/package.html b/src/java/org/apache/turbine/services/assemblerbroker/util/python/package.html
deleted file mode 100644
index 5aea5a8f..00000000
--- a/src/java/org/apache/turbine/services/assemblerbroker/util/python/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Factory for the python / jython based view.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/avaloncomponent/Log4j2Logger.java b/src/java/org/apache/turbine/services/avaloncomponent/Log4j2Logger.java
deleted file mode 100644
index 50987967..00000000
--- a/src/java/org/apache/turbine/services/avaloncomponent/Log4j2Logger.java
+++ /dev/null
@@ -1,247 +0,0 @@
-package org.apache.turbine.services.avaloncomponent;
-
-import org.apache.avalon.framework.logger.Logger;
-import org.apache.logging.log4j.LogManager;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * A Log4J2 wrapper class for Logger.
- *
- * Use org.apache.fulcrum.yaafi.framework.logger.Log4j2Logger instead.
- * 
- * @author <a href="mailto:tv@apache.org">Thomas Vandahl</a>
- */
-@Deprecated
-public final class Log4j2Logger
-        implements Logger
-{
-    // underlying implementation
-    private final org.apache.logging.log4j.Logger m_logger;
-
-    /**
-     * Create a logger that delegates to specified category.
-     *
-     * @param logImpl
-     *            the category to delegate to
-     */
-    public Log4j2Logger(final org.apache.logging.log4j.Logger logImpl)
-    {
-        m_logger = logImpl;
-    }
-
-    /**
-     * Log a debug message.
-     *
-     * @param message
-     *            the message
-     */
-    @Override
-    public void debug(final String message)
-    {
-        m_logger.debug(message);
-    }
-
-    /**
-     * Log a debug message.
-     *
-     * @param message
-     *            the message
-     * @param throwable
-     *            the throwable
-     */
-    @Override
-    public void debug(final String message, final Throwable throwable)
-    {
-        m_logger.debug(message, throwable);
-    }
-
-    /**
-     * Determine if messages of priority "debug" will be logged.
-     *
-     * @return true if "debug" messages will be logged
-     */
-    @Override
-    public boolean isDebugEnabled()
-    {
-        return m_logger.isDebugEnabled();
-    }
-
-    /**
-     * Log a info message.
-     *
-     * @param message
-     *            the message
-     */
-    @Override
-    public void info(final String message)
-    {
-        m_logger.info(message);
-    }
-
-    /**
-     * Log a info message.
-     *
-     * @param message
-     *            the message
-     * @param throwable
-     *            the throwable
-     */
-    @Override
-    public void info(final String message, final Throwable throwable)
-    {
-        m_logger.info(message, throwable);
-    }
-
-    /**
-     * Determine if messages of priority "info" will be logged.
-     *
-     * @return true if "info" messages will be logged
-     */
-    @Override
-    public boolean isInfoEnabled()
-    {
-        return m_logger.isInfoEnabled();
-    }
-
-    /**
-     * Log a warn message.
-     *
-     * @param message
-     *            the message
-     */
-    @Override
-    public void warn(final String message)
-    {
-        m_logger.warn(message);
-    }
-
-    /**
-     * Log a warn message.
-     *
-     * @param message
-     *            the message
-     * @param throwable
-     *            the throwable
-     */
-    @Override
-    public void warn(final String message, final Throwable throwable)
-    {
-        m_logger.warn(message, throwable);
-    }
-
-    /**
-     * Determine if messages of priority "warn" will be logged.
-     *
-     * @return true if "warn" messages will be logged
-     */
-    @Override
-    public boolean isWarnEnabled()
-    {
-        return m_logger.isWarnEnabled();
-    }
-
-    /**
-     * Log a error message.
-     *
-     * @param message
-     *            the message
-     */
-    @Override
-    public void error(final String message)
-    {
-        m_logger.error(message);
-    }
-
-    /**
-     * Log a error message.
-     *
-     * @param message
-     *            the message
-     * @param throwable
-     *            the throwable
-     */
-    @Override
-    public void error(final String message, final Throwable throwable)
-    {
-        m_logger.error(message, throwable);
-    }
-
-    /**
-     * Determine if messages of priority "error" will be logged.
-     *
-     * @return true if "error" messages will be logged
-     */
-    @Override
-    public boolean isErrorEnabled()
-    {
-        return m_logger.isErrorEnabled();
-    }
-
-    /**
-     * Log a fatalError message.
-     *
-     * @param message
-     *            the message
-     */
-    @Override
-    public void fatalError(final String message)
-    {
-        m_logger.fatal(message);
-    }
-
-    /**
-     * Log a fatalError message.
-     *
-     * @param message
-     *            the message
-     * @param throwable
-     *            the throwable
-     */
-    @Override
-    public void fatalError(final String message, final Throwable throwable)
-    {
-        m_logger.fatal(message, throwable);
-    }
-
-    /**
-     * Determine if messages of priority "fatalError" will be logged.
-     *
-     * @return true if "fatalError" messages will be logged
-     */
-    @Override
-    public boolean isFatalErrorEnabled()
-    {
-        return m_logger.isFatalEnabled();
-    }
-
-    /**
-     * Create a new child logger. The name of the child logger is
-     * [current-loggers-name].[passed-in-name] Throws
-     * <code>IllegalArgumentException</code> if name has an empty element name
-     *
-     * @param name
-     *            the subname of this logger
-     * @return the new logger
-     */
-    @Override
-    public Logger getChildLogger(final String name)
-    {
-        return new Log4j2Logger(LogManager.getLogger(m_logger.getName() + "." + name));
-    }
-}
diff --git a/src/java/org/apache/turbine/services/avaloncomponent/TurbineYaafiComponentService.java b/src/java/org/apache/turbine/services/avaloncomponent/TurbineYaafiComponentService.java
index e70ba9bd..1183bd8e 100644
--- a/src/java/org/apache/turbine/services/avaloncomponent/TurbineYaafiComponentService.java
+++ b/src/java/org/apache/turbine/services/avaloncomponent/TurbineYaafiComponentService.java
@@ -30,6 +30,7 @@ import org.apache.commons.configuration2.Configuration;
 import org.apache.fulcrum.yaafi.framework.container.ServiceContainer;
 import org.apache.fulcrum.yaafi.framework.factory.ServiceContainerConfiguration;
 import org.apache.fulcrum.yaafi.framework.factory.ServiceContainerFactory;
+import org.apache.fulcrum.yaafi.framework.logger.Log4j2Logger;
 import org.apache.logging.log4j.LogManager;
 import org.apache.turbine.services.InitializationException;
 import org.apache.turbine.services.InstantiationException;
diff --git a/src/java/org/apache/turbine/services/avaloncomponent/package-info.java b/src/java/org/apache/turbine/services/avaloncomponent/package-info.java
new file mode 100644
index 00000000..47760283
--- /dev/null
+++ b/src/java/org/apache/turbine/services/avaloncomponent/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Avalon based component service to provide access to avalon components for Turbine applications.
+ * <br>
+*/
+package org.apache.turbine.services.avaloncomponent;
diff --git a/src/java/org/apache/turbine/services/avaloncomponent/package.html b/src/java/org/apache/turbine/services/avaloncomponent/package.html
deleted file mode 100644
index 2b7e103f..00000000
--- a/src/java/org/apache/turbine/services/avaloncomponent/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Avalon based component service to provide access to avalon components for Turbine applications.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/intake/package-info.java b/src/java/org/apache/turbine/services/intake/package-info.java
new file mode 100644
index 00000000..5ca4cb2e
--- /dev/null
+++ b/src/java/org/apache/turbine/services/intake/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The Intake pull tool.
+ * <br>
+*/
+package org.apache.turbine.services.intake;
diff --git a/src/java/org/apache/turbine/services/jsonrpc/package-info.java b/src/java/org/apache/turbine/services/jsonrpc/package-info.java
new file mode 100644
index 00000000..14631457
--- /dev/null
+++ b/src/java/org/apache/turbine/services/jsonrpc/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The JSON-RPC Service supports JavaScript to Java AJAX communications between
+ * browsers and Turbine applications.<br>
+*/
+package org.apache.turbine.services.jsonrpc;
diff --git a/src/java/org/apache/turbine/services/jsonrpc/package.html b/src/java/org/apache/turbine/services/jsonrpc/package.html
deleted file mode 100644
index 14711c3f..00000000
--- a/src/java/org/apache/turbine/services/jsonrpc/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-The JSON-RPC Service supports JavaScript to Java AJAX communications between
-browsers and Turbine applications.<br />
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/jsp/TurbineJspService.java b/src/java/org/apache/turbine/services/jsp/TurbineJspService.java
index 114e79a3..3e7a6364 100644
--- a/src/java/org/apache/turbine/services/jsp/TurbineJspService.java
+++ b/src/java/org/apache/turbine/services/jsp/TurbineJspService.java
@@ -23,6 +23,7 @@ package org.apache.turbine.services.jsp;
 
 import java.io.File;
 import java.io.IOException;
+import java.util.Arrays;
 
 import javax.servlet.RequestDispatcher;
 import javax.servlet.http.HttpServletRequest;
@@ -242,14 +243,7 @@ public class TurbineJspService
     @Override
     public boolean templateExists(String template)
     {
-        for (String templatePath : templatePaths)
-        {
-            if (templateExists(templatePath, template))
-            {
-                return true;
-            }
-        }
-        return false;
+        return Arrays.stream(templatePaths).anyMatch(templatePath -> templateExists(templatePath, template));
     }
 
     /**
diff --git a/src/java/org/apache/turbine/services/jsp/package-info.java b/src/java/org/apache/turbine/services/jsp/package-info.java
new file mode 100644
index 00000000..b06d4b1b
--- /dev/null
+++ b/src/java/org/apache/turbine/services/jsp/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * JSP Service is used to provide Turbine with a Java Server page (JSP) based view.
+ * <br>
+*/
+package org.apache.turbine.services.jsp;
diff --git a/src/java/org/apache/turbine/services/jsp/package.html b/src/java/org/apache/turbine/services/jsp/package.html
deleted file mode 100644
index 94963593..00000000
--- a/src/java/org/apache/turbine/services/jsp/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-JSP Service is used to provide Turbine with a Java Server page (JSP) based view.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/jsp/util/package-info.java b/src/java/org/apache/turbine/services/jsp/util/package-info.java
new file mode 100644
index 00000000..32652f76
--- /dev/null
+++ b/src/java/org/apache/turbine/services/jsp/util/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Support classes for JSP screens.
+ * <br>
+*/
+package org.apache.turbine.services.jsp.util;
diff --git a/src/java/org/apache/turbine/services/localization/DateTimeFormatterInterface.java b/src/java/org/apache/turbine/services/localization/DateTimeFormatterInterface.java
new file mode 100644
index 00000000..73747e1f
--- /dev/null
+++ b/src/java/org/apache/turbine/services/localization/DateTimeFormatterInterface.java
@@ -0,0 +1,141 @@
+package org.apache.turbine.services.localization;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.time.ZoneId;
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.TemporalAccessor;
+import java.util.Locale;
+
+public interface DateTimeFormatterInterface {
+
+    /**
+     * Property tag for the date format that is to be used for the web
+     * application. "tool.dateTool.format"
+     */
+    final String DATE_TIME_FORMAT_KEY = "datetime.format";
+    
+    final String DATE_TIME_ZONEID_KEY = "datetime.zoneId";
+    
+    final String USE_TURBINE_LOCALE_KEY = "datetime.use.turbine.locale";
+    
+    final String USE_REQUEST_LOCALE_KEY = "tool.use.request.locale";
+    
+    /** Default date format. find supported formats in {@link DateTimeFormatterService} */
+    final String DATE_TIME_FORMAT_DEFAULT = "MM/dd/yyyy";
+
+    DateTimeFormatter getDefaultFormat();
+
+    String getFormatPattern();
+
+    /**
+     * Formats the given datetime as a String with the #{@link DateTimeFormatterService#getDefaultFormat()}.
+     * using the default date format.
+     *
+     * @param temporalAccessor {@link TemporalAccessor to format
+     * @return String value of the date
+     */
+    <T extends TemporalAccessor> String format(T temporalAccessor);
+
+    /**
+     * Formats the given date as a String.
+     *
+     * @param temporalAccessor TimeDate date to format
+     * @param dateFormatString format string to use.  See {@link DateTimeFormatter}
+     * for details.
+     * @return String value of the date
+     */
+    <T extends TemporalAccessor> String format(T temporalAccessor, String dateFormatString);
+
+    /**
+     * Formats the given date as a String.
+     *
+     * @param temporalAccessor TimeDate date to format
+     * @param dateFormatString format string to use.  See {@link DateTimeFormatter}
+     * for details.
+     * @param locale used to loclize the format
+     * @return String value of the date
+     */
+    <T extends TemporalAccessor> String format(T temporalAccessor, String dateFormatString, Locale locale);
+    
+    /**
+     * Formats the given date as a String.
+     *
+     * @param temporalAccessor TimeDate date to format
+     * @param dateFormatString format string to use.  See {@link DateTimeFormatter}
+     * for details.
+     * @param locale the {@link Locale}
+     * @param zoneId the {@link ZoneId}
+     * @return String value of the date
+     */
+    <T extends TemporalAccessor> String format(T temporalAccessor, String dateFormatString, Locale locale, ZoneId zoneId);
+
+    /**
+     * Maps from an incoming format to an outgoing format {@link DateTimeFormatter}.
+     * @param src the formatted datetime
+     * @param outgoingFormat the outgoingFormat pattern, {@link DateTimeFormatter}
+     * @param locale  Locale, if needed for outgoing formatting, no default.
+     * @param incomingFormat the incming format pattern {@link DateTimeFormatter}, optional, default is {@link #getDefaultFormat()}.
+     * @return the newly mapped
+     */
+    String map(String src, String outgoingFormat, Locale locale, String incomingFormat);
+
+    /**
+     * Uses as incoming format {@link #getDefaultFormat()} and no locale.
+     * @param src the text, which will be parsed using the incomingFormat.
+     * @param outgoingFormat the outgoing formatter, which will format.
+     * @param locale The locale, if not null which will outgoingFormat use, {@link DateTimeFormatter#withLocale(Locale)}.
+     * @param incomingFormat the incoming formatter, which will be parsed.
+     * @return the formatted string
+     *
+     */
+    String map(String src, DateTimeFormatter outgoingFormat, Locale locale,
+               DateTimeFormatter incomingFormat);
+
+    /**
+     * Uses as outgoing {@link DateTimeFormatter} {@link #getDefaultFormat()} and no locale.
+     *
+     * @param src the datetime formatted string
+     * @param outgoingFormat the format of this string
+     * @return the date time formatted
+     */
+    String mapTo(String src, DateTimeFormatter outgoingFormat);
+
+    /**
+     * @param src the datetime formatted string
+     * @param incomingFormat the format to which this incoming string should be formatted.
+     *
+     * @return the newly formatted date time string
+     */
+    String mapFrom(String src, DateTimeFormatter incomingFormat);
+
+    /**
+     * Uses as incoming {@link DateTimeFormatter}  {@link #getDefaultFormat()}.
+     *
+     * @param src the datetime formatted string
+     * @param outgoingFormat the format to which this string should be formatted.
+     * @param locale The locale, if not null,the incomingFormat will use.
+     *
+     * @return the newly formatted date time string
+     */
+    String map(String src, DateTimeFormatter outgoingFormat, Locale locale);
+
+    ZoneId getZoneId();
+}
diff --git a/src/java/org/apache/turbine/services/localization/DateTimeFormatterService.java b/src/java/org/apache/turbine/services/localization/DateTimeFormatterService.java
new file mode 100644
index 00000000..17199e3c
--- /dev/null
+++ b/src/java/org/apache/turbine/services/localization/DateTimeFormatterService.java
@@ -0,0 +1,257 @@
+package org.apache.turbine.services.localization;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.time.DateTimeException;
+import java.time.ZoneId;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.TemporalAccessor;
+import java.util.Locale;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.turbine.Turbine;
+import org.apache.turbine.annotation.TurbineService;
+import org.apache.turbine.services.TurbineBaseService;
+import org.apache.turbine.util.LocaleUtils;
+
+/**
+ * This service is used to format {@link TemporalAccessor} and
+ * {@link #map(String, DateTimeFormatter, Locale)} (different flavors)
+ * objects into strings.
+ *
+ * The methods may throw {@link java.time.temporal.UnsupportedTemporalTypeException} or
+ * {@link DateTimeParseException}, e.g.
+ * if the source and the target format do not match appropriately.
+ *
+ */
+@TurbineService("DateTimeFormatterService")
+public class DateTimeFormatterService
+        extends TurbineBaseService implements DateTimeFormatterInterface 
+{
+
+    private String formatPattern = null;
+
+    private DateTimeFormatter dateTimeFormat = null;
+
+    private Locale locale = null;
+
+    private ZoneId zoneId;
+
+    @Override
+    public DateTimeFormatter getDefaultFormat()
+    {
+        return dateTimeFormat;
+    }
+
+    @Override
+    public String getFormatPattern() {
+        return formatPattern;
+    }
+
+    private static final Logger log = LogManager.getLogger(DateTimeFormatterService.class);
+
+    /**
+     * Initialize the service.
+     *
+     * the {@link #dateTimeFormat} from {@link #formatPattern} is initialized with
+     * 
+     * <ol>
+     * <li>{@link Locale}: {@link LocaleUtils#getDefaultLocale()} is used by default.
+     * It could be overridden setting #USE_TURBINE_LOCALE_KEY to false, the
+     * the default Locale {@link Locale#getDefault()} is used.
+     * </li><li>{@link ZoneId}: If #DATE_TIME_ZONEID_KEY is set this {@link ZoneId} 
+     * is used else {@link ZoneId#systemDefault()}.
+     * </li>
+     * </ol>
+     */
+    @Override
+    public void init()
+    {
+        formatPattern = Turbine.getConfiguration()
+                .getString(DATE_TIME_FORMAT_KEY, DATE_TIME_FORMAT_DEFAULT);
+
+        boolean useTurbineLocale =  Turbine.getConfiguration()
+        .getBoolean(USE_TURBINE_LOCALE_KEY, true);
+
+        Locale localeSetter = (useTurbineLocale && LocaleUtils.getDefaultLocale() != null)?
+                LocaleUtils.getDefaultLocale()
+                : Locale.getDefault();
+        setLocale(localeSetter);
+
+        String zoneIdStr = Turbine.getConfiguration()
+        .getString(DATE_TIME_ZONEID_KEY);
+        ZoneId zoneIdSet = (zoneIdStr != null)?  ZoneId.of( zoneIdStr ) :
+            ZoneId.systemDefault();
+         setZoneId(zoneIdSet);
+
+        dateTimeFormat = DateTimeFormatter.ofPattern(formatPattern)
+                .withLocale(localeSetter).withZone(zoneIdSet);
+
+        log.info("Initialized DateTimeFormatterService with pattern {}, locale {} and zone {}",
+                formatPattern, dateTimeFormat.getLocale(),
+                dateTimeFormat.getZone());
+        setInit(true);
+    }
+
+    @Override
+    public <T extends TemporalAccessor> String format(T temporalAccessor)
+    {
+        return dateTimeFormat.format(temporalAccessor);
+    }
+
+    @Override
+    public <T extends TemporalAccessor> String format(T temporalAccessor, String dateFormatString)
+    {
+        return format(temporalAccessor, dateFormatString, null, null);
+    }
+
+    @Override
+    public <T extends TemporalAccessor> String format(T temporalAccessor, String dateFormatString, Locale locale)
+    {
+        return format(temporalAccessor, dateFormatString, locale, null);
+    }
+
+    @Override
+    public <T extends TemporalAccessor> String format(T temporalAccessor, String dateFormatString, Locale locale,
+            ZoneId zoneId) {
+        String result = null;
+
+        if (StringUtils.isEmpty(dateFormatString) || temporalAccessor == null)
+        {
+            result = "";
+        }
+        else
+        {
+            DateTimeFormatter dtf =
+                    DateTimeFormatter.ofPattern(dateFormatString);
+            if (locale != null)
+            {
+                dtf = dtf.withLocale(locale);
+            } else {
+                log.warn("adding default local {}",  getLocale() );
+                dtf = dtf.withLocale( getLocale());
+            }
+            if (zoneId != null)
+            {
+                dtf = dtf.withZone(zoneId);
+            } else {
+                log.warn("adding default zone {}", getZoneId() );
+                dtf = dtf.withZone(getZoneId());
+            }
+            log.warn("try to format {} with {}.", temporalAccessor, dtf );
+            try {
+                result =
+                        dtf.format(temporalAccessor);
+            } catch(DateTimeException e) {
+                log.error("An exception with date time formatting was thrown: {}", e);
+                // check with dtf.toFormat().format(temporalAccessor)?
+                throw e;
+            }
+        }
+        return result;
+    }
+
+    @Override
+    public String map(String src, String outgoingFormatPattern, Locale locale, String incomingFormatPattern)
+    {
+        if (StringUtils.isEmpty(src) || outgoingFormatPattern == null)
+        {
+            return "";
+        }
+        if (incomingFormatPattern == null)
+        {
+            incomingFormatPattern = formatPattern;
+        }
+        if (incomingFormatPattern.equals( outgoingFormatPattern )) {
+            return "";
+        }
+        DateTimeFormatter incomingFormat = DateTimeFormatter.ofPattern(incomingFormatPattern);
+        DateTimeFormatter outgoingFormat = DateTimeFormatter.ofPattern(outgoingFormatPattern);
+        if (locale != null)
+        {
+            outgoingFormat = outgoingFormat.withLocale( locale );
+            //incomingFormat = incomingFormat.withLocale( locale );
+        }
+        return map( src, outgoingFormat, locale, incomingFormat );
+    }
+
+    @Override
+    public String map(String src, DateTimeFormatter outgoingFormat, Locale locale,
+                      DateTimeFormatter incomingFormat)
+    {
+        if (StringUtils.isEmpty(src) || outgoingFormat == null)
+        {
+            return "";
+        }
+        if (incomingFormat == null)
+        {
+            incomingFormat = dateTimeFormat;
+        }
+        if (incomingFormat.equals( outgoingFormat )) {
+            return "";
+        }
+        if (locale != null)
+        {
+            outgoingFormat = outgoingFormat.withLocale( locale );
+            //incomingFormat = incomingFormat.withLocale( locale );
+        }
+        return  outgoingFormat.format(
+                incomingFormat.parse( src ));
+    }
+
+    @Override
+    public String mapTo(String src, DateTimeFormatter outgoingFormat)
+    {
+        return map( src, outgoingFormat, null, dateTimeFormat );
+    }
+
+    @Override
+    public String mapFrom(String src, DateTimeFormatter incomingFormat)
+    {
+        return map( src, dateTimeFormat, null, incomingFormat );
+    }
+
+    @Override
+    public String map(String src, DateTimeFormatter outgoingFormat, Locale locale)
+    {
+        return map( src, outgoingFormat, locale, dateTimeFormat );
+    }
+
+    public Locale getLocale() {
+        return locale;
+    }
+
+    public void setLocale(Locale locale) {
+        this.locale = locale;
+    }
+    
+    @Override
+    public ZoneId getZoneId() {
+        return zoneId;
+    }
+
+    public void setZoneId(ZoneId zoneId) {
+        this.zoneId = zoneId;
+    }
+
+}
diff --git a/src/java/org/apache/turbine/services/localization/LocalizationTool.java b/src/java/org/apache/turbine/services/localization/LocalizationTool.java
index ee46be9c..6e0955a8 100644
--- a/src/java/org/apache/turbine/services/localization/LocalizationTool.java
+++ b/src/java/org/apache/turbine/services/localization/LocalizationTool.java
@@ -137,7 +137,9 @@ public class LocalizationTool implements ApplicationTool
         {
             // Pull necessary information out of RunData while we have
             // a reference to it.
-            locale = localizationService.getLocale(((RunData) data).getRequest());
+            locale = (localizationService instanceof RundataLocalizationService)?
+                    ((RundataLocalizationService)localizationService).getLocale((RunData) data):
+                    localizationService.getLocale(((RunData) data).getRequest());
         }
     }
 
diff --git a/src/java/org/apache/turbine/services/localization/RundataLocalizationInterface.java b/src/java/org/apache/turbine/services/localization/RundataLocalizationInterface.java
new file mode 100644
index 00000000..ab1bb87a
--- /dev/null
+++ b/src/java/org/apache/turbine/services/localization/RundataLocalizationInterface.java
@@ -0,0 +1,38 @@
+package org.apache.turbine.services.localization;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.io.Serializable;
+import java.util.Locale;
+
+import org.apache.fulcrum.localization.LocalizationService;
+import org.apache.turbine.util.RunData;
+
+public interface RundataLocalizationInterface extends LocalizationService, Serializable
+{
+    /**
+     * Get the locale from the session first, then fallback to normal request headers.
+     * 
+     * @param data the {@link RunData}, which allows a guess for the locale.
+     * @return Current locale based on state.
+     */
+    Locale getLocale(RunData data);
+    
+}
diff --git a/src/java/org/apache/turbine/services/localization/RundataLocalizationService.java b/src/java/org/apache/turbine/services/localization/RundataLocalizationService.java
new file mode 100644
index 00000000..bcb37d66
--- /dev/null
+++ b/src/java/org/apache/turbine/services/localization/RundataLocalizationService.java
@@ -0,0 +1,79 @@
+package org.apache.turbine.services.localization;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.util.Locale;
+
+import org.apache.fulcrum.localization.DefaultLocalizationService;
+import org.apache.fulcrum.localization.LocalizationService;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.turbine.om.security.User;
+import org.apache.turbine.util.RunData;
+
+/**
+ * 
+ * Instead of reading first the accept-language header in a http request,
+ * instead this method read the user.getTemp("locale")
+ * from the RunData to obtain the language choice by the user
+ * without the browser language rule.
+ * If user.getPerm("language") is not set,
+ *  the "Accept-Language" header is read.
+ * 
+ * Adapted from the Jetspeed-1 implementation of CustomLocalizationService.
+ * 
+ */
+public class RundataLocalizationService extends DefaultLocalizationService implements RundataLocalizationInterface {
+
+    private static final Logger log = LogManager.getLogger(RundataLocalizationService.class); 
+    
+    @Override
+    public Locale getLocale(RunData data) {
+        User user = data.getUser();
+        log.debug( "retrieving lang from req header :{}",
+                (user == null || user.getTemp("locale") == null )  );
+
+        if (user == null)
+        {
+            return getLocale(data.getRequest().getHeader(LocalizationService.ACCEPT_LANGUAGE));
+        }
+        else
+        {
+            try
+            {
+                Locale locale = (Locale) data.getUser().getTemp("locale");
+                if (locale == null)
+                {
+                    return getLocale(data.getRequest().getHeader(LocalizationService.ACCEPT_LANGUAGE));
+                }
+                else
+                {
+                    log.debug( "retrieved lang from temp(locale):{}", ()-> locale.getLanguage() );
+                    return locale;
+                }
+            }
+            catch (Exception use)
+            {
+                return getLocale(data.getRequest().getHeader(LocalizationService.ACCEPT_LANGUAGE));
+            }
+        }
+    }
+
+}
diff --git a/src/java/org/apache/turbine/services/localization/package-info.java b/src/java/org/apache/turbine/services/localization/package-info.java
new file mode 100644
index 00000000..1d3e8467
--- /dev/null
+++ b/src/java/org/apache/turbine/services/localization/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Localization related services and pull tools
+ * <br>
+*/
+package org.apache.turbine.services.localization;
diff --git a/src/java/org/apache/turbine/services/naming/package-info.java b/src/java/org/apache/turbine/services/naming/package-info.java
new file mode 100644
index 00000000..22f45baa
--- /dev/null
+++ b/src/java/org/apache/turbine/services/naming/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Naming Service provides access to JNDI naming contexts.
+ * <br>
+*/
+package org.apache.turbine.services.naming;
diff --git a/src/java/org/apache/turbine/services/naming/package.html b/src/java/org/apache/turbine/services/naming/package.html
deleted file mode 100644
index d2e3a1a1..00000000
--- a/src/java/org/apache/turbine/services/naming/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Naming Service provides access to JNDI naming contexts.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/package-info.java b/src/java/org/apache/turbine/services/package-info.java
new file mode 100644
index 00000000..f49e2794
--- /dev/null
+++ b/src/java/org/apache/turbine/services/package-info.java
@@ -0,0 +1,114 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Contains the Service framework for Turbine.
+ * <p>
+ * Services are singletons that have pluggable implementation
+ * and can participate in Turbine startup and shutdown.
+ * </p>
+ * <table summary="Turbine service explained.">
+ *     <tr><th>What is a service?</th></tr>
+ *     <tr><td style="width: 100%">
+ * <ul>
+ * <li> Is a singleton -  there is only one instance of it in the system
+ *      i.e. memory or connections are allocated once only, and the internal
+ *      state is common to all requesting clients.
+ * <li> Has pluggable implementation - you can use your own implementation
+ *      if you need, just change  an entry in TurbineResources.properties,
+ *      and there you go.
+ * <li> Can access ServletConfig at system startup time to process
+ *      relative paths and the like.
+ * <li> Can access RunData on the first Turbine doGet execution to
+ *      get URL we're running under and the like.
+ * <li> Can initialize itself (allocate memory, make connections)
+ *      just before the client requests it for the first time. Services that
+ *      are never used by the application will not allocate resources.
+ * <li> Can execute some action upon system shutdown e.g. close the
+ *      opened connections.
+ * </ul>
+ * <strong>The life cycle of a Service</strong>
+ * <p>
+ * A Service (or any other Initable, if we had any) is not supposed
+ * to do much in it's constructor. Especially it should not allocate
+ * any costly resources like large memory structures, DB or network
+ * connections and the like. It may well happen that the Service
+ * is sitting in the config file, but the application does not
+ * need it, so allocating all resources at system startup might
+ * be a loss.
+ * </p><p>
+ * Early initialization is similar to the constructor. It is used
+ * to pass some information that the Service will need in it's
+ * future operation.
+ * UniqueId Service uses the HttpRequest object from the first Turbine
+ * invocation to determine URL this instance is running under, to
+ * generate instance ID.
+ * Early initialization method should process the configuration, store
+ * some values, but NOT allocate resources. There is still a chance
+ * that the Service will not be used.
+ * If the Service is ready to work (i.e. does not need any more objects
+ * being sent to it), and does not to allocate any resources during
+ * late initialization, the internal state can be changed so that
+ * getInit() returns true.
+ * </p><p>
+ * Late initialization happens when the Service is requested by the
+ * application for the first time. It should allocate any resources
+ * needed and change the state so that getInit() returns true.
+ * If getInit() returns false after init() is executed, the Service
+ * has malfunctioned.
+ * </p><p>
+ * After late initialization, the Service is ready to perform actions
+ * on behalf of the application.
+ * </p><p>
+ * When the Service is no longer needed (this usually happens when
+ * system is shutting down), the shutdown() method is called.
+ * shutdown() should deallocate all resources. If any error conditions
+ * occur they are ignored.
+ * </p>
+ * <h3>Initialization of services outside of the Turbine servlet</h3>
+ * <p>
+ * In the case where specific Turbine services are desired outside the
+ * context of the <code>Turbine</code> servlet, a Turbine JAR file can be
+ * used in conjunction with a <i>properly configured</i>
+ * <code>TurbineResources.properties</code> file to initialize a specific
+ * set of services to use in your application.  The following sample
+ * code performs such initialization:
+ * </p>
+ * <code>
+ * String webAppRoot = "/var/httpd/webapps";
+ * String trProps = "/var/httpd/TurbineResources.properties";
+ * try
+ * {
+ *     TurbineConfig cfg = new TurbineConfig(webAppRoot, trProps);
+ *     cfg.init();
+ * }
+ * catch (Exception e)
+ * {
+ *     // If Turbine fails to initialize, no logging service will be available.
+ *     String msg = "Failed to initialize Turbine: " + e.getMessage();
+ *     // Write directly to stderr to preserve the full stack trace.
+ *     System.err.println(msg);
+ *     e.printStackTrace();
+ *     throw new Error(msg);
+ * }
+ * </code>
+ * </td></tr></table>
+ * <br>
+*/
+package org.apache.turbine.services;
diff --git a/src/java/org/apache/turbine/services/package.html b/src/java/org/apache/turbine/services/package.html
deleted file mode 100644
index a74fc85c..00000000
--- a/src/java/org/apache/turbine/services/package.html
+++ /dev/null
@@ -1,118 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Contains the Service framework for Turbine.
-<p>
-Services are singletons that have pluggable implementation
-and can participate in Turbine startup and shutdown.
-<p>
-<table><tr><td width="100%">
-
-<h3>What is a service?</h3>
-<ul>
-<li> Is a singleton -  there is only one instance of it in the system
-     i.e. memory or connections are allocated once only, and the internal
-     state is common to all requesting clients.
-<li> Has pluggable implementation - you can use your own implementation
-     if you need, just change  an entry in TurbineResources.properties,
-     and there you go.
-<li> Can access ServletConfig at system startup time to process
-     relative paths and the like.
-<li> Can access RunData on the first Turbine doGet execution to
-     get URL we're running under and the like.
-<li> Can initialize itself (allocate memory, make connctions)
-     just before the client requests it for the first time. Services that
-     are never used by the application will not allocate resources.
-<li> Can execute some action upon system shutdown e.g. close the
-     opened connections.
-</ul>
-<h3>The life cycle of a Service</h3>
-<p>
-A Service (or any other Initable, if we had any) is not supposed
-to do much in it's constructor. Especialy it should not allocate
-any costly resources like large memory structures, DB or network
-connections and the like. It may well happen that the Service
-is sitting in the config file, but the application does not
-need it, so allocating all resources at system startup might
-be a loss.
-<p>
-Early initialization is similar to the constructor. It is used
-to pass some information that the Service will need in it's
-future operation.
-UniqueId Service uses the HttpRequest object from the first Turbine
-invocation to determine URL this instance is runnign under, to
-generate instance ID.
-Early initialization method should process the configuration, store
-some values, but NOT allocate resources. There is still a chance
-that the Service will not be used.
-If the Service is ready to work (i.e. does not need any more objects
-being sent to it), and does not to allocate any resources during
-late initialization, the internal state can be changed so that
-getInit() returns true.
-<p>
-Late initialization happens when the Service is requested by the
-application for the first time. It should allocate any resources
-needed and chnge the state so that getInit() returns true.
-If getInit() returns false after init() is executed, the Service
-has malfunctioned.
-<p>
-After late initialization, the Service is ready to perform actions
-on behalf of the application.
-<p>
-When the Service is no longer needed (this usually happens when
-system is shutting down), the shutdown() method is called.
-shutdown() should deallocate all resources. If any error conditions
-occur they are ignored.
-<h3>Initialization of services outside of the Turbine servlet</h3>
-<p>
-In the case where specific Turbine services are desired outside the
-context of the <code>Turbine</code> servlet, a Turbine JAR file can be
-used in conjunction with a <i>properly configured</i>
-<code>TurbineResources.properties</code> file to initialize a specific
-set of services to use in your application.  The following sample
-code performs such initialization:
-<p>
-<code>
-String webAppRoot = "/var/httpd/webapps";
-String trProps = "/var/httpd/TurbineResources.properties";
-try
-{
-    TurbineConfig cfg = new TurbineConfig(webAppRoot, trProps);
-    cfg.init();
-}
-catch (Exception e)
-{
-    // If Turine fails to initialize, no logging service will be available.
-    String msg = "Failed to initialize Turbine: " + e.getMessage();
-    // Write directly to stderr to preserve the full stack trace.
-    System.err.println(msg);
-    e.printStackTrace();
-    throw new Error(msg);
-}
-</code>
-</td></tr></table>
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/pull/TurbinePullService.java b/src/java/org/apache/turbine/services/pull/TurbinePullService.java
index f673749a..4ab67a7b 100644
--- a/src/java/org/apache/turbine/services/pull/TurbinePullService.java
+++ b/src/java/org/apache/turbine/services/pull/TurbinePullService.java
@@ -805,7 +805,7 @@ public class TurbinePullService
      * Refresh a given Tool.
      *
      * @param tool A Tool Object
-     * @param pipelineData The current RunData Object
+     * @param dataObject The current RunData Object
      */
     private void refreshTool(Object tool, Object dataObject)
     {
diff --git a/src/java/org/apache/turbine/services/pull/package-info.java b/src/java/org/apache/turbine/services/pull/package-info.java
new file mode 100644
index 00000000..e512368a
--- /dev/null
+++ b/src/java/org/apache/turbine/services/pull/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Provides application tools that are put into the context of a template view.
+ * <br>
+*/
+package org.apache.turbine.services.pull;
diff --git a/src/java/org/apache/turbine/services/pull/package.html b/src/java/org/apache/turbine/services/pull/package.html
deleted file mode 100644
index 0c6e9631..00000000
--- a/src/java/org/apache/turbine/services/pull/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Provides application tools that are put into the context of a template view.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/pull/tools/TemplateLink.java b/src/java/org/apache/turbine/services/pull/tools/TemplateLink.java
index 122226a5..02bce374 100644
--- a/src/java/org/apache/turbine/services/pull/tools/TemplateLink.java
+++ b/src/java/org/apache/turbine/services/pull/tools/TemplateLink.java
@@ -68,9 +68,22 @@ public class TemplateLink
     /** Default Value for TEMPLATE_LINK_RELATIVE_KEY */
     public static final boolean TEMPLATE_LINK_RELATIVE_DEFAULT = false;
 
-
     /** Do we want a relative link? */
     protected boolean wantRelative = false;
+    
+    /**
+     * Should this tool add Container Encoding to the URIs returned?
+     * True might cause trouble e.g. if you run with Apache HTTP Daemon / Tomcat Combo.
+     *
+     * Default is false (like Turbine 2.2)
+     */
+    public static final String TEMPLATE_LINK_ENCODING_KEY = "want.encoding";
+
+    /** Default Value for TEMPLATE_LINK_ENCODING_DEFAULT */
+    public static final boolean TEMPLATE_LINK_ENCODING_DEFAULT = false;
+    
+    /** Do we want the container to encode the response? */
+    boolean wantEncoding = false;
 
     /** cache of the template name for getPage() */
     protected String template = null;
@@ -131,6 +144,13 @@ public class TemplateLink
         {
             wantRelative = conf.getBoolean(TEMPLATE_LINK_RELATIVE_KEY,
                     TEMPLATE_LINK_RELATIVE_DEFAULT);
+            wantEncoding = conf.getBoolean(TEMPLATE_LINK_ENCODING_KEY,
+                    TEMPLATE_LINK_ENCODING_DEFAULT);
+        }
+        
+        if (!wantEncoding)
+        {
+            templateURI.clearResponse();
         }
 
     }
diff --git a/src/java/org/apache/turbine/services/pull/tools/package-info.java b/src/java/org/apache/turbine/services/pull/tools/package-info.java
new file mode 100644
index 00000000..4b551aab
--- /dev/null
+++ b/src/java/org/apache/turbine/services/pull/tools/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Pull Tools to be used in a template based view.
+ * <br>
+*/
+package org.apache.turbine.services.pull.tools;
diff --git a/src/java/org/apache/turbine/services/pull/tools/package.html b/src/java/org/apache/turbine/services/pull/tools/package.html
deleted file mode 100644
index 6e056e5e..00000000
--- a/src/java/org/apache/turbine/services/pull/tools/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Pull Tools to be used in a template based view.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/pull/util/DateTimeFormatterTool.java b/src/java/org/apache/turbine/services/pull/util/DateTimeFormatterTool.java
new file mode 100644
index 00000000..e641714e
--- /dev/null
+++ b/src/java/org/apache/turbine/services/pull/util/DateTimeFormatterTool.java
@@ -0,0 +1,218 @@
+package org.apache.turbine.services.pull.util;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.time.ZoneId;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeParseException;
+import java.time.temporal.TemporalAccessor;
+import java.util.Date;
+import java.util.Locale;
+
+import org.apache.fulcrum.localization.LocalizationService;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.turbine.Turbine;
+import org.apache.turbine.annotation.TurbineService;
+import org.apache.turbine.services.ServiceManager;
+import org.apache.turbine.services.TurbineServices;
+import org.apache.turbine.services.localization.DateTimeFormatterInterface;
+import org.apache.turbine.services.localization.DateTimeFormatterService;
+import org.apache.turbine.services.localization.RundataLocalizationService;
+import org.apache.turbine.util.RunData;
+
+/**
+ * This pull tool is used to format {@link TemporalAccessor} and
+ * {@link #map(String, DateTimeFormatter, Locale)} (different flavors)
+ * objects into strings.
+ * 
+ * This tool extends {@link DateFormatter} to simplify configuration 
+ * and to allow legacy {@link Date} inputs.
+ *
+ * The methods may throw {@link java.time.temporal.UnsupportedTemporalTypeException} or
+ * {@link DateTimeParseException}.
+ * if the source and the target format do not match appropriately.
+ *
+ */
+public class DateTimeFormatterTool extends DateFormatter
+        implements DateTimeFormatterInterface
+{
+
+    @TurbineService
+    private DateTimeFormatterService dtfs;
+
+    private static final Logger log = LogManager.getLogger(DateTimeFormatterTool.class);
+
+    /** Fulcrum Localization component */
+    @TurbineService
+    private LocalizationService localizationService;
+    
+    protected Locale locale;
+    
+    private boolean overrideFromRequestLocale = false;
+    
+    /**
+     * Initialize the application tool. The data parameter holds a different
+     * type depending on how the tool is being instantiated:
+     * <ul>
+     * <li>For global tools data will be null</li>
+     * <li>For request tools data will be of type RunData</li>
+     * <li>For session and persistent tools data will be of type User</li>
+     * </ul>
+     *
+     * the {@link #getDefaultFormat()} from {@link #getFormatPattern()}
+     * with {@link DateTimeFormatterService#getLocale()}
+     * and zoneId {@link DateTimeFormatterService#getZoneId()} is used.
+     * 
+     * Customizations:
+     * Locale could be fetched from request, if #USE_REQUEST_LOCALE_KEY is set to 
+     * <code>true</code> (by default it is <code>false</code>.Then it will be retrieved either from 
+     * {@link RundataLocalizationService#getLocale(RunData)} (if set in urbien role configuration)
+     * or {@link LocalizationService#getLocale(javax.servlet.http.HttpServletRequest)}.
+     * 
+     * @param data initialization data
+     */
+    @Override
+    public void init(Object data)
+    {
+        log.info("Initializing DateTimeFormatterTool with service {}",
+                dtfs);
+        if (dtfs == null)
+        {
+            ServiceManager serviceManager = TurbineServices.getInstance();
+            dtfs = (DateTimeFormatterService)serviceManager.getService(DateTimeFormatterService.SERVICE_NAME);
+        }
+        
+        overrideFromRequestLocale = Turbine.getConfiguration()
+                .getBoolean(USE_REQUEST_LOCALE_KEY, false);
+        // dtfs should be already initialized
+        if (overrideFromRequestLocale && data instanceof RunData)
+        {
+            // Pull necessary information out of RunData while we have
+            // a reference to it.
+            locale = localizationService.getLocale(((RunData) data).getRequest());
+            log.info("Override {} with request locale {} from {}", dtfs.getLocale(), locale, localizationService);
+        }
+    }
+
+    public DateTimeFormatterService getDtfs() {
+        return dtfs;
+    }
+
+    /**
+     * Refresh the application tool. This is
+     * necessary for development work where you
+     * probably want the tool to refresh itself
+     * if it is using configuration information
+     * that is typically cached after initialization
+     */
+    @Override
+    public void refresh()
+    {
+        // empty
+    }
+
+    @Override
+    public DateTimeFormatter getDefaultFormat()
+    {
+        return getDtfs().getDefaultFormat();
+    }
+
+    @Override
+    public String getFormatPattern() {
+        return getDtfs().getFormatPattern();
+    }
+
+    /**
+     * Formats the given datetime as a String with the #{@link DateTimeFormatterTool#getDefaultFormat()}.
+     * using the default date format.
+     *
+     * @param temporalAccessor {@link TemporalAccessor to format
+     * @return String value of the date
+     */
+    @Override
+    public <T extends TemporalAccessor> String format(T temporalAccessor)
+    {
+        return getDtfs().format(temporalAccessor, getDtfs().getFormatPattern(), getLocale());
+    }
+
+    @Override
+    public <T extends TemporalAccessor> String format(T temporalAccessor, String dateFormatString)
+    {
+        return getDtfs().format(temporalAccessor, dateFormatString, getLocale());
+    }
+
+    @Override
+    public <T extends TemporalAccessor> String format(T temporalAccessor, String dateFormatString, Locale locale)
+    {
+        return getDtfs().format(temporalAccessor, dateFormatString, locale);
+    }
+
+    @Override
+    public <T extends TemporalAccessor> String format(T temporalAccessor, String dateFormatString, Locale locale,
+            ZoneId zoneId) {
+        return getDtfs().format(temporalAccessor, dateFormatString, locale, zoneId);
+    }
+
+    @Override
+    public String map( String src, String outgoingFormatPattern, Locale locale, String incomingFormatPattern)
+    {
+        return getDtfs().map(src, outgoingFormatPattern, locale, incomingFormatPattern);
+    }
+
+    @Override
+    public String map( String src, java.time.format.DateTimeFormatter outgoingFormat, 
+            Locale locale, java.time.format.DateTimeFormatter incomingFormat)
+    {
+        return getDtfs().map(src, outgoingFormat, locale, incomingFormat);
+    }
+
+    @Override
+    public String mapTo( String src, DateTimeFormatter outgoingFormat )
+    {
+        return  getDtfs().map( src, outgoingFormat, getLocale(), getDtfs().getDefaultFormat() );
+    }
+
+    @Override
+    public String mapFrom( String src, DateTimeFormatter incomingFormat )
+    {
+        return  getDtfs().map( src, getDtfs().getDefaultFormat(), getLocale(), incomingFormat );
+    }
+
+    @Override
+    public String map( String src,  DateTimeFormatter outgoingFormat, Locale locale )
+    {
+        return  getDtfs().map( src, outgoingFormat, locale, getDtfs().getDefaultFormat() );
+    }
+
+    public Locale getLocale() {
+        return locale;
+    }
+
+    public void setLocale(Locale locale) {
+        this.locale = locale;
+    }
+
+    @Override
+    public ZoneId getZoneId() {
+        return (getDtfs()!= null)? getDtfs().getZoneId():ZoneId.systemDefault();
+    }
+
+}
diff --git a/src/java/org/apache/turbine/services/pull/util/package-info.java b/src/java/org/apache/turbine/services/pull/util/package-info.java
new file mode 100644
index 00000000..2b3d60a8
--- /dev/null
+++ b/src/java/org/apache/turbine/services/pull/util/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Turbine pull tools
+ * <br>
+*/
+package org.apache.turbine.services.pull.util;
diff --git a/src/java/org/apache/turbine/services/rundata/DefaultTurbineRunData.java b/src/java/org/apache/turbine/services/rundata/DefaultTurbineRunData.java
index b659e3d6..0230715f 100644
--- a/src/java/org/apache/turbine/services/rundata/DefaultTurbineRunData.java
+++ b/src/java/org/apache/turbine/services/rundata/DefaultTurbineRunData.java
@@ -98,7 +98,7 @@ public class DefaultTurbineRunData
     /** The character encoding of template files. */
     private String templateEncoding;
 
-    /** This is what will build the <title></title> of the document. */
+    /** This is what will build the title of the document. */
     private String title;
 
     /** Determines if there is information in the outputstream or not. */
diff --git a/src/java/org/apache/turbine/services/rundata/package-info.java b/src/java/org/apache/turbine/services/rundata/package-info.java
new file mode 100644
index 00000000..ee9e4aec
--- /dev/null
+++ b/src/java/org/apache/turbine/services/rundata/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Rundata Service provides a factory for the request cycle data objects.
+ * <br>
+*/
+package org.apache.turbine.services.rundata;
diff --git a/src/java/org/apache/turbine/services/rundata/package.html b/src/java/org/apache/turbine/services/rundata/package.html
deleted file mode 100644
index 8b316e1e..00000000
--- a/src/java/org/apache/turbine/services/rundata/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Rundata Service provides a factory for the request cycle data objects.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/schedule/AbstractSchedulerService.java b/src/java/org/apache/turbine/services/schedule/AbstractSchedulerService.java
index 53276937..d21af2d6 100644
--- a/src/java/org/apache/turbine/services/schedule/AbstractSchedulerService.java
+++ b/src/java/org/apache/turbine/services/schedule/AbstractSchedulerService.java
@@ -20,7 +20,11 @@ package org.apache.turbine.services.schedule;
  */
 
 import java.util.List;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicBoolean;
 
+import org.apache.commons.lang3.concurrent.BasicThreadFactory;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.turbine.services.InitializationException;
@@ -43,22 +47,13 @@ public abstract class AbstractSchedulerService extends TurbineBaseService implem
     protected JobQueue<JobEntry> scheduleQueue = null;
 
     /** Current status of the scheduler */
-    protected boolean enabled = false;
+    private AtomicBoolean enabled = new AtomicBoolean(false);
 
-    /** The main loop for starting jobs. */
-    protected MainLoop mainLoop;
+    /** The housekeeping thread. */
+    protected Thread houseKeepingThread;
 
-    /** The thread used to process commands. */
-    protected Thread thread;
-
-    /**
-     * Creates a new instance.
-     */
-    public AbstractSchedulerService()
-    {
-        mainLoop = null;
-        thread = null;
-    }
+    /** The thread pool used to process jobs. */
+    protected ExecutorService threadPool;
 
     /**
      * Initializes the SchedulerService.
@@ -73,7 +68,11 @@ public abstract class AbstractSchedulerService extends TurbineBaseService implem
         {
             setEnabled(getConfiguration().getBoolean("enabled", true));
             scheduleQueue = new JobQueue<>();
-            mainLoop = new MainLoop();
+            threadPool = Executors.newCachedThreadPool(
+                    new BasicThreadFactory.Builder()
+                        .namingPattern("Turbine-ScheduledJob-")
+                        .daemon(true)
+                        .build());
 
             @SuppressWarnings("unchecked") // Why is this cast necessary?
             List<JobEntry> jobs = (List<JobEntry>)loadJobs();
@@ -108,6 +107,8 @@ public abstract class AbstractSchedulerService extends TurbineBaseService implem
         {
             getThread().interrupt();
         }
+
+        threadPool.shutdownNow();
     }
 
     /**
@@ -183,7 +184,7 @@ public abstract class AbstractSchedulerService extends TurbineBaseService implem
      */
     protected void setEnabled(boolean enabled)
     {
-        this.enabled = enabled;
+        this.enabled.set(enabled);
     }
 
     /**
@@ -194,7 +195,7 @@ public abstract class AbstractSchedulerService extends TurbineBaseService implem
     @Override
     public boolean isEnabled()
     {
-        return enabled;
+        return enabled.get();
     }
 
     /**
@@ -219,7 +220,7 @@ public abstract class AbstractSchedulerService extends TurbineBaseService implem
         {
             thread.interrupt();
         }
-        enabled = false;
+        setEnabled(false);
     }
 
     /**
@@ -231,7 +232,7 @@ public abstract class AbstractSchedulerService extends TurbineBaseService implem
      */
     public synchronized Thread getThread()
     {
-        return thread;
+        return houseKeepingThread;
     }
 
     /**
@@ -239,7 +240,7 @@ public abstract class AbstractSchedulerService extends TurbineBaseService implem
      */
     protected synchronized void clearThread()
     {
-        thread = null;
+        houseKeepingThread = null;
     }
 
     /**
@@ -250,21 +251,21 @@ public abstract class AbstractSchedulerService extends TurbineBaseService implem
      */
     public synchronized void restart()
     {
-        if (enabled)
+        if (enabled.get())
         {
             log.info("Starting job scheduler");
-            if (thread == null)
+            if (houseKeepingThread == null)
             {
                 // Create the the housekeeping thread of the scheduler. It will
                 // wait for the time when the next task needs to be started,
                 // and then launch a worker thread to execute the task.
-                thread = new Thread(mainLoop, ScheduleService.SERVICE_NAME);
+                houseKeepingThread = new Thread(this::houseKeeping, ScheduleService.SERVICE_NAME);
                 // Indicate that this is a system thread. JVM will quit only
                 // when there are no more enabled user threads. Settings threads
                 // spawned internally by Turbine as daemons allows commandline
                 // applications using Turbine to terminate in an orderly manner.
-                thread.setDaemon(true);
-                thread.start();
+                houseKeepingThread.setDaemon(true);
+                houseKeepingThread.start();
             }
             else
             {
@@ -287,7 +288,8 @@ public abstract class AbstractSchedulerService extends TurbineBaseService implem
             while (!Thread.interrupted())
             {
                 // Grab the next job off the queue.
-                JobEntry je = scheduleQueue.getNext();
+                //JobEntry je = scheduleQueue.getNext();
+                JobEntry je = scheduleQueue.getFirst();
 
                 if (je == null)
                 {
@@ -324,48 +326,39 @@ public abstract class AbstractSchedulerService extends TurbineBaseService implem
     }
 
     /**
-     * Inner class. This is isolated in its own Runnable class just so that the
-     * main class need not implement Runnable, which would allow others to
-     * directly invoke run, which is not supported.
+     * Create the the housekeeping thread of the scheduler. It will
+     * wait for the time when the next task needs to be started,
+     * and then launch a worker thread to execute the task.
      */
-    protected class MainLoop implements Runnable
+    private void houseKeeping()
     {
-        /**
-         * Method to run the class.
-         */
-        @Override
-        public void run()
+        String taskName = null;
+        try
         {
-            String taskName = null;
-            try
+            while (enabled.get())
             {
-                while (enabled)
+                JobEntry je = nextJob();
+                if (je != null)
                 {
-                    JobEntry je = nextJob();
-                    if (je != null)
-                    {
-                        taskName = je.getTask();
+                    taskName = je.getTask();
 
-                        // Start the thread to run the job.
-                        Runnable wt = new WorkerThread(je);
-                        Thread helper = new Thread(wt);
-                        helper.start();
-                    }
-                    else
-                    {
-                        break;
-                    }
+                    // Get a thread to run the job.
+                    threadPool.execute(new WorkerThread(je));
+                }
+                else
+                {
+                    break;
                 }
             }
-            catch (Exception e)
-            {
-                log.error("Error running a Scheduled Job: {}", taskName, e);
-                enabled = false;
-            }
-            finally
-            {
-                clearThread();
-            }
+        }
+        catch (Exception e)
+        {
+            log.error("Error running a Scheduled Job: {}", taskName, e);
+            setEnabled(false);
+        }
+        finally
+        {
+            clearThread();
         }
     }
 }
diff --git a/src/java/org/apache/turbine/services/schedule/JobQueue.java b/src/java/org/apache/turbine/services/schedule/JobQueue.java
index f9634ca4..47a5697d 100644
--- a/src/java/org/apache/turbine/services/schedule/JobQueue.java
+++ b/src/java/org/apache/turbine/services/schedule/JobQueue.java
@@ -19,10 +19,9 @@ package org.apache.turbine.services.schedule;
  * under the License.
  */
 
-import java.util.Collections;
-import java.util.Comparator;
 import java.util.List;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentSkipListSet;
 
 import org.apache.turbine.util.TurbineException;
 
@@ -39,57 +38,62 @@ public class JobQueue<J extends JobEntry>
     /**
      * The queue of <code>JobEntry</code> objects.
      */
-    private Vector<J> queue = null;
+    private ConcurrentSkipListSet<J> queue = null;
 
     /**
      * Creates a new instance.
      */
     public JobQueue()
     {
-        queue = new Vector<>(10);
+        queue = new ConcurrentSkipListSet<J>((o1, o2) -> Long.compare(o1.getNextRuntime(), o2.getNextRuntime()));
     }
 
     /**
-     * Return the next job off the top of the queue, or <code>null</code> if
+     * Return the next job off the top of the queue and remove it from the queue, or <code>null</code> if
      * there are no jobs in the queue.
      *
      * @return The next job in the queue.
      */
     public J getNext()
     {
-        if (queue.size() > 0)
-        {
-            return queue.elementAt(0);
-        }
-        else
-        {
-            return null;
-        }
+        return queue.pollFirst();
+    }
+    
+    /**
+     * Return the next job of the top of the queue or <code>null</code> if
+     * there are no jobs in the queue.
+     *
+     * @return The next job in the queue.
+     */
+    public J getFirst()
+    {
+        return !queue.isEmpty()? queue.first(): null;
     }
 
     /**
      * Return a specific job.
      *
-     * @param je The JobEntry we are looking for.
+     * @param je The JobEntry we are looking for. Falls back to check job id, if job was not found.
      * @return A JobEntry.
      */
     public J getJob(J je)
     {
-        int index = -1;
-
         if (je != null)
         {
-            index = queue.indexOf(je);
-        }
-
-        if (index < 0)
-        {
-            return null;
-        }
-        else
-        {
-            return queue.elementAt(index);
+          J job = queue.floor(je);
+          if (je.equals(job))
+          {
+              return job;
+          }
+          for (J jobEntry : list())
+            {
+                if (jobEntry.getJobId() == je.getJobId())
+                {
+                    return jobEntry;
+                }
+            } 
         }
+        return null;
     }
 
     /**
@@ -97,12 +101,11 @@ public class JobQueue<J extends JobEntry>
      *
      * @return A Vector of <code>JobEntry</code> objects.
      */
-    @SuppressWarnings("unchecked")
     public Vector<J> list()
     {
-        if (queue != null && queue.size() > 0)
+        if (!queue.isEmpty())
         {
-            return (Vector<J>) queue.clone();
+            return new Vector<>(queue);
         }
         else
         {
@@ -115,10 +118,9 @@ public class JobQueue<J extends JobEntry>
      *
      * @param je A JobEntry job.
      */
-    public synchronized void add(J je)
+    public void add(J je)
     {
-        queue.addElement(je);
-        sortQueue();
+        queue.add(je);
     }
 
     /**
@@ -127,14 +129,12 @@ public class JobQueue<J extends JobEntry>
      *
      * @param jobEntries A list of the <code>JobEntry</code> objects to load.
      */
-    public synchronized void batchLoad(List<J> jobEntries)
+    public void batchLoad(List<J> jobEntries)
     {
         if (jobEntries != null)
         {
             queue.addAll(jobEntries);
-            sortQueue();
         }
-
     }
 
     /**
@@ -142,10 +142,9 @@ public class JobQueue<J extends JobEntry>
      *
      * @param je A JobEntry with the job to remove.
      */
-    public synchronized void remove(J je)
+    public void remove(J je)
     {
-        queue.removeElement(je);
-        sortQueue();
+        queue.remove(je);
     }
 
     /**
@@ -154,12 +153,11 @@ public class JobQueue<J extends JobEntry>
      * @param je A JobEntry with the job to modify
      * @throws TurbineException if the runtime calculation fails
      */
-    public synchronized void modify(J je) throws TurbineException
+    public void modify(J je) throws TurbineException
     {
         remove(je);
         je.calcRunTime();
-        this.add(je);
-        sortQueue();
+        add(je);
     }
 
     /**
@@ -168,25 +166,9 @@ public class JobQueue<J extends JobEntry>
      * @param je A JobEntry to be updated.
      * @throws TurbineException a generic exception.
      */
-    public synchronized void updateQueue(J je)
+    public void updateQueue(J je)
             throws TurbineException
     {
-        je.calcRunTime();
-        sortQueue();
-    }
-
-    /**
-     * Re-sort the existing queue.  Consumers of this method should be
-     * <code>synchronized</code>.
-     */
-    private void sortQueue()
-    {
-        Comparator<J> aComparator = (o1, o2) -> {
-            Long time1 = Long.valueOf(o1.getNextRuntime());
-            Long time2 = Long.valueOf(o2.getNextRuntime());
-            return time1.compareTo(time2);
-        };
-
-        Collections.sort(queue, aComparator);
+        modify(je);
     }
 }
diff --git a/src/java/org/apache/turbine/services/schedule/QuartzSchedulerService.java b/src/java/org/apache/turbine/services/schedule/QuartzSchedulerService.java
index c7dfe777..10cd7edd 100644
--- a/src/java/org/apache/turbine/services/schedule/QuartzSchedulerService.java
+++ b/src/java/org/apache/turbine/services/schedule/QuartzSchedulerService.java
@@ -370,7 +370,7 @@ public class QuartzSchedulerService
 
     /**
      * @param je a generic job entry
-     * @throws TurbineException
+     * @throws TurbineException - If the cast fails.
      *
      * @return A downcasted JobEntry type
      */
diff --git a/src/java/org/apache/turbine/services/schedule/package-info.java b/src/java/org/apache/turbine/services/schedule/package-info.java
new file mode 100644
index 00000000..1ca05daf
--- /dev/null
+++ b/src/java/org/apache/turbine/services/schedule/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The scheduler service can run tasks in the background.
+ * <br>
+*/
+package org.apache.turbine.services.schedule;
diff --git a/src/java/org/apache/turbine/services/schedule/package.html b/src/java/org/apache/turbine/services/schedule/package.html
deleted file mode 100644
index 2b4bcdfe..00000000
--- a/src/java/org/apache/turbine/services/schedule/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-The scheduler service can run tasks in the background.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/security/DefaultSecurityService.java b/src/java/org/apache/turbine/services/security/DefaultSecurityService.java
index 139787fb..d6dc658f 100644
--- a/src/java/org/apache/turbine/services/security/DefaultSecurityService.java
+++ b/src/java/org/apache/turbine/services/security/DefaultSecurityService.java
@@ -1,6 +1,8 @@
 package org.apache.turbine.services.security;
 
 
+import java.util.concurrent.atomic.AtomicInteger;
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -74,7 +76,7 @@ public class DefaultSecurityService
         implements SecurityService
 {
     /** The number of threads concurrently reading security information */
-    private int readerCount = 0;
+    private AtomicInteger readerCount = new AtomicInteger(0);
 
     /** The instance of UserManager the SecurityService uses */
     private UserManager userManager = null;
@@ -130,7 +132,7 @@ public class DefaultSecurityService
         try
         {
             this.userManager =
-                    (UserManager) Class.forName(userManagerClassName).newInstance();
+                    (UserManager) Class.forName(userManagerClassName).getDeclaredConstructor().newInstance();
 
             userManager.init(conf);
         }
@@ -563,9 +565,9 @@ public class DefaultSecurityService
      * Methods that read security information need to invoke this
      * method at the beginning of their body.
      */
-    protected synchronized void lockShared()
+    protected void lockShared()
     {
-        readerCount++;
+        readerCount.incrementAndGet();
     }
 
     /**
@@ -574,9 +576,9 @@ public class DefaultSecurityService
      * Methods that read security information need to invoke this
      * method at the end of their body.
      */
-    protected synchronized void unlockShared()
+    protected void unlockShared()
     {
-        readerCount--;
+        readerCount.decrementAndGet();
         this.notify();
     }
 
@@ -589,7 +591,7 @@ public class DefaultSecurityService
      */
     protected void lockExclusive()
     {
-        while (readerCount > 0)
+        while (readerCount.get() > 0)
         {
             try
             {
diff --git a/src/java/org/apache/turbine/services/security/DefaultUserManager.java b/src/java/org/apache/turbine/services/security/DefaultUserManager.java
index 9779a588..c7047a04 100644
--- a/src/java/org/apache/turbine/services/security/DefaultUserManager.java
+++ b/src/java/org/apache/turbine/services/security/DefaultUserManager.java
@@ -21,8 +21,8 @@ package org.apache.turbine.services.security;
  */
 
 
-import java.util.ArrayList;
 import java.util.List;
+import java.util.stream.Collectors;
 
 import org.apache.commons.configuration2.Configuration;
 import org.apache.fulcrum.factory.FactoryService;
@@ -255,14 +255,13 @@ public class DefaultUserManager implements UserManager
     public List<? extends User> retrieveList(Object criteria)
             throws DataBackendException
     {
-        UserSet<org.apache.fulcrum.security.entity.User> uset = umDelegate.getAllUsers();
-        List<User> userList = new ArrayList<>();
+        UserSet<org.apache.fulcrum.security.entity.User> uset = umDelegate.retrieveUserList(criteria);
 
-        for (org.apache.fulcrum.security.entity.User u : uset)
-        {
-            TurbineUser tu = (TurbineUser)u;
-            userList.add(wrap(tu));
-        }
+        List<User> userList = uset.stream()
+                .map(u -> (TurbineUser) u)
+                .map(this::wrap)
+                .map(u -> (User)u)
+                .collect(Collectors.toList());
 
         return userList;
     }
diff --git a/src/java/org/apache/turbine/services/security/package-info.java b/src/java/org/apache/turbine/services/security/package-info.java
new file mode 100644
index 00000000..1ec30bb3
--- /dev/null
+++ b/src/java/org/apache/turbine/services/security/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The security service can be used to authenticate users based on database information.
+ * <br>
+*/
+package org.apache.turbine.services.security;
diff --git a/src/java/org/apache/turbine/services/security/package.html b/src/java/org/apache/turbine/services/security/package.html
deleted file mode 100644
index 883cbac8..00000000
--- a/src/java/org/apache/turbine/services/security/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-The security service can be used to authenticate users based on database information.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/security/passive/package-info.java b/src/java/org/apache/turbine/services/security/passive/package-info.java
new file mode 100644
index 00000000..37286a8a
--- /dev/null
+++ b/src/java/org/apache/turbine/services/security/passive/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Dummy Service to be used if no security is required.
+ * <br>
+*/
+package org.apache.turbine.services.security.passive;
diff --git a/src/java/org/apache/turbine/services/security/passive/package.html b/src/java/org/apache/turbine/services/security/passive/package.html
deleted file mode 100644
index cc1d3ecd..00000000
--- a/src/java/org/apache/turbine/services/security/passive/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Dummy Service to be used if no security is required.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/servlet/package-info.java b/src/java/org/apache/turbine/services/servlet/package-info.java
new file mode 100644
index 00000000..4da409bf
--- /dev/null
+++ b/src/java/org/apache/turbine/services/servlet/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Provides access to various resources from the web container.
+ * <br>
+*/
+package org.apache.turbine.services.servlet;
diff --git a/src/java/org/apache/turbine/services/servlet/package.html b/src/java/org/apache/turbine/services/servlet/package.html
deleted file mode 100644
index 3f3a5cae..00000000
--- a/src/java/org/apache/turbine/services/servlet/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Provides access to various resources from the web container.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/session/package-info.java b/src/java/org/apache/turbine/services/session/package-info.java
new file mode 100644
index 00000000..f8d164e6
--- /dev/null
+++ b/src/java/org/apache/turbine/services/session/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The session service allows you to access session information of the servlet container.
+ * <br>
+*/
+package org.apache.turbine.services.session;
diff --git a/src/java/org/apache/turbine/services/session/package.html b/src/java/org/apache/turbine/services/session/package.html
deleted file mode 100644
index 17e08659..00000000
--- a/src/java/org/apache/turbine/services/session/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-The session service allows you to access session information of the servlet container.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/template/TemplateEngineService.java b/src/java/org/apache/turbine/services/template/TemplateEngineService.java
index 0db66a6d..c18ec633 100644
--- a/src/java/org/apache/turbine/services/template/TemplateEngineService.java
+++ b/src/java/org/apache/turbine/services/template/TemplateEngineService.java
@@ -72,7 +72,7 @@ public interface TemplateEngineService
      * Supplies the file extension to key this engine in {@link
      * org.apache.turbine.services.template.TemplateService}'s
      * registry with.
-     * @return the list of extensions this engine supports
+     * @return the array of extensions this engine supports
      */
     String[] getAssociatedFileExtensions();
 
diff --git a/src/java/org/apache/turbine/services/template/TurbineTemplateService.java b/src/java/org/apache/turbine/services/template/TurbineTemplateService.java
index d12d1122..9ef3f919 100644
--- a/src/java/org/apache/turbine/services/template/TurbineTemplateService.java
+++ b/src/java/org/apache/turbine/services/template/TurbineTemplateService.java
@@ -22,6 +22,7 @@ package org.apache.turbine.services.template;
 
 
 import java.io.File;
+import java.util.Arrays;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
@@ -650,14 +651,9 @@ public class TurbineTemplateService
     @Deprecated
     public boolean templateExists(String template, String[] templatePaths)
     {
-        for (String templatePath : templatePaths)
-        {
-            if (new File(templatePath, template).exists())
-            {
-                return true;
-            }
-        }
-        return false;
+        return Arrays.stream(templatePaths)
+                .anyMatch(templatePath -> new File(templatePath, template)
+                        .exists());
     }
 
     /**
diff --git a/src/java/org/apache/turbine/services/template/mapper/package-info.java b/src/java/org/apache/turbine/services/template/mapper/package-info.java
new file mode 100644
index 00000000..3fdaf48e
--- /dev/null
+++ b/src/java/org/apache/turbine/services/template/mapper/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * The various mappers used by the Template service.
+ * <br>
+*/
+package org.apache.turbine.services.template.mapper;
diff --git a/src/java/org/apache/turbine/services/template/mapper/package.html b/src/java/org/apache/turbine/services/template/mapper/package.html
deleted file mode 100644
index 5097bd07..00000000
--- a/src/java/org/apache/turbine/services/template/mapper/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-The various mappers used by the Template service.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/template/package-info.java b/src/java/org/apache/turbine/services/template/package-info.java
new file mode 100644
index 00000000..e03d69c5
--- /dev/null
+++ b/src/java/org/apache/turbine/services/template/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Template Service maps template references to a view service and a template name.
+ * <br>
+*/
+package org.apache.turbine.services.template;
diff --git a/src/java/org/apache/turbine/services/template/package.html b/src/java/org/apache/turbine/services/template/package.html
deleted file mode 100644
index 131c6d89..00000000
--- a/src/java/org/apache/turbine/services/template/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Template Service maps template references to a view service and a template name.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/ui/package-info.java b/src/java/org/apache/turbine/services/ui/package-info.java
new file mode 100644
index 00000000..7b253c75
--- /dev/null
+++ b/src/java/org/apache/turbine/services/ui/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Provides skinning facilities for a Turbine web application.
+ * <br>
+*/
+package org.apache.turbine.services.ui;
diff --git a/src/java/org/apache/turbine/services/ui/package.html b/src/java/org/apache/turbine/services/ui/package.html
deleted file mode 100644
index 42e1e201..00000000
--- a/src/java/org/apache/turbine/services/ui/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Provides skinning facilities for a Turbine web application.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/uniqueid/package-info.java b/src/java/org/apache/turbine/services/uniqueid/package-info.java
new file mode 100644
index 00000000..c722aa93
--- /dev/null
+++ b/src/java/org/apache/turbine/services/uniqueid/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Returns unique identifiers for session tracking, cookies etc.
+ * <br>
+*/
+package org.apache.turbine.services.uniqueid;
diff --git a/src/java/org/apache/turbine/services/uniqueid/package.html b/src/java/org/apache/turbine/services/uniqueid/package.html
deleted file mode 100644
index b4da0078..00000000
--- a/src/java/org/apache/turbine/services/uniqueid/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Returns unique identifiers for session tracking, cookies etc.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/urlmapper/TurbineURLMapperService.java b/src/java/org/apache/turbine/services/urlmapper/TurbineURLMapperService.java
index 7ca791a9..9d571f50 100644
--- a/src/java/org/apache/turbine/services/urlmapper/TurbineURLMapperService.java
+++ b/src/java/org/apache/turbine/services/urlmapper/TurbineURLMapperService.java
@@ -34,9 +34,9 @@ import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.JAXBException;
-import javax.xml.bind.Unmarshaller;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.JAXBException;
+import jakarta.xml.bind.Unmarshaller;
 
 import org.apache.commons.configuration2.Configuration;
 import org.apache.fulcrum.parser.ParameterParser;
@@ -231,16 +231,16 @@ public class TurbineURLMapperService
                                 pp.setString(group.getKey(), matcher.group(group.getValue().intValue())));
 
                 // add implicit parameters
-                urlMap.getImplicitParameters().entrySet().forEach(e ->
-                        pp.add(e.getKey(), e.getValue()));
+                urlMap.getImplicitParameters()
+                        .forEach(pp::add);
 
                 // add override parameters
-                urlMap.getOverrideParameters().entrySet().forEach(e ->
-                        pp.setString(e.getKey(), e.getValue()));
+                urlMap.getOverrideParameters()
+                        .forEach(pp::setString);
 
                 // remove ignore parameters
-                urlMap.getIgnoreParameters().keySet().forEach(k ->
-                        pp.remove(k));
+                urlMap.getIgnoreParameters().keySet()
+                        .forEach(pp::remove);
                 
                 log.debug("mapped {} params from url {} ", pp.getKeys().length, url);
 
diff --git a/src/java/org/apache/turbine/services/urlmapper/model/URLMapEntry.java b/src/java/org/apache/turbine/services/urlmapper/model/URLMapEntry.java
index ccb4d3fd..52e15b45 100644
--- a/src/java/org/apache/turbine/services/urlmapper/model/URLMapEntry.java
+++ b/src/java/org/apache/turbine/services/urlmapper/model/URLMapEntry.java
@@ -24,11 +24,11 @@ import java.util.Map;
 import java.util.Set;
 import java.util.regex.Pattern;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
diff --git a/src/java/org/apache/turbine/services/urlmapper/model/URLMappingContainer.java b/src/java/org/apache/turbine/services/urlmapper/model/URLMappingContainer.java
index 1a2fac0d..26422e85 100644
--- a/src/java/org/apache/turbine/services/urlmapper/model/URLMappingContainer.java
+++ b/src/java/org/apache/turbine/services/urlmapper/model/URLMappingContainer.java
@@ -22,12 +22,12 @@ package org.apache.turbine.services.urlmapper.model;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElementWrapper;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElementWrapper;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
diff --git a/src/java/org/apache/turbine/services/urlmapper/model/XmlParameterAdapter.java b/src/java/org/apache/turbine/services/urlmapper/model/XmlParameterAdapter.java
index 609905de..84bf800f 100644
--- a/src/java/org/apache/turbine/services/urlmapper/model/XmlParameterAdapter.java
+++ b/src/java/org/apache/turbine/services/urlmapper/model/XmlParameterAdapter.java
@@ -23,7 +23,7 @@ import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 import org.apache.turbine.services.urlmapper.model.XmlParameterList.XmlParameter;
 
@@ -35,7 +35,7 @@ import org.apache.turbine.services.urlmapper.model.XmlParameterList.XmlParameter
 public class XmlParameterAdapter extends XmlAdapter<XmlParameterList, Map<String, String>>
 {
     /**
-     * @see javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal(java.lang.Object)
+     * @see jakarta.xml.bind.annotation.adapters.XmlAdapter#unmarshal(java.lang.Object)
      */
     @Override
     public Map<String, String> unmarshal(XmlParameterList xmlList) throws Exception
@@ -47,7 +47,7 @@ public class XmlParameterAdapter extends XmlAdapter<XmlParameterList, Map<String
     }
 
     /**
-     * @see javax.xml.bind.annotation.adapters.XmlAdapter#marshal(java.lang.Object)
+     * @see jakarta.xml.bind.annotation.adapters.XmlAdapter#marshal(java.lang.Object)
      */
     @Override
     public XmlParameterList marshal(Map<String, String> map) throws Exception
diff --git a/src/java/org/apache/turbine/services/urlmapper/model/XmlParameterList.java b/src/java/org/apache/turbine/services/urlmapper/model/XmlParameterList.java
index 7f8a769c..c65cbd9f 100644
--- a/src/java/org/apache/turbine/services/urlmapper/model/XmlParameterList.java
+++ b/src/java/org/apache/turbine/services/urlmapper/model/XmlParameterList.java
@@ -40,11 +40,11 @@ import java.util.List;
  * under the License.
  */
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlValue;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlValue;
 
 /**
  * A JAXB Class for holding a list of entries with key (in an attribute) and a value.
diff --git a/src/java/org/apache/turbine/services/urlmapper/model/XmlPatternAdapter.java b/src/java/org/apache/turbine/services/urlmapper/model/XmlPatternAdapter.java
index 68a52c59..04ef36ff 100644
--- a/src/java/org/apache/turbine/services/urlmapper/model/XmlPatternAdapter.java
+++ b/src/java/org/apache/turbine/services/urlmapper/model/XmlPatternAdapter.java
@@ -21,7 +21,7 @@ package org.apache.turbine.services.urlmapper.model;
 
 import java.util.regex.Pattern;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 /**
  * Creates Regex Pattern objects.
@@ -31,7 +31,7 @@ import javax.xml.bind.annotation.adapters.XmlAdapter;
 public class XmlPatternAdapter extends XmlAdapter<String, Pattern>
 {
     /**
-     * @see javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal(java.lang.Object)
+     * @see jakarta.xml.bind.annotation.adapters.XmlAdapter#unmarshal(java.lang.Object)
      */
     @Override
     public Pattern unmarshal(String urlPattern) throws Exception
@@ -40,7 +40,7 @@ public class XmlPatternAdapter extends XmlAdapter<String, Pattern>
     }
 
     /**
-     * @see javax.xml.bind.annotation.adapters.XmlAdapter#marshal(java.lang.Object)
+     * @see jakarta.xml.bind.annotation.adapters.XmlAdapter#marshal(java.lang.Object)
      */
     @Override
     public String marshal(Pattern pattern) throws Exception
diff --git a/src/java/org/apache/turbine/services/urlmapper/model/package-info.java b/src/java/org/apache/turbine/services/urlmapper/model/package-info.java
new file mode 100644
index 00000000..36e4fb1a
--- /dev/null
+++ b/src/java/org/apache/turbine/services/urlmapper/model/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Model classes for simplified URL configurations
+ * <br>
+*/
+package org.apache.turbine.services.urlmapper.model;
diff --git a/src/java/org/apache/turbine/services/urlmapper/package-info.java b/src/java/org/apache/turbine/services/urlmapper/package-info.java
new file mode 100644
index 00000000..178b88fe
--- /dev/null
+++ b/src/java/org/apache/turbine/services/urlmapper/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Provide back-and-forth-mapping facilities for simplified URLs
+ * <br>
+*/
+package org.apache.turbine.services.urlmapper;
diff --git a/src/java/org/apache/turbine/services/urlmapper/package.html b/src/java/org/apache/turbine/services/urlmapper/package.html
deleted file mode 100644
index 2f8516f5..00000000
--- a/src/java/org/apache/turbine/services/urlmapper/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Provide back-and-forth-mapping facilities for simplified URLs
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/services/velocity/package-info.java b/src/java/org/apache/turbine/services/velocity/package-info.java
new file mode 100644
index 00000000..82e84d61
--- /dev/null
+++ b/src/java/org/apache/turbine/services/velocity/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Velocity Service is used to provide Turbine with a Velocity based view.
+ * <br>
+*/
+package org.apache.turbine.services.velocity;
diff --git a/src/java/org/apache/turbine/services/velocity/package.html b/src/java/org/apache/turbine/services/velocity/package.html
deleted file mode 100644
index 0260fa28..00000000
--- a/src/java/org/apache/turbine/services/velocity/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Velocity Service is used to provide Turbine with a Velocity based view.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/util/BrowserDetector.java b/src/java/org/apache/turbine/util/BrowserDetector.java
index 0c47206e..58e5be28 100644
--- a/src/java/org/apache/turbine/util/BrowserDetector.java
+++ b/src/java/org/apache/turbine/util/BrowserDetector.java
@@ -27,7 +27,7 @@ import nl.basjes.parse.useragent.UserAgentAnalyzer;
 
 /**
  * This class parses the user agent string and provides getters for
- * its parts. It uses YAUAA (https://yauaa.basjes.nl/)
+ * its parts. It uses (<a href="https://yauaa.basjes.nl/">YAUAA</a>).
  *
  * The initialization step for a full UserAgentAnalyzer
  * (i.e. all fields) usually takes something in the range of 2-5 seconds.
diff --git a/src/java/org/apache/turbine/util/ServletUtils.java b/src/java/org/apache/turbine/util/ServletUtils.java
index 10e02003..c93fee19 100644
--- a/src/java/org/apache/turbine/util/ServletUtils.java
+++ b/src/java/org/apache/turbine/util/ServletUtils.java
@@ -24,6 +24,7 @@ import java.io.File;
 
 
 import java.util.StringTokenizer;
+import java.util.stream.Stream;
 
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletContext;
@@ -66,8 +67,7 @@ public class ServletUtils
         final String expandedText;
 
         // attempt to make it relative
-        if (!text.startsWith("/") && !text.startsWith("./")
-                && !text.startsWith("\\") && !text.startsWith(".\\"))
+        if (Stream.of("/", "./", "\\", ".\\").noneMatch(text::startsWith))
         {
             StringBuilder sb = new StringBuilder();
             sb.append("./");
diff --git a/src/java/org/apache/turbine/util/TurbineConfig.java b/src/java/org/apache/turbine/util/TurbineConfig.java
index 69fc3b84..fb242744 100644
--- a/src/java/org/apache/turbine/util/TurbineConfig.java
+++ b/src/java/org/apache/turbine/util/TurbineConfig.java
@@ -171,7 +171,7 @@ public class TurbineConfig
      */
     public TurbineConfig(String path, Map<String, String> initParams)
     {
-        this(path, new HashMap<String, Object>(0), initParams);
+        this(path, new HashMap<>(0), initParams);
     }
 
     /**
diff --git a/src/java/org/apache/turbine/util/package-info.java b/src/java/org/apache/turbine/util/package-info.java
new file mode 100644
index 00000000..e301d559
--- /dev/null
+++ b/src/java/org/apache/turbine/util/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Various utilities used in Turbine and for Turbine based applications.
+ * <br>
+*/
+package org.apache.turbine.util;
diff --git a/src/java/org/apache/turbine/util/package.html b/src/java/org/apache/turbine/util/package.html
deleted file mode 100644
index 4615bd7f..00000000
--- a/src/java/org/apache/turbine/util/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Various utilities used in Turbine and for Turbine based applications.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/util/template/package-info.java b/src/java/org/apache/turbine/util/template/package-info.java
new file mode 100644
index 00000000..510e3b9f
--- /dev/null
+++ b/src/java/org/apache/turbine/util/template/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Template related utilities.
+ * <br>
+*/
+package org.apache.turbine.util.template;
diff --git a/src/java/org/apache/turbine/util/template/package.html b/src/java/org/apache/turbine/util/template/package.html
deleted file mode 100644
index 3deddcb2..00000000
--- a/src/java/org/apache/turbine/util/template/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Template related utilities.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/util/uri/TemplateURI.java b/src/java/org/apache/turbine/util/uri/TemplateURI.java
index 58758fa2..3fe47b18 100644
--- a/src/java/org/apache/turbine/util/uri/TemplateURI.java
+++ b/src/java/org/apache/turbine/util/uri/TemplateURI.java
@@ -25,6 +25,8 @@ import org.apache.fulcrum.parser.ParameterParser;
 import org.apache.turbine.util.RunData;
 import org.apache.turbine.util.ServerData;
 
+import java.util.stream.Stream;
+
 /**
  * This class allows you to keep all the information needed for a single
  * link at one place. It keeps your query data, path info, the server
@@ -268,9 +270,7 @@ public class TemplateURI
         {
             String key = (String) name;
 
-            if (!key.equalsIgnoreCase(CGI_ACTION_PARAM) &&
-                    !key.equalsIgnoreCase(CGI_SCREEN_PARAM) &&
-                    !key.equalsIgnoreCase(CGI_TEMPLATE_PARAM))
+            if (Stream.of(CGI_ACTION_PARAM, CGI_SCREEN_PARAM, CGI_TEMPLATE_PARAM).noneMatch(key::equalsIgnoreCase))
             {
                 String[] values = pp.getStrings(key);
                 if(values != null)
diff --git a/src/java/org/apache/turbine/util/uri/package-info.java b/src/java/org/apache/turbine/util/uri/package-info.java
new file mode 100644
index 00000000..63adbd04
--- /dev/null
+++ b/src/java/org/apache/turbine/util/uri/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * URI generation and processing from Turbine based applications.
+ * <br>
+*/
+package org.apache.turbine.util.uri;
diff --git a/src/java/org/apache/turbine/util/uri/package.html b/src/java/org/apache/turbine/util/uri/package.html
deleted file mode 100644
index 2c5c4394..00000000
--- a/src/java/org/apache/turbine/util/uri/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-URI generation and processing from Turbine based applications.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/java/org/apache/turbine/util/velocity/VelocityHtmlEmail.java b/src/java/org/apache/turbine/util/velocity/VelocityHtmlEmail.java
index 1b3123d5..cda46af4 100644
--- a/src/java/org/apache/turbine/util/velocity/VelocityHtmlEmail.java
+++ b/src/java/org/apache/turbine/util/velocity/VelocityHtmlEmail.java
@@ -224,14 +224,14 @@ public class VelocityHtmlEmail extends HtmlEmail
      *
      * <p>Example of template:
      *
-     * <pre>
-     * &lt;html&gt;
-     * &lt;!-- $mail.embed("http://server/border.gif","border.gif"); --&gt;
-     * &lt;img src=$mail.getCid("border.gif")&gt;
-     * &lt;p&gt;This is your content
-     * &lt;img src=$mail.getCid("border.gif")&gt;
-     * &lt;/html&gt;
-     * </pre>
+     * {@code
+     * <html>
+     * <!-- $mail.embed("http://server/border.gif","border.gif"); -->
+     * <img src=$mail.getCid("border.gif")>
+     * <p>This is your content
+     * <img src=$mail.getCid("border.gif")>
+     * </html>
+     * }
      *
      * @param surl A String.
      * @param name A String.
diff --git a/src/java/org/apache/turbine/util/velocity/package-info.java b/src/java/org/apache/turbine/util/velocity/package-info.java
new file mode 100644
index 00000000..d8fb6ead
--- /dev/null
+++ b/src/java/org/apache/turbine/util/velocity/package-info.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+/**
+ * Velocity related utility code.
+ * <br>
+*/
+package org.apache.turbine.util.velocity;
diff --git a/src/java/org/apache/turbine/util/velocity/package.html b/src/java/org/apache/turbine/util/velocity/package.html
deleted file mode 100644
index 8bfa83a3..00000000
--- a/src/java/org/apache/turbine/util/velocity/package.html
+++ /dev/null
@@ -1,29 +0,0 @@
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<html>
-<head>
-<!-- head part is ignored -->
-</head>
-
-<body>
-Velocity related utility code.
-<br>
-<font size="-2">$Id$</font>
-</body>
-</html>
diff --git a/src/site/site.xml b/src/site/site.xml
index ba270157..560a385a 100644
--- a/src/site/site.xml
+++ b/src/site/site.xml
@@ -29,12 +29,7 @@
   <bannerRight>
     <src>/images/logo.gif</src>
   </bannerRight>
-  <skin>
-    <groupId>org.apache.maven.skins</groupId>
-    <artifactId>maven-fluido-skin</artifactId>
-    <version>1.9</version>
-  </skin>
-
+  
   <body>
   
      <head>
@@ -119,18 +114,6 @@
       
   </body>
   
-  <custom>   
-   <fluidoSkin>
-        <topBarEnabled>false</topBarEnabled>
-        <!-- topBarIcon>
-        <name>Apache Turbine</name>
-        <alt>Apache Turbine</alt>
-        <src>/images/turbine-project-apache-separate.png</src>
-        <href>https://turbine.apache.org/</href>
-      </topBarIcon>
-      <topBarContainerStyle>width: 95%;</topBarContainerStyle-->
-        <sideBarEnabled>true</sideBarEnabled>
-      </fluidoSkin>
-  </custom>
+  <!-- custom now configured in parent site -->
   
 </project>
diff --git a/src/test/org/apache/turbine/TurbineTest.java b/src/test/org/apache/turbine/TurbineTest.java
index ce246fd8..97e8ceb2 100644
--- a/src/test/org/apache/turbine/TurbineTest.java
+++ b/src/test/org/apache/turbine/TurbineTest.java
@@ -80,6 +80,7 @@ public class TurbineTest extends BaseTestCase
     }
 
     @Test
+    @Deprecated
     public void testDefaultInputEncoding() throws Exception
     {
         Turbine t = tc.getTurbine();
@@ -89,11 +90,13 @@ public class TurbineTest extends BaseTestCase
     }
 
     @Test
+    @Deprecated
     public void testNonDefaultEncoding()
     {
         Turbine t = tc.getTurbine();
         Turbine.getConfiguration().setProperty(TurbineConstants.PARAMETER_ENCODING_KEY, "UTF-8");
         assertNotNull(Turbine.getDefaultInputEncoding());
         assertEquals("UTF-8", Turbine.getDefaultInputEncoding());
+        t.destroy();
     }
 }
diff --git a/src/test/org/apache/turbine/annotation/AnnotatedMethodsTest.java b/src/test/org/apache/turbine/annotation/AnnotatedMethodsTest.java
new file mode 100644
index 00000000..0b69762c
--- /dev/null
+++ b/src/test/org/apache/turbine/annotation/AnnotatedMethodsTest.java
@@ -0,0 +1,95 @@
+package org.apache.turbine.annotation;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.apache.turbine.services.assemblerbroker.AssemblerBrokerService;
+import org.apache.turbine.services.pull.PullService;
+import org.apache.turbine.util.TurbineConfig;
+import org.apache.turbine.util.TurbineException;
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Tag;
+import org.junit.jupiter.api.Test;
+
+/**
+ * Test class for AnnotatedMethodsTest to test method fields annotation
+ *
+ */
+public class AnnotatedMethodsTest {
+
+    private static AssemblerBrokerService asb;
+    private static TurbineConfig tc = null;
+    private static PullService pullService;
+
+    @BeforeAll
+    public static void setup()
+    {
+        // required to initialize defaults
+        tc = new TurbineConfig(
+                        ".",
+                        "/conf/test/CompleteTurbineResources.properties");
+        tc.initialize();
+    }
+
+    @AfterAll
+    public static void tearDown()
+    {
+        tc.dispose();
+    }
+
+    @TurbineService
+    public void setAssemblerBrokerService(AssemblerBrokerService df)
+    {
+        AnnotatedMethodsTest.asb = df;
+    }
+
+    @TurbineService
+    public static void setPullService(PullService pullService) {
+        AnnotatedMethodsTest.pullService = pullService;
+    }
+
+    /*
+     * Class under test for String format(Date, String)
+     */
+    @Test
+    void testTool() throws TurbineException
+    {
+        AnnotationProcessor.process(this, true);
+        assertNotNull(pullService);
+        assertNotNull(asb);
+    }
+
+    @Tag("performance") // ignore in surefire, activating seems to be still buggy ?
+    @Test
+    public void testProcessingPerformance() throws TurbineException
+    {
+        long startTime = System.currentTimeMillis();
+
+        for (int i = 0; i < 100000; i++)
+        {
+            AnnotationProcessor.process(this, true);
+        }
+
+        System.out.println(System.currentTimeMillis() - startTime);
+    }
+
+}
diff --git a/src/test/org/apache/turbine/annotation/AnnotationProcessorTest.java b/src/test/org/apache/turbine/annotation/AnnotationProcessorTest.java
index 3444b8c9..a30806b8 100644
--- a/src/test/org/apache/turbine/annotation/AnnotationProcessorTest.java
+++ b/src/test/org/apache/turbine/annotation/AnnotationProcessorTest.java
@@ -1,13 +1,29 @@
 package org.apache.turbine.annotation;
 
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-
 /*
- * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
@@ -24,7 +40,6 @@ import static org.junit.jupiter.api.Assertions.assertTrue;
  * specific language governing permissions and limitations
  * under the License.
  */
-
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -33,12 +48,15 @@ import java.util.List;
 
 import org.apache.commons.configuration2.Configuration;
 import org.apache.fulcrum.factory.FactoryService;
+import org.apache.fulcrum.security.UserManager;
 import org.apache.fulcrum.security.entity.Role;
 import org.apache.fulcrum.security.model.turbine.TurbineAccessControlList;
 import org.apache.turbine.annotation.AnnotationProcessor.ConditionType;
 import org.apache.turbine.modules.Screen;
 import org.apache.turbine.modules.ScreenLoader;
 import org.apache.turbine.services.assemblerbroker.AssemblerBrokerService;
+import org.apache.turbine.services.localization.LocalizationTool;
+import org.apache.turbine.services.security.SecurityService;
 import org.apache.turbine.util.RunData;
 import org.apache.turbine.util.TurbineConfig;
 import org.apache.turbine.util.TurbineException;
@@ -83,9 +101,19 @@ public class AnnotationProcessorTest
 
     @TurbineService
     private AssemblerBrokerService asb;
+    
+    /** a Fulcrum userManager */
+    @TurbineService
+    private UserManager userManager;
+    
+    @TurbineService
+    private SecurityService security;
 
     @TurbineService
     private FactoryService factory;
+    
+    @TurbineTool(LocalizationTool.class)
+    private LocalizationTool lt;
 
     @BeforeAll
     public static void init() throws Exception
@@ -129,6 +157,11 @@ public class AnnotationProcessorTest
         assertNotNull(screenLoader);
         assertNotNull(asb);
         assertNotNull(factory);
+        
+        assertNotNull(userManager);
+        assertNotNull(security);
+        assertNotNull(lt);
+        // although you need to initialize with context in lt.init(getRunData());
 
     }
 
@@ -151,8 +184,8 @@ public class AnnotationProcessorTest
         Method[] methods = getClass().getMethods();
         for (Method m : methods) {
             if (m.getName().equals( "guardedMethoded" )) {
-                assertTrue( AnnotationProcessor.isAuthorized( m, (TurbineAccessControlList)data.getACL(), ConditionType.ANY ));
-                assertFalse( AnnotationProcessor.isAuthorized( m, (TurbineAccessControlList)data.getACL(), ConditionType.COMPOUND ));
+                assertTrue( AnnotationProcessor.isAuthorized( m, (TurbineAccessControlList<?>)data.getACL(), ConditionType.ANY ));
+                assertFalse( AnnotationProcessor.isAuthorized( m, (TurbineAccessControlList<?>)data.getACL(), ConditionType.COMPOUND ));
             }
         }
     }
@@ -176,7 +209,7 @@ public class AnnotationProcessorTest
         Method[] methods = getClass().getMethods();
         for (Method m : methods) {
             if (m.getName().equals( "guardedMethodedAdmin" )) {
-                assertFalse( AnnotationProcessor.isAuthorized( m, (TurbineAccessControlList)data.getACL(), ConditionType.ANY ));
+                assertFalse( AnnotationProcessor.isAuthorized( m, (TurbineAccessControlList<?>)data.getACL(), ConditionType.ANY ));
             }
         }
     }
@@ -200,7 +233,7 @@ public class AnnotationProcessorTest
         for (Method m : methods) {
             if (m.getName().equals( "unguardedMethoded" )) {
                 // default is true, if not annotated
-                assertTrue( AnnotationProcessor.isAuthorized( m, (TurbineAccessControlList)data.getACL(), ConditionType.ANY ));
+                assertTrue( AnnotationProcessor.isAuthorized( m, (TurbineAccessControlList<?>)data.getACL(), ConditionType.ANY ));
             }
         }
     }
@@ -219,4 +252,5 @@ public class AnnotationProcessorTest
 
         System.out.println(System.currentTimeMillis() - startTime);
     }
+
 }
diff --git a/src/test/org/apache/turbine/modules/ActionLoaderTest.java b/src/test/org/apache/turbine/modules/ActionLoaderTest.java
index 3f06d316..fc5a4be6 100644
--- a/src/test/org/apache/turbine/modules/ActionLoaderTest.java
+++ b/src/test/org/apache/turbine/modules/ActionLoaderTest.java
@@ -332,4 +332,25 @@ public class ActionLoaderTest extends BaseTestCase
             fail("Should not have thrown an exception.");
         }
     }
+    
+    @Test
+    public void testDoPerformWithExtendedServiceInjection() throws Exception
+    {
+        RunData data = getRunData(request, response, config);
+        PipelineData pipelineData = data;
+        data.setAction("VelocityActionWithExtendedServiceInjection");
+
+        try
+        {
+            ActionLoader.getInstance().exec(pipelineData, data.getAction());
+            Context context = (Context)
+                            data.getTemplateInfo().getTemplateContext(VelocityService.CONTEXT);
+            assertTrue( context.get( "mykey" ) != null );
+        }
+        catch (Exception e)
+        {
+            e.printStackTrace();
+            fail("Should not have thrown an exception.");
+        }
+    }
 }
diff --git a/src/test/org/apache/turbine/modules/actions/VelocityActionWithExtendedServiceInjection.java b/src/test/org/apache/turbine/modules/actions/VelocityActionWithExtendedServiceInjection.java
new file mode 100644
index 00000000..9aec0ba3
--- /dev/null
+++ b/src/test/org/apache/turbine/modules/actions/VelocityActionWithExtendedServiceInjection.java
@@ -0,0 +1,64 @@
+package org.apache.turbine.modules.actions;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+import static org.junit.Assert.assertNotNull;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.turbine.annotation.TurbineService;
+import org.apache.turbine.pipeline.PipelineData;
+import org.apache.turbine.services.ServiceWithServiceInjection;
+import org.apache.velocity.context.Context;
+
+/**
+ * Annnotating even an assembler as TurbineService on class level we could omit 
+ * annotations for fields if class is a Turbine service.
+ * 
+ * This would be quite experimental.
+ */
+//@TurbineService
+public class VelocityActionWithExtendedServiceInjection extends VelocityAction
+{
+    private static Log log = LogFactory.getLog(VelocityActionWithExtendedServiceInjection.class);
+
+    // Test for class level SERVICE_NAME in ServiceWithServiceInjection
+    // Annotation could be omitted as the class is annotated could be omitted 
+    @TurbineService
+    private ServiceWithServiceInjection serviceWithServiceInjection;
+    
+
+    /**
+     *  Default action is nothing.
+     *
+     * @param  pipelineData           Current RunData information
+     * @param  context        Context to populate
+     * @throws  Exception  Thrown on error
+     */
+    @Override
+    public void doPerform(PipelineData pipelineData, Context context) throws Exception
+    {
+        log.debug("Calling doPerform(PipelineData)");
+        assertNotNull("field injected serviceWithServiceInjection object was Null.", serviceWithServiceInjection);
+        serviceWithServiceInjection.callService();
+        context.put("mykey","x");
+    }
+}
diff --git a/src/test/org/apache/turbine/om/MockRetrieverFactory.java b/src/test/org/apache/turbine/om/MockRetrieverFactory.java
index 2bd72a21..33e4539e 100644
--- a/src/test/org/apache/turbine/om/MockRetrieverFactory.java
+++ b/src/test/org/apache/turbine/om/MockRetrieverFactory.java
@@ -23,7 +23,9 @@ package org.apache.turbine.om;
  * This mocks a {@link RetrieverFactory}.
  *
  * @author <a href="mailto:tv@apache.org">Thomas Vandahl</a>
+ * @deprecated Retriever and RetrieverFactory are deprecated
  */
+@Deprecated
 public class MockRetrieverFactory implements RetrieverFactory
 {
 
diff --git a/src/test/org/apache/turbine/om/OMToolTest.java b/src/test/org/apache/turbine/om/OMToolTest.java
index f50b0cf7..ab7bf33a 100644
--- a/src/test/org/apache/turbine/om/OMToolTest.java
+++ b/src/test/org/apache/turbine/om/OMToolTest.java
@@ -35,7 +35,9 @@ import org.junit.Test;
  * This class tests the {@link OMTool} functionality.
  *
  * @author <a href="mailto:tv@apache.org">Thomas Vandahl</a>
+ * @deprecated OMTool is deprecated
  */
+@Deprecated
 public class OMToolTest
 {
     private static TurbineConfig tc = null;
diff --git a/src/test/org/apache/turbine/pipeline/DefaultSessionTimeoutValveTest.java b/src/test/org/apache/turbine/pipeline/DefaultSessionTimeoutValveTest.java
index dfe3929e..214c9db6 100644
--- a/src/test/org/apache/turbine/pipeline/DefaultSessionTimeoutValveTest.java
+++ b/src/test/org/apache/turbine/pipeline/DefaultSessionTimeoutValveTest.java
@@ -47,7 +47,9 @@ import org.junit.jupiter.api.Test;
  * @author <a href="mailto:peter@courcoux.biz">Peter Courcoux</a>
  * @version $Id: DefaultSessionTimeoutValveTest.java 1606111 2014-06-27
  *          14:46:47Z gk $
+ * @deprecated DefaultSessionTimeoutValve is deprecated
  */
+@Deprecated
 public class DefaultSessionTimeoutValveTest extends BaseTestCase
 {
     private static TurbineConfig tc = null;
diff --git a/src/test/org/apache/turbine/pipeline/DefaultSetEncodingValveTest.java b/src/test/org/apache/turbine/pipeline/DefaultSetEncodingValveTest.java
index 661e2c93..125f7e10 100644
--- a/src/test/org/apache/turbine/pipeline/DefaultSetEncodingValveTest.java
+++ b/src/test/org/apache/turbine/pipeline/DefaultSetEncodingValveTest.java
@@ -91,7 +91,7 @@ public class DefaultSetEncodingValveTest extends BaseTestCase
         pipeline.invoke(pipelineData);
 
         RunData runData = (RunData) pipelineData;
-        assertEquals(TurbineConstants.PARAMETER_ENCODING_DEFAULT, runData.getCharSet());
+        assertEquals(TurbineConstants.PARAMETER_ENCODING_DEFAULT, runData.getCharset().name());
     }
 
     /**
@@ -112,7 +112,7 @@ public class DefaultSetEncodingValveTest extends BaseTestCase
         pipeline.invoke(pipelineData);
         RunData runData = (RunData) pipelineData;
 
-        assertEquals("UTF-8", runData.getCharSet());
+        assertEquals("UTF-8", runData.getCharset().name());
     }
 
     @AfterAll
diff --git a/src/test/org/apache/turbine/pipeline/PipelineCreationTest.java b/src/test/org/apache/turbine/pipeline/PipelineCreationTest.java
index 98f853de..8809a9d2 100644
--- a/src/test/org/apache/turbine/pipeline/PipelineCreationTest.java
+++ b/src/test/org/apache/turbine/pipeline/PipelineCreationTest.java
@@ -26,9 +26,9 @@ import static org.junit.jupiter.api.Assertions.assertEquals;
 import java.io.StringReader;
 import java.io.StringWriter;
 
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.Marshaller;
-import javax.xml.bind.Unmarshaller;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.Marshaller;
+import jakarta.xml.bind.Unmarshaller;
 
 import org.junit.jupiter.api.BeforeEach;
 
diff --git a/src/test/org/apache/turbine/services/LoadingComponentsTest.java b/src/test/org/apache/turbine/services/LoadingComponentsTest.java
index 09d9eaf1..532819f2 100644
--- a/src/test/org/apache/turbine/services/LoadingComponentsTest.java
+++ b/src/test/org/apache/turbine/services/LoadingComponentsTest.java
@@ -31,9 +31,12 @@ import org.apache.fulcrum.factory.FactoryService;
 import org.apache.fulcrum.intake.IntakeService;
 import org.apache.fulcrum.localization.LocalizationService;
 import org.apache.fulcrum.mimetype.MimeTypeService;
+import org.apache.turbine.annotation.AnnotationProcessor;
+import org.apache.turbine.annotation.TurbineService;
 import org.apache.turbine.services.avaloncomponent.AvalonComponentService;
 import org.apache.turbine.test.BaseTestCase;
 import org.apache.turbine.util.TurbineConfig;
+import org.apache.turbine.util.TurbineException;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -50,6 +53,9 @@ import org.junit.Test;
 public class LoadingComponentsTest extends BaseTestCase
 {
     private static TurbineConfig tc = null;
+    
+    @TurbineService
+    GlobalCacheService cacheService;
 
     @BeforeClass
     public static void setUp() throws Exception
@@ -119,6 +125,12 @@ public class LoadingComponentsTest extends BaseTestCase
         MimeTypeService mimetype = (MimeTypeService)serviceManager.getService(MimeTypeService.ROLE);
         assertNotNull(mimetype);
     }
+    
+    @Test public void testLoadingByAnnotation() throws TurbineException
+    {
+        AnnotationProcessor.process(this);
+        assertNotNull(cacheService);
+    }
 
     /**
      * Lookup up an unknown servie
diff --git a/src/test/org/apache/turbine/services/ServiceWithServiceInjection.java b/src/test/org/apache/turbine/services/ServiceWithServiceInjection.java
new file mode 100644
index 00000000..0b801ea4
--- /dev/null
+++ b/src/test/org/apache/turbine/services/ServiceWithServiceInjection.java
@@ -0,0 +1,88 @@
+package org.apache.turbine.services;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+
+import static org.junit.Assert.assertNotNull;
+
+import org.apache.avalon.framework.activity.Initializable;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.fulcrum.localization.LocalizationService;
+import org.apache.turbine.annotation.TurbineService;
+/**
+ * This service is used for testing injection of services in fields and methods and class level declaration of 
+ * {@link TurbineService} without interface. 
+ *
+ * @author <a href="mailto:gk@apache.org">Georg Kallidis</a>
+ */
+@TurbineService( ServiceWithServiceInjection.SERVICE_NAME )
+public class ServiceWithServiceInjection extends MethodAnnotatedTurbineBaseService implements Initializable /* ServiceWithService */
+{
+    // will be checked before ROLE
+    static final String SERVICE_NAME = "ServiceWithService";
+    
+    String ROLE = ServiceWithServiceInjection.class.getName();
+    
+    private static Log log = LogFactory.getLog(ServiceWithServiceInjection.class);
+    
+    // Test for implicit SERVICE_NAME
+    // we need the declaration as this is not by default a Turbine Service
+    @TurbineService
+    private LocalizationService localizationService;
+    
+    static private ServiceWithServiceInjection2 serviceWithServiceInjection2;
+    
+ 
+    // Test for method injected class level SERVICE_NAME
+    // Annotation could be omitted as the class is annotated
+    @TurbineService
+    public void setServiceWithServiceInjection2(ServiceWithServiceInjection2 serviceWithServiceInjection) {
+        serviceWithServiceInjection2 = serviceWithServiceInjection;
+    }
+    
+    /**
+     * Initializes the service.
+     */
+    @Override
+    public void initialize() throws Exception 
+    {
+        log.debug("Calling initializable()");
+        // do not call  AnnotationProcessor.process(this); here as it will result in an endless looping;
+    }
+    
+    /**
+     * Initializes the service.
+     */
+    @Override
+    public void init() throws InitializationException
+    {
+        super.init();
+        log.info("localizationService is: " + localizationService);
+//        setInit(true);
+    }
+    
+    public void callService() 
+    {
+        assertNotNull("field injected localizationService object was Null.", localizationService);
+        assertNotNull("method injected service serviceWithServiceInjection2 object was Null.", serviceWithServiceInjection2);
+        ServiceWithServiceInjection.serviceWithServiceInjection2.callService();
+    }
+}
diff --git a/src/test/org/apache/turbine/services/ServiceWithServiceInjection2.java b/src/test/org/apache/turbine/services/ServiceWithServiceInjection2.java
new file mode 100644
index 00000000..1e5b96f9
--- /dev/null
+++ b/src/test/org/apache/turbine/services/ServiceWithServiceInjection2.java
@@ -0,0 +1,61 @@
+package org.apache.turbine.services;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import static org.junit.Assert.assertNotNull;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.fulcrum.localization.LocalizationService;
+import org.apache.turbine.annotation.TurbineService;
+/**
+ * This service is used for testing 2nd level injection of services and class level declaration of 
+ * {@link TurbineService} (interface is optional). 
+ *
+ * @author <a href="mailto:gk@apache.org">Georg Kallidis</a>
+ */
+@TurbineService( ServiceWithServiceInjection2.SERVICE_NAME )
+public class ServiceWithServiceInjection2 extends FieldAnnotatedTurbineBaseService 
+{
+    
+    static final String SERVICE_NAME = "ServiceWithService2";
+    
+    private static Log log = LogFactory.getLog(ServiceWithServiceInjection2.class);
+    
+    // Test for implicit SERVICE_NAME
+    @TurbineService
+    private LocalizationService localizationService2;
+    
+    /**
+     * Initializes the service.
+     */
+    @Override
+    public void init() throws InitializationException
+    {
+        super.init();
+        log.info("localizationService2 is: " + localizationService2);
+//        setInit(true);
+    }
+    
+    public void callService() 
+    {
+        assertNotNull("localizationService2 object was Null.", localizationService2);
+    }
+}
diff --git a/src/test/org/apache/turbine/services/cache/FulcrumCacheComponentTest.java b/src/test/org/apache/turbine/services/cache/FulcrumCacheComponentTest.java
index 2598ba1f..cb081ace 100644
--- a/src/test/org/apache/turbine/services/cache/FulcrumCacheComponentTest.java
+++ b/src/test/org/apache/turbine/services/cache/FulcrumCacheComponentTest.java
@@ -43,7 +43,7 @@ public class FulcrumCacheComponentTest extends BaseTestCase
     {
         ServiceManager serviceManager = TurbineServices.getInstance();
 		GlobalCacheService cache = (GlobalCacheService)serviceManager.getService(GlobalCacheService.ROLE);
-		CachedObject inputObject = new CachedObject(new Double(10.2));
+		CachedObject<Double> inputObject = new CachedObject<>(Double.valueOf(10.2));
 		cache.addObject("testObj",inputObject);
     }
 
diff --git a/src/test/org/apache/turbine/services/localization/BarBundle.java b/src/test/org/apache/turbine/services/localization/BarBundle.java
new file mode 100644
index 00000000..f33289dc
--- /dev/null
+++ b/src/test/org/apache/turbine/services/localization/BarBundle.java
@@ -0,0 +1,42 @@
+package org.apache.turbine.services.localization;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.util.ListResourceBundle;
+
+/**
+ * An english resource bundle for use in testing.
+ */
+public class BarBundle extends ListResourceBundle
+{
+    private static final Object[][] CONTENTS =
+    {
+        { "key1", "val1" },
+        { "key2", "val2" },
+        { "key3", "val3" },
+        { "key4", "val4" }
+    };
+
+    @Override
+    protected Object[][] getContents()
+    {
+        return CONTENTS;
+    }
+}
diff --git a/src/test/org/apache/turbine/services/localization/BarBundle_de.java b/src/test/org/apache/turbine/services/localization/BarBundle_de.java
new file mode 100644
index 00000000..56d34abe
--- /dev/null
+++ b/src/test/org/apache/turbine/services/localization/BarBundle_de.java
@@ -0,0 +1,42 @@
+package org.apache.turbine.services.localization;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import java.util.ListResourceBundle;
+
+/**
+ * An english resource bundle for use in testing.
+ */
+public class BarBundle_de extends ListResourceBundle
+{
+    private static final Object[][] CONTENTS =
+    {
+        { "key1", "wert1" },
+        { "key2", "weet2" },
+        { "key3", "wert3" },
+        { "key4", "wert4" }
+    };
+
+    @Override
+    protected Object[][] getContents()
+    {
+        return CONTENTS;
+    }
+}
diff --git a/src/test/org/apache/turbine/services/localization/DateTimeFormatterServiceTest.java b/src/test/org/apache/turbine/services/localization/DateTimeFormatterServiceTest.java
new file mode 100644
index 00000000..37105970
--- /dev/null
+++ b/src/test/org/apache/turbine/services/localization/DateTimeFormatterServiceTest.java
@@ -0,0 +1,348 @@
+package org.apache.turbine.services.localization;
+
+import static org.junit.Assert.assertTrue;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.DynamicContainer.dynamicContainer;
+import static org.junit.jupiter.api.DynamicTest.dynamicTest;
+import static org.mockito.Mockito.mock;
+
+import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.ZonedDateTime;
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.ChronoField;
+import java.time.temporal.ChronoUnit;
+import java.time.temporal.TemporalAccessor;
+import java.util.stream.Stream;
+
+import javax.servlet.ServletConfig;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.fulcrum.parser.DefaultParameterParser;
+import org.apache.turbine.annotation.AnnotationProcessor;
+import org.apache.turbine.annotation.TurbineService;
+import org.apache.turbine.services.pull.PullService;
+import org.apache.turbine.services.pull.util.DateTimeFormatterTool;
+import org.apache.turbine.services.rundata.RunDataService;
+import org.apache.turbine.services.velocity.VelocityService;
+import org.apache.turbine.test.BaseTestCase;
+import org.apache.turbine.util.RunData;
+import org.apache.turbine.util.TurbineConfig;
+import org.apache.velocity.context.Context;
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.DynamicNode;
+import org.junit.jupiter.api.MethodOrderer;
+import org.junit.jupiter.api.Order;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.TestFactory;
+import org.junit.jupiter.api.TestInstance;
+import org.junit.jupiter.api.TestMethodOrder;
+
+/**
+ * Test class for DateTimeFormatter.
+ *
+ */
+@TestInstance(TestInstance.Lifecycle.PER_CLASS)
+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
+public class DateTimeFormatterServiceTest extends BaseTestCase {
+
+    @TurbineService
+    private DateTimeFormatterService df;
+
+    private TurbineConfig tc = null;
+
+    @TurbineService
+    private PullService pullService;
+
+    DateTimeFormatterTool dateTimeFormatterTool;
+
+    @TurbineService
+    private VelocityService vs = null;
+
+    @TurbineService
+    RunDataService runDataService = null;
+
+    @BeforeAll
+    public void setup() throws Exception {
+        // required to initialize defaults
+        tc = new TurbineConfig(
+                ".",
+                "/conf/test/CompleteTurbineResources.properties");
+        tc.initialize();
+
+        AnnotationProcessor.process(this);
+
+        assertNotNull(pullService);
+        assertNotNull(vs);
+    }
+
+    private RunData getRunData() throws Exception {
+        ServletConfig config = mock(ServletConfig.class);
+        HttpServletRequest request = getMockRequest();
+        HttpServletResponse response = mock(HttpServletResponse.class);
+        RunData runData = runDataService.getRunData(request, response, config);
+        assertEquals(DefaultParameterParser.class, runData.getParameters()
+                .getClass(), "Verify we are using Fulcrum parameter parser");
+        return runData;
+    }
+
+    @AfterAll
+    public void tearDown() {
+        vs.shutdown();
+        tc.dispose();
+    }
+
+    /*
+     * Class under test for String format(Date, String)
+     */
+    @Order(1)
+    @Test
+    void testTool() throws Exception {
+        RunData rundata = getRunData();
+        Context requestContext = vs.getContext(rundata);
+        assertNotNull(requestContext);
+        pullService.populateContext(requestContext, rundata);
+
+        // taking from request context
+        dateTimeFormatterTool = (DateTimeFormatterTool) requestContext.get("dateTimeFormatter");
+        assertNotNull(dateTimeFormatterTool);
+        
+        String resultFormat = dateTimeFormatterTool.format(Instant.now());
+        
+        System.out.println("format Instant now in tool:"+resultFormat );
+        assertTrue(resultFormat.length()>5);
+        
+        System.out.println("locale in tool:"+ dateTimeFormatterTool.getLocale());
+        // tool.use.request.locale is by default false, tool will use service locale
+        assertTrue(dateTimeFormatterTool.getLocale() == null);
+    }
+    
+    // to test configuration 
+    // datetime.zoneId
+    // and locale.default.language l.d.country
+    @Test
+    void testDefault() throws Exception {
+        assertNotNull(df);
+        System.out.println("zoneid in service:"+ df.getZoneId().getId());
+//        assertEquals("Europe/Berlin",df.getZoneId().getId());
+        System.out.println("locale in service:"+ df.getLocale());
+//        assertEquals("de_DE",df.getLocale().toString());
+ 
+    }
+
+    @Order(2)
+    @TestFactory
+    Stream<DynamicNode> testDateTimeFormatterInstances() {
+        // Stream of DateTimeFormatterInterface to check
+        Stream<DateTimeFormatterInterface> inputStream = Stream.of(
+                df, 
+                dateTimeFormatterTool);
+        // Executes tests based on the current input value.
+        return inputStream.map(dtf -> dynamicContainer(
+                "Test " + dtf + " in factory container:",
+                Stream.of(
+                        dynamicTest("test formatDateString",() -> formatDateString(dtf) ),
+                        dynamicTest("test formatZonedDateString",() -> formatZonedDateString(dtf) ),
+                        dynamicTest("test defaultMapFromInstant",() -> defaultMapFromInstant(dtf) ),
+                        dynamicTest("test defaultMapInstant",() -> defaultMapInstant(dtf) ),
+                        dynamicTest("test mapDateStringNullString", () -> mapDateStringNullString(dtf)),
+                        dynamicTest("test mapDateStringEmptyString",() -> mapDateStringEmptyString(dtf)),
+                        dynamicTest("test formatDateStringNullFormat",() -> formatDateStringNullFormat(dtf)),
+                        dynamicTest("test formatDateStringNullString",() -> formatDateStringNullString(dtf)),
+                        dynamicTest("test formatDateStringEmptyString",() -> formatDateStringEmptyString(dtf)),
+                        dynamicTest("test formatInstantString", () -> formatInstantString(dtf))
+                        )));
+        // Or return a stream of dynamic tests instead of Dynamic nodes,
+        // but this requires Function<DateTimeFormatterInterface, String>
+        // displayNameGenerator and
+        // e.g. ThrowingConsumer<DateTimeFormatterInterface> testExecutor = dtf
+        // return DynamicTest.stream(inputStream, displayNameGenerator, testExecutor);
+    }
+
+    void formatDateString(DateTimeFormatterInterface dateTime) {
+        LocalDateTime ldt = LocalDateTime.now();
+        int day = ldt.get(ChronoField.DAY_OF_MONTH);
+        int month = ldt.get(ChronoField.MONTH_OF_YEAR); // one based
+        int year = ldt.get(ChronoField.YEAR);
+
+        String dayString = (day < 10 ? "0" : "") + day;
+        String monthString = (month < 10 ? "0" : "") + month;
+        String ddmmyyyy = dayString + "/" + monthString + "/" + year;
+
+        String mmddyyyy = "" + monthString + "/" + dayString + "/" + year;
+
+        assertEquals(ddmmyyyy, dateTime.format(ldt, "dd/MM/yyyy"));
+        assertEquals(mmddyyyy, dateTime.format(ldt, "MM/dd/yyyy"));
+    }
+
+    void formatZonedDateString(DateTimeFormatterInterface dateTime) {        
+        ZonedDateTime zdt = ZonedDateTime.now(dateTime.getZoneId());
+        int day = zdt.get(ChronoField.DAY_OF_MONTH);
+        int month = zdt.get(ChronoField.MONTH_OF_YEAR); // one based
+        int year = zdt.get(ChronoField.YEAR);
+        zdt = zdt.truncatedTo(ChronoUnit.MINUTES);
+
+        String dayString = (day < 10 ? "0" : "") + day;
+        String monthString = (month < 10 ? "0" : "") + month;
+        String ddmmyyyy = dayString + "/" + monthString + "/" + year;
+        Assertions.assertEquals(ddmmyyyy, df.format(zdt, "dd/MM/yyyy"));
+
+        int hours = zdt.get(ChronoField.HOUR_OF_DAY);
+        int mins = zdt.get(ChronoField.MINUTE_OF_HOUR);
+        int secs = zdt.get(ChronoField.SECOND_OF_MINUTE);
+        String hourString = (hours < 10 ? "0" : "") + hours;
+        String minsString = (mins < 10 ? "0" : "") + mins;
+        String secsString = (secs < 10 ? "0" : "") + secs;
+
+        String zone = zdt.getZone().getId();
+        /* String offset = */ zdt.getOffset().getId();
+        // offset formatting not easy matchable, removed
+        String mmddyyyy = "" + monthString + "/" + dayString + "/" + year + " " + hourString + ":" + minsString + ":"
+                + secsString + " " + zone;
+        // zone + offset format, removed offset ZZZ
+        assertEquals(mmddyyyy, dateTime.format(zdt, "MM/dd/yyyy HH:mm:ss VV"));
+    }
+
+    void defaultMapFromInstant(DateTimeFormatterInterface dateTime) {
+        DateTimeFormatter incomingFormat = DateTimeFormatter.ISO_DATE_TIME
+                .withZone(dateTime.getZoneId());
+        // may throws an DateTimeParseException
+        Instant now = Instant.now().truncatedTo(ChronoUnit.MINUTES);
+        String source = incomingFormat.format(now);
+
+        TemporalAccessor dateTimeFromInstant = incomingFormat.parse(source);
+        int day = dateTimeFromInstant.get(ChronoField.DAY_OF_MONTH);
+        int month = dateTimeFromInstant.get(ChronoField.MONTH_OF_YEAR); // one based
+        int year = dateTimeFromInstant.get(ChronoField.YEAR);
+
+        String dayString = (day < 10 ? "0" : "") + day;
+        String monthString = (month < 10 ? "0" : "") + month;
+        String mmddyyyy = "" + monthString + "/" + dayString + "/" + year;
+        assertEquals(mmddyyyy, dateTime.mapFrom(source, incomingFormat));
+    }
+
+    void defaultMapInstant(DateTimeFormatterInterface dateTime) {
+        String source = dateTime.format(Instant.now());
+
+        TemporalAccessor dateTimeFromInstant = dateTime.getDefaultFormat().parse(source);
+
+        int day = dateTimeFromInstant.get(ChronoField.DAY_OF_MONTH);
+        int month = dateTimeFromInstant.get(ChronoField.MONTH_OF_YEAR); // one based
+        int year = dateTimeFromInstant.get(ChronoField.YEAR);
+
+        String dayString = (day < 10 ? "0" : "") + day;
+        String monthString = (month < 10 ? "0" : "") + month;
+        String yyyymmdd = year + "-" + monthString + "-" + dayString;
+
+        // caution we are mapping from the DateTimeFormatterTool defaultFormat-pattern
+        // without time!
+        // ISO_DATE_TIME will throw an error:
+        // java.time.temporal.UnsupportedTemporalTypeException: Unsupported field:
+        // HourOfDay
+        DateTimeFormatter outgoingFormat = DateTimeFormatter.ISO_DATE.withZone(ZoneId.systemDefault());
+        Assertions.assertEquals(yyyymmdd, dateTime.mapTo(source, outgoingFormat));
+
+        outgoingFormat = DateTimeFormatter.ISO_LOCAL_DATE.withZone(ZoneId.systemDefault());
+        Assertions.assertEquals(yyyymmdd, dateTime.mapTo(source, outgoingFormat));
+
+        // ISO_OFFSET_DATE : Unsupported field: OffsetSeconds
+        // ISO_INSTANT; Unsupported field: InstantSeconds
+        yyyymmdd = year + monthString + dayString;
+        outgoingFormat = DateTimeFormatter.BASIC_ISO_DATE.withZone(ZoneId.systemDefault());
+        assertEquals(yyyymmdd, dateTime.mapTo(source, outgoingFormat));
+    }
+
+    /*
+     * Class under test for String format(null, String)
+     */
+    void mapDateStringNullString(DateTimeFormatterInterface dateTime) {
+        DateTimeFormatter outgoingFormat = DateTimeFormatter.ISO_INSTANT;
+        Assertions.assertEquals("",
+                dateTime.mapFrom(null, outgoingFormat), "null argument should produce an empty String");
+    }
+
+    /*
+     * Class under test for String format(Date, "")
+     */
+    void mapDateStringEmptyString(DateTimeFormatterInterface dateTime) {
+        Instant today = Instant.now();
+        String todayFormatted = df.format(today);
+        Assertions.assertEquals("",
+                dateTime.mapFrom(todayFormatted, null), "Empty pattern should map to empty String");
+    }
+
+    /*
+     * Class under test for String format(null, String)
+     */
+    void formatDateStringNullString(DateTimeFormatterInterface dateTime) {
+        Assertions.assertEquals("",
+                dateTime.format(null, "MM/dd/xyyyy"), "null argument should produce an empty String");
+    }
+
+    /*
+     * Class under test for String format(Date, "")
+     */
+    void formatDateStringEmptyString(DateTimeFormatterInterface dateTime) {
+        Instant today = Instant.now();
+        Assertions.assertEquals("",
+                dateTime.format(today, ""), "Empty pattern should produce empty String");
+    }
+
+    /*
+     * Class under test for String format(Date, "")
+     */
+
+    void formatDateStringNullFormat(DateTimeFormatterInterface dateTime) {
+        Instant today = Instant.now();
+        Assertions.assertEquals("",
+                dateTime.format(today, null), "null pattern should produce empty String");
+    }
+
+    void formatInstantString(DateTimeFormatterInterface dateTime) {
+       
+        ZonedDateTime zonedToday = ZonedDateTime.now(dateTime.getZoneId());
+        int day = zonedToday.get(ChronoField.DAY_OF_MONTH);
+        int month = zonedToday.get(ChronoField.MONTH_OF_YEAR); // one based
+        int year = zonedToday.get(ChronoField.YEAR);
+
+        String dayString = (day < 10 ? "0" : "") + day;
+        String monthString = (month < 10 ? "0" : "") + month;
+        String ddmmyyyy = dayString + "/" + monthString + "/" + year;
+        String mmddyyyy = "" + monthString + "/" + dayString + "/" + year;
+        assertNotNull(ddmmyyyy);
+        assertNotNull(mmddyyyy);
+        
+        Instant today = Instant.now();
+        assertNotNull(dateTime.format(today, "dd/MM/yyyy"));
+        assertNotNull(dateTime.format(today, "MM"));
+        assertEquals(ddmmyyyy, dateTime.format(today, "dd/MM/yyyy"));
+        assertEquals(mmddyyyy, dateTime.format(today, "MM/dd/yyyy"));
+    }
+
+}
diff --git a/src/test/org/apache/turbine/services/localization/LocalizationToolTest.java b/src/test/org/apache/turbine/services/localization/LocalizationToolTest.java
index 150bba86..e555f5ae 100644
--- a/src/test/org/apache/turbine/services/localization/LocalizationToolTest.java
+++ b/src/test/org/apache/turbine/services/localization/LocalizationToolTest.java
@@ -28,8 +28,12 @@ import javax.servlet.ServletConfig;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.fulcrum.pool.PoolService;
 import org.apache.turbine.annotation.AnnotationProcessor;
+import org.apache.turbine.annotation.TurbineService;
+import org.apache.turbine.annotation.TurbineTool;
 import org.apache.turbine.services.TurbineServices;
+import org.apache.turbine.services.pull.PullService;
 import org.apache.turbine.services.rundata.RunDataService;
 import org.apache.turbine.test.BaseTestCase;
 import org.apache.turbine.util.RunData;
@@ -50,13 +54,23 @@ import org.junit.Test;
 public class LocalizationToolTest extends BaseTestCase
 {
     private static TurbineConfig tc = null;
+    
+    @TurbineTool(LocalizationTool.class)
     private LocalizationTool lt;
+    
+    @BeforeClass
+    public static void setUp() throws Exception
+    {
+        tc = new TurbineConfig(".", "/conf/test/TemplateService.properties");
+        tc.initialize();
+    }
 
     @Before
     public void initTool() throws Exception
     {
-        lt = new LocalizationTool();
-        AnnotationProcessor.process(lt);
+//       lt = new LocalizationTool();
+//        AnnotationProcessor.process(lt);
+        AnnotationProcessor.process(this);
         lt.init(getRunData());
     }
 
@@ -99,13 +113,6 @@ public class LocalizationToolTest extends BaseTestCase
         return runData;
     }
 
-    @BeforeClass
-    public static void setUp() throws Exception
-    {
-        tc = new TurbineConfig(".", "/conf/test/TestFulcrumComponents.properties");
-        tc.initialize();
-    }
-
     @AfterClass
     public static void tearDown() throws Exception
     {
diff --git a/src/test/org/apache/turbine/services/localization/RundataLocalizationToolTest.java b/src/test/org/apache/turbine/services/localization/RundataLocalizationToolTest.java
new file mode 100644
index 00000000..4ca27977
--- /dev/null
+++ b/src/test/org/apache/turbine/services/localization/RundataLocalizationToolTest.java
@@ -0,0 +1,123 @@
+package org.apache.turbine.services.localization;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import static org.mockito.Mockito.mock;
+
+import java.util.Locale;
+
+import javax.servlet.ServletConfig;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.fulcrum.security.model.turbine.entity.TurbineUser;
+import org.apache.fulcrum.testcontainer.BaseUnit5Test;
+import org.apache.turbine.annotation.AnnotationProcessor;
+import org.apache.turbine.annotation.TurbineTool;
+import org.apache.turbine.om.security.DefaultUserImpl;
+import org.apache.turbine.om.security.User;
+import org.apache.turbine.services.TurbineServices;
+import org.apache.turbine.services.rundata.RunDataService;
+import org.apache.turbine.util.RunData;
+import org.apache.turbine.util.TurbineConfig;
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+/**
+ * Unit test for Localization Tool. Verifies that localization works the same using the
+ * deprecated Turbine localization service as well as the new Fulcrum Localization
+ * component.
+ *
+ * @author <a href="mailto:epugh@upstate.com">Eric Pugh</a>
+ * @version $Id$
+ */
+public class RundataLocalizationToolTest extends BaseUnit5Test
+{
+    private static TurbineConfig tc = null;
+    
+    @TurbineTool(LocalizationTool.class)
+    private LocalizationTool lt;
+    
+    @BeforeAll
+    public static void setUp() throws Exception
+    {
+        tc = new TurbineConfig(".", "/conf/test/rundataTemplateService.properties");
+        tc.initialize();
+        
+    }
+
+    @BeforeEach
+    public void initTool() throws Exception
+    {
+        AnnotationProcessor.process(this);   
+        lt.init(getRunData());
+    }
+
+    @Test
+    public void testGet() throws Exception
+    {
+        assertEquals("wert1", lt.get("key1"));
+        assertEquals("wert3", lt.get("key3"));
+    }
+
+    @Test
+    public void testGetLocale() throws Exception
+    {
+        assertNotNull(lt.getLocale());
+        assertEquals("DE", lt.getLocale().getCountry());
+        assertEquals("de", lt.getLocale().getLanguage());
+    }
+
+    @Test
+    public void testInit() throws Exception
+    {
+        assertNotNull(lt.getLocale());
+    }
+
+    private RunData getRunData() throws Exception
+    {
+        RunDataService rds = (RunDataService) TurbineServices.getInstance().getService(RunDataService.SERVICE_NAME);
+        ServletConfig config = mock(ServletConfig.class);
+        HttpServletRequest request = getMockRequest();
+        HttpServletResponse response = mock(HttpServletResponse.class);
+        RunData runData = rds.getRunData(request, response, config);
+        
+        User user = null;
+        try {
+            user = new DefaultUserImpl(mock(TurbineUser.class));
+            user.setTemp("locale", new Locale("de","DE") );
+            runData.setUser(user);            
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        
+        return runData;
+    }
+
+    @AfterAll
+    public static void destroy() {
+        tc.dispose();
+    }
+}
diff --git a/src/test/org/apache/turbine/services/rundata/DefaultTurbineRunDataTest.java b/src/test/org/apache/turbine/services/rundata/DefaultTurbineRunDataTest.java
index deded81a..089c84a3 100644
--- a/src/test/org/apache/turbine/services/rundata/DefaultTurbineRunDataTest.java
+++ b/src/test/org/apache/turbine/services/rundata/DefaultTurbineRunDataTest.java
@@ -44,7 +44,7 @@ public class DefaultTurbineRunDataTest extends BaseTestCase
 		Turbine.getConfiguration().setProperty(
 			  TurbineConstants.LOCALE_DEFAULT_COUNTRY_KEY,
 			  "UK");
-        assertEquals("ISO-8859-1", LocaleUtils.getDefaultCharSet());
+        assertEquals("ISO-8859-1", LocaleUtils.getDefaultCharset().name());
     }
 
     @BeforeClass
diff --git a/src/test/org/apache/turbine/services/schedule/JobQueueTest.java b/src/test/org/apache/turbine/services/schedule/JobQueueTest.java
new file mode 100644
index 00000000..54d0cd77
--- /dev/null
+++ b/src/test/org/apache/turbine/services/schedule/JobQueueTest.java
@@ -0,0 +1,95 @@
+package org.apache.turbine.services.schedule;
+
+/*
+* Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*   http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing,
+* software distributed under the License is distributed on an
+* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+* KIND, either express or implied.  See the License for the
+* specific language governing permissions and limitations
+* under the License.
+*/
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
+import org.apache.turbine.util.TurbineException;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * Unit testing for JobQueue.
+ *
+ * @author <a href="mailto:tv@apache.org">Thomas Vandahl</a>
+ */
+public class JobQueueTest
+{
+    private JobQueue<JobEntryNonPersistent> queue;
+    private JobEntryNonPersistent je1;
+    private JobEntryNonPersistent je2;
+
+    @Before
+    public void setUpBefore() throws Exception
+    {
+        queue = new JobQueue<>();
+
+        // Add a new job entry
+        je1 = new JobEntryNonPersistent(1,2,3,4,5,"je1");
+        je1.setJobId(1);
+
+        je2 = new JobEntryNonPersistent(0,2,3,4,5,"je2");
+        je2.setJobId(2);
+    }
+
+    /**
+     * Test job queue functions
+     * @throws TurbineException if the queue update fails
+     */
+    @Test
+    public void testJobQueue() throws TurbineException
+    {
+        assertNull(queue.getNext());
+
+        queue.add(je2);
+        queue.add(je1);
+        assertEquals(2, queue.list().size());
+
+        JobEntryNonPersistent je_a = queue.getNext();
+        assertNotNull(je_a);
+        assertEquals(je2, je_a);
+        assertEquals(1, queue.list().size());
+
+        JobEntryNonPersistent je_b = queue.getJob(je2);
+        assertNull(je_b);
+        JobEntryNonPersistent je_c = queue.getJob(je1);
+        assertNotNull(je_c);
+        assertEquals(je1, je_c);
+
+        je_c.setSecond(2);
+        queue.updateQueue(je_c);
+        assertEquals(1, queue.list().size());
+
+        je2.setSecond(3);
+        queue.updateQueue(je2);
+        JobEntryNonPersistent je_d = queue.getNext();
+        assertNotNull(je_d);
+        assertEquals(je1, je_d);
+        JobEntryNonPersistent je_e = queue.getNext();
+        assertNotNull(je_e);
+        assertEquals(je2, je_e);
+
+        // queue should now be empty
+        assertNull(queue.list());
+    }
+
+}
diff --git a/src/test/org/apache/turbine/services/schedule/QuartzSchedulerServiceTest.java b/src/test/org/apache/turbine/services/schedule/QuartzSchedulerServiceTest.java
index 3e5c92d8..4e03ac0a 100644
--- a/src/test/org/apache/turbine/services/schedule/QuartzSchedulerServiceTest.java
+++ b/src/test/org/apache/turbine/services/schedule/QuartzSchedulerServiceTest.java
@@ -19,20 +19,17 @@ package org.apache.turbine.services.schedule;
  * under the License.
  */
 
-
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 
 import org.apache.turbine.modules.scheduledjobs.SimpleJob;
 import org.apache.turbine.services.TurbineServices;
 import org.apache.turbine.test.BaseTestCase;
 import org.apache.turbine.util.TurbineConfig;
 import org.apache.turbine.util.TurbineException;
-import org.hamcrest.CoreMatchers;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -128,7 +125,7 @@ public class QuartzSchedulerServiceTest extends BaseTestCase
         {
             JobKey jk = new JobKey("SimpleJob", JobEntryQuartz.DEFAULT_JOB_GROUP_NAME);
 			JobEntry je = scheduler.getJob(jk.hashCode());
-			assertThat(je, CoreMatchers.instanceOf(JobEntryQuartz.class));
+			assertInstanceOf(JobEntryQuartz.class, je);
 			JobEntryQuartz jeq = (JobEntryQuartz)je;
             assertEquals(jeq.getJobTrigger().getJobKey(), jk);
             assertEquals(jeq.getTask(), "SimpleJob");
diff --git a/src/test/org/apache/turbine/services/schedule/TurbineNonPersistentSchedulerServiceTest.java b/src/test/org/apache/turbine/services/schedule/TurbineNonPersistentSchedulerServiceTest.java
index 34d394ab..31c7ca57 100644
--- a/src/test/org/apache/turbine/services/schedule/TurbineNonPersistentSchedulerServiceTest.java
+++ b/src/test/org/apache/turbine/services/schedule/TurbineNonPersistentSchedulerServiceTest.java
@@ -23,15 +23,14 @@ package org.apache.turbine.services.schedule;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 
 import org.apache.turbine.modules.scheduledjobs.SimpleJob;
 import org.apache.turbine.services.TurbineServices;
 import org.apache.turbine.util.TurbineConfig;
 import org.apache.turbine.util.TurbineException;
-import org.hamcrest.CoreMatchers;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -127,7 +126,7 @@ public class TurbineNonPersistentSchedulerServiceTest
         try
         {
 			JobEntry je = scheduler.getJob(1);
-			assertThat(je, CoreMatchers.instanceOf(JobEntryNonPersistent.class));
+			assertInstanceOf(JobEntryNonPersistent.class, je);
 			JobEntryNonPersistent jenp = (JobEntryNonPersistent)je;
             assertEquals(1, jenp.getJobId());
             assertEquals(1, jenp.getSecond());
diff --git a/src/test/org/apache/turbine/services/urlmapper/TurbineURLMapperServiceTest.java b/src/test/org/apache/turbine/services/urlmapper/TurbineURLMapperServiceTest.java
index 6492fde4..7aed2ab8 100644
--- a/src/test/org/apache/turbine/services/urlmapper/TurbineURLMapperServiceTest.java
+++ b/src/test/org/apache/turbine/services/urlmapper/TurbineURLMapperServiceTest.java
@@ -197,14 +197,10 @@ public class TurbineURLMapperServiceTest extends BaseTestCase
 
         System.out.println("s1 estimateSize: " + spliterator1.estimateSize());
         spliterator1.forEachRemaining((IntConsumer) i ->
-        {
-            runCheck(templateURIs, counterSum, counters, parallel, sr);
-        });
+                runCheck(templateURIs, counterSum, counters, parallel, sr));
         System.out.println("s2 estimateSize: " + spliterator2.estimateSize());
         spliterator2.forEachRemaining((IntConsumer) i ->
-        {
-            runCheck(templateURIs, counterSum, counters, parallel, sr);
-        });
+                runCheck(templateURIs, counterSum, counters, parallel, sr));
 
         for (int i = 0; i < counters.size() - 1; i++)
         {
diff --git a/src/test/org/apache/turbine/services/urlmapper/model/URLMappingContainerTest.java b/src/test/org/apache/turbine/services/urlmapper/model/URLMappingContainerTest.java
index e8a6ec39..31dc81af 100644
--- a/src/test/org/apache/turbine/services/urlmapper/model/URLMappingContainerTest.java
+++ b/src/test/org/apache/turbine/services/urlmapper/model/URLMappingContainerTest.java
@@ -30,8 +30,8 @@ import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
 
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.Unmarshaller;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.Unmarshaller;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/src/test/org/apache/turbine/services/velocity/PathConverterTest.java b/src/test/org/apache/turbine/services/velocity/PathConverterTest.java
index 5bde115b..03201748 100644
--- a/src/test/org/apache/turbine/services/velocity/PathConverterTest.java
+++ b/src/test/org/apache/turbine/services/velocity/PathConverterTest.java
@@ -21,59 +21,66 @@ package org.apache.turbine.services.velocity;
  */
 
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-import java.io.File;
-
 import org.apache.commons.configuration2.Configuration;
 import org.apache.turbine.Turbine;
-import org.apache.turbine.services.TurbineServices;
+import org.apache.turbine.annotation.AnnotationProcessor;
+import org.apache.turbine.annotation.TurbineService;
 import org.apache.turbine.test.BaseTestCase;
 import org.apache.turbine.util.TurbineConfig;
 import org.apache.velocity.app.VelocityEngine;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.TestInstance;
+
+import java.io.File;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /**
  * Tests startup of the Velocity Service and translation of various
  * path patterns.
  *
  * @author <a href="hps@intermeta.de">Henning P. Schmiedehausen</a>
- * @version $Id$
+ *
  */
 
+@TestInstance(TestInstance.Lifecycle.PER_CLASS)
 public class PathConverterTest
     extends BaseTestCase
 {
     private static TurbineConfig tc = null;
-    private static VelocityService vs = null;
 
-    @BeforeClass
-    public static void setUp() throws Exception {
+    @TurbineService
+    private VelocityService vs = null;
+
+    @BeforeAll
+    public void setUp() throws Exception {
         tc = new TurbineConfig(".", "/conf/test/TemplateService.properties");
         tc.initialize();
 
-        vs = (VelocityService) TurbineServices.getInstance().getService(VelocityService.SERVICE_NAME);
+        AnnotationProcessor.process(this);
+        //vs = (VelocityService) TurbineServices.getInstance().getService(VelocityService.SERVICE_NAME);
+        assertNotNull(vs);
     }
 
-    @AfterClass
-    public static void destroy() throws Exception {
+    @AfterAll
+    public void destroy() throws Exception {
         vs.shutdown();
         tc.dispose();
     }
 
-    @Test public void testService()
+    @Test
+    void testService()
         throws Exception
     {
-
         // Can we start the service?
-        assertNotNull("Could not load Service!", vs);
+        assertNotNull(vs, "Could not load Service!");
     }
 
     @Test
-    public void testPathTranslation()
+     void testPathTranslation()
         throws Exception
     {
         Configuration conf = vs.getConfiguration();
@@ -83,42 +90,45 @@ public class PathConverterTest
         String rootPath = Turbine.getRealPath("");
 
         String test1 = (String) ve.getProperty("test1.resource.loader.path");
-        assertNotNull("No Test1 Property found", test1);
-        assertEquals("Test1 Path translation failed", rootPath
-                +File.separator+"relative"+File.separator+"path" , test1);
+        assertNotNull( test1, "No Test1 Property found");
+        assertEquals( String.join(File.separator, rootPath, "relative", "path"), test1,
+                "Test1 Path translation failed");
 
         String test2 = (String) ve.getProperty("test2.resource.loader.path");
-        assertNotNull("No Test2 Property found", test2);
-        assertEquals("Test2 Path translation failed", rootPath
-                +File.separator+"absolute"+File.separator+"path" , test2);
+        assertNotNull( test2, "No Test2 Property found");
+        assertEquals(String.join(File.separator, rootPath, "absolute", "path"), test2,
+                "Test2 Path translation failed");
 
         String test3 = (String) ve.getProperty("test3.resource.loader.path");
-        assertNotNull("No Test3 Property found", test3);
-        assertEquals("Test3 Path translation failed", rootPath
-                +File.separator+"jar-file.jar!/", test3);
+        assertNotNull( test3, "No Test3 Property found");
+        assertEquals(
+                rootPath +File.separator+"jar-file.jar!/", test3,
+                "Test3 Path translation failed");
 
         String test4 = (String) ve.getProperty("test4.resource.loader.path");
-        assertNotNull("No Test4 Property found", test4);
-        assertEquals("Test4 Path translation failed", rootPath
-                +File.separator+"jar-file.jar!/with/some/extensions" , test4);
+        assertNotNull( test4, "No Test4 Property found");
+        assertEquals(rootPath +File.separator+"jar-file.jar!/with/some/extensions" , test4,
+                "Test4 Path translation failed");
 
         String test5 = (String) ve.getProperty("test5.resource.loader.path");
-        assertNotNull("No Test5 Property found", test5);
-        assertEquals("Test5 Path translation failed", rootPath
-                +File.separator+"jar-file.jar" , test5);
+        assertNotNull( test5,"No Test5 Property found");
+        assertEquals(rootPath
+                +File.separator+"jar-file.jar" , test5,
+                "Test5 Path translation failed");
 
         String test6 = (String) ve.getProperty("test6.resource.loader.path");
-        assertNotNull("No Test6 Property found", test6);
-        assertEquals("Test6 Path translation failed", "jar:http://jar.on.website/" , test6);
+        assertNotNull(test6, "No Test6 Property found");
+        assertEquals("jar:http://jar.on.website/" , test6,
+                "Test6 Path translation failed");
 
         String test7 = (String) ve.getProperty("test7.resource.loader.path");
-        assertNotNull("No Test7 Property found", test7);
-        assertEquals("Test7 Path translation failed", rootPath
-                +File.separator+"file"+File.separator
-                +"system"+File.separator+"reference" , test7);
+        assertNotNull(test7, "No Test7 Property found");
+        assertEquals(String.join(File.separator, rootPath, "file", "system", "reference"), test7,
+                "Test7 Path translation failed");
 
         String test8 = (String) ve.getProperty("test8.resource.loader.path");
-        assertNotNull("No Test8 Property found", test8);
-        assertEquals("Test8 Path translation failed", "http://reference.on.website/" , test8);
+        assertNotNull(test8, "No Test8 Property found");
+        assertEquals("http://reference.on.website/", test8,
+                "Test8 Path translation failed");
     }
 }
diff --git a/src/test/org/apache/turbine/test/HsqlDB.java b/src/test/org/apache/turbine/test/HsqlDB.java
deleted file mode 100644
index cdfb1aed..00000000
--- a/src/test/org/apache/turbine/test/HsqlDB.java
+++ /dev/null
@@ -1,115 +0,0 @@
-package org.apache.turbine.test;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
-import java.nio.file.Paths;
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.SQLException;
-import java.sql.Statement;
-
-import org.apache.commons.lang3.StringUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.hsqldb.jdbcDriver;
-
-public class HsqlDB
-{
-    private Connection connection = null;
-    private static Log log = LogFactory.getLog(HsqlDB.class);
-
-    public HsqlDB(String uri, String loadFile)
-            throws Exception
-    {
-        Class.forName(jdbcDriver.class.getName());
-
-        this.connection = DriverManager.getConnection(uri, "sa", "");
-
-        if (StringUtils.isNotEmpty(loadFile))
-        {
-            loadSqlFile(loadFile);
-        }
-    }
-
-    public Connection getConnection()
-    {
-        return connection;
-    }
-
-    public void close()
-    {
-        try
-        {
-            connection.close();
-        }
-        catch (Exception e)
-        {
-            // ignore
-        }
-    }
-
-    private void loadSqlFile(String fileName)
-            throws Exception
-    {
-        try (Statement statement = connection.createStatement())
-        {
-            String commands = getFileContents(fileName);
-
-            for (int targetPos = commands.indexOf(';'); targetPos > -1; targetPos = commands.indexOf(';'))
-            {
-                String cmd = commands.substring(0, targetPos + 1).trim();
-
-                if (cmd.startsWith("--"))
-                {
-                    // comment
-                    int lineend = commands.indexOf('\n');
-                    if (lineend > -1)
-                    {
-                        targetPos = lineend - 1;
-                    }
-                }
-                else
-                {
-                    try
-                    {
-                        statement.execute(cmd);
-                    }
-                    catch (SQLException sqle)
-                    {
-                        log.warn("Statement: " + cmd + ": " + sqle.getMessage());
-                    }
-                }
-
-                commands = commands.substring(targetPos + 2);
-            }
-        }
-    }
-
-    private String getFileContents(String fileName)
-            throws Exception
-    {
-        byte[] bytes = Files.readAllBytes(Paths.get(fileName));
-
-        return new String(bytes, StandardCharsets.ISO_8859_1);
-    }
-}
-
diff --git a/src/test/org/apache/turbine/testcontainer/BuildContainerWithDockerfileTest.java b/src/test/org/apache/turbine/testcontainer/BuildContainerWithDockerfileTest.java
index 520623c5..071f5c81 100644
--- a/src/test/org/apache/turbine/testcontainer/BuildContainerWithDockerfileTest.java
+++ b/src/test/org/apache/turbine/testcontainer/BuildContainerWithDockerfileTest.java
@@ -23,10 +23,8 @@ import static junit.framework.TestCase.assertEquals;
 import static junit.framework.TestCase.assertFalse;
 import static junit.framework.TestCase.assertTrue;
 
-import java.io.File;
 import java.nio.file.FileSystems;
 import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.PreparedStatement;
diff --git a/src/test/org/apache/turbine/util/parser/BaseValueParserTest.java b/src/test/org/apache/turbine/util/parser/BaseValueParserTest.java
index 0373425c..60e371af 100644
--- a/src/test/org/apache/turbine/util/parser/BaseValueParserTest.java
+++ b/src/test/org/apache/turbine/util/parser/BaseValueParserTest.java
@@ -22,9 +22,9 @@ package org.apache.turbine.util.parser;
 
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.fail;
 
 import java.math.BigDecimal;
@@ -120,13 +120,13 @@ public class BaseValueParserTest extends BaseTestCase
         assertNull(result);
 
         // default
-        result = parser.getByteObject("default", new Byte((byte)3));
-        assertEquals(result, new Byte((byte)3));
+        result = parser.getByteObject("default", Byte.valueOf((byte)3));
+        assertEquals(result, Byte.valueOf((byte)3));
 
         // param exists
         parser.add("exists", "1");
         result = parser.getByteObject("exists");
-        assertEquals(result, new Byte((byte)1));
+        assertEquals(result, Byte.valueOf((byte)1));
 
         // unparsable value
         parser.add("unparsable", "a");
@@ -186,13 +186,13 @@ public class BaseValueParserTest extends BaseTestCase
         assertNull(result);
 
         // default
-        result = parser.getIntObject("default", new Integer(3));
-        assertEquals(result, new Integer(3));
+        result = parser.getIntObject("default", Integer.valueOf(3));
+        assertEquals(result, Integer.valueOf(3));
 
         // param exists
         parser.add("exists", "1");
         result = parser.getIntObject("exists");
-        assertEquals(result, new Integer(1));
+        assertEquals(result, Integer.valueOf(1));
 
         // unparsable value
         parser.add("unparsable", "a");
@@ -204,7 +204,7 @@ public class BaseValueParserTest extends BaseTestCase
         parser.add("array", "2");
         parser.add("array", "3");
         Integer arrayResult[] = parser.getIntObjects("array");
-        Integer compare[] = {new Integer(1), new Integer(2), new Integer(3)};
+        Integer compare[] = {Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)};
         assertEquals(arrayResult.length, compare.length);
         for( int i=0; i<compare.length; i++)
         {
@@ -216,7 +216,7 @@ public class BaseValueParserTest extends BaseTestCase
         parser.add("array2", "a");
         parser.add("array2", "3");
         Integer arrayResult2[] = parser.getIntObjects("array2");
-        Integer compare2[] = {new Integer(1), null, new Integer(3)};
+        Integer compare2[] = {Integer.valueOf(1), null, Integer.valueOf(3)};
         assertEquals(arrayResult2.length, compare2.length);
         for( int i=0; i<compare2.length; i++)
         {
@@ -276,13 +276,13 @@ public class BaseValueParserTest extends BaseTestCase
         assertNull(result);
 
         // default
-        result = parser.getFloatObject("default", new Float(3));
-        assertEquals(result, new Float(3));
+        result = parser.getFloatObject("default", Float.valueOf(3));
+        assertEquals(result, Float.valueOf(3));
 
         // param exists
         parser.add("exists", "1");
         result = parser.getFloatObject("exists");
-        assertEquals(result, new Float(1));
+        assertEquals(result, Float.valueOf(1));
 
         // unparsable value
         parser.add("unparsable", "a");
@@ -294,7 +294,7 @@ public class BaseValueParserTest extends BaseTestCase
         parser.add("array", "2");
         parser.add("array", "3");
         Float arrayResult[] = parser.getFloatObjects("array");
-        Float compare[] = {new Float(1), new Float(2), new Float(3)};
+        Float compare[] = {Float.valueOf(1), Float.valueOf(2), Float.valueOf(3)};
         assertEquals(arrayResult.length, compare.length);
         for( int i=0; i<compare.length; i++)
         {
@@ -306,7 +306,7 @@ public class BaseValueParserTest extends BaseTestCase
         parser.add("array2", "a");
         parser.add("array2", "3");
         Float arrayResult2[] = parser.getFloatObjects("array2");
-        Float compare2[] = {new Float(1), null, new Float(3)};
+        Float compare2[] = {Float.valueOf(1), null, Float.valueOf(3)};
         assertEquals(arrayResult2.length, compare2.length);
         for( int i=0; i<compare2.length; i++)
         {
@@ -366,13 +366,13 @@ public class BaseValueParserTest extends BaseTestCase
         assertNull(result);
 
         // default
-        result = parser.getDoubleObject("default", new Double(3));
-        assertEquals(result, new Double(3));
+        result = parser.getDoubleObject("default", Double.valueOf(3));
+        assertEquals(result, Double.valueOf(3));
 
         // param exists
         parser.add("exists", "1");
         result = parser.getDoubleObject("exists");
-        assertEquals(result, new Double(1));
+        assertEquals(result, Double.valueOf(1));
 
         // unparsable value
         parser.add("unparsable", "a");
@@ -384,7 +384,7 @@ public class BaseValueParserTest extends BaseTestCase
         parser.add("array", "2");
         parser.add("array", "3");
         Double arrayResult[] = parser.getDoubleObjects("array");
-        Double compare[] = {new Double(1), new Double(2), new Double(3)};
+        Double compare[] = {Double.valueOf(1), Double.valueOf(2), Double.valueOf(3)};
         assertEquals(arrayResult.length, compare.length);
         for( int i=0; i<compare.length; i++)
         {
@@ -396,7 +396,7 @@ public class BaseValueParserTest extends BaseTestCase
         parser.add("array2", "a");
         parser.add("array2", "3");
         Double arrayResult2[] = parser.getDoubleObjects("array2");
-        Double compare2[] = {new Double(1), null, new Double(3)};
+        Double compare2[] = {Double.valueOf(1), null, Double.valueOf(3)};
         assertEquals(arrayResult2.length, compare2.length);
         for( int i=0; i<compare2.length; i++)
         {
@@ -456,13 +456,13 @@ public class BaseValueParserTest extends BaseTestCase
         assertNull(result);
 
         // default
-        result = parser.getLongObject("default", new Long(3));
-        assertEquals(result, new Long(3));
+        result = parser.getLongObject("default", Long.valueOf(3));
+        assertEquals(result, Long.valueOf(3));
 
         // param exists
         parser.add("exists", "1");
         result = parser.getLongObject("exists");
-        assertEquals(result, new Long(1));
+        assertEquals(result, Long.valueOf(1));
 
         // unparsable value
         parser.add("unparsable", "a");
@@ -474,7 +474,7 @@ public class BaseValueParserTest extends BaseTestCase
         parser.add("array", "2");
         parser.add("array", "3");
         Long arrayResult[] = parser.getLongObjects("array");
-        Long compare[] = {new Long(1), new Long(2), new Long(3)};
+        Long compare[] = {Long.valueOf(1), Long.valueOf(2), Long.valueOf(3)};
         assertEquals(arrayResult.length, compare.length);
         for( int i=0; i<compare.length; i++)
         {
@@ -486,7 +486,7 @@ public class BaseValueParserTest extends BaseTestCase
         parser.add("array2", "a");
         parser.add("array2", "3");
         Long arrayResult2[] = parser.getLongObjects("array2");
-        Long compare2[] = {new Long(1), null, new Long(3)};
+        Long compare2[] = {Long.valueOf(1), null, Long.valueOf(3)};
         assertEquals(arrayResult2.length, compare2.length);
         for( int i=0; i<compare2.length; i++)
         {
diff --git a/src/torque/schema/id-table-schema.xml b/src/torque/schema/id-table-schema.xml
index cad0c29a..2f90cfe1 100644
--- a/src/torque/schema/id-table-schema.xml
+++ b/src/torque/schema/id-table-schema.xml
@@ -29,12 +29,13 @@
 <!-- @version $Id: id-table-schema.xml,v 1.2 2005/09/23 12:19:52 tvan Exp $ -->
 <!-- ==================================================================== -->
 
+               
 <database name="default"
     defaultIdMethod="none"
-    xmlns="http://db.apache.org/torque/4.0/templates/database"
+    xmlns="http://db.apache.org/torque/5.0/templates/database"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://db.apache.org/torque/4.0/templates/database
-        http://db.apache.org/torque/4.0/templates/database.xsd">
+    xsi:schemaLocation="http://db.apache.org/torque/5.0/templates/database 
+        http://db.apache.org/torque/torque-5.0/documentation/orm-reference/database-5-0-strict.xsd">
 
   <table name="ID_TABLE" idMethod="idbroker">
     <column name="ID_TABLE_ID" required="true" primaryKey="true" type="INTEGER"/>
diff --git a/src/torque/schema/scheduler-schema.xml b/src/torque/schema/scheduler-schema.xml
index 1688c183..393e36ca 100644
--- a/src/torque/schema/scheduler-schema.xml
+++ b/src/torque/schema/scheduler-schema.xml
@@ -34,10 +34,10 @@
 
 <database name="default"
     defaultIdMethod="none"
-    xmlns="http://db.apache.org/torque/4.0/templates/database"
+    xmlns="http://db.apache.org/torque/5.0/templates/database"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://db.apache.org/torque/4.0/templates/database
-        http://db.apache.org/torque/4.0/templates/database.xsd">
+    xsi:schemaLocation="http://db.apache.org/torque/5.0/templates/database 
+        http://db.apache.org/torque/torque-5.0/documentation/orm-reference/database-5-0-strict.xsd">
 
 
   <table name="TURBINE_SCHEDULED_JOB" idMethod="idbroker" javaName="JobEntryTorque"
diff --git a/suppression-owasp-fp.xml b/suppression-owasp-fp.xml
index 2703792f..05d60c4a 100644
--- a/suppression-owasp-fp.xml
+++ b/suppression-owasp-fp.xml
@@ -75,5 +75,33 @@
    <packageUrl regex="true">^pkg:maven/com\.google\.guava/guava@.*$</packageUrl>
    <cve>CVE-2020-8908</cve>
 </suppress>
+<suppress>
+   <notes><![CDATA[
+   file name: commons-configuration2-2.8.0.jar
+   ]]></notes>
+   <packageUrl regex="true">^pkg:maven/org\.apache\.commons/commons\-configuration2@.*$</packageUrl>
+   <cve>CVE-2021-37533</cve>
+</suppress>
+<suppress>
+   <notes><![CDATA[
+   file name: commons-email-1.5.jar
+   ]]></notes>
+   <packageUrl regex="true">^pkg:maven/org\.apache\.commons/commons\-email@.*$</packageUrl>
+   <cve>CVE-2021-37533</cve>
+</suppress>
+<suppress>
+   <notes><![CDATA[
+   file name: commons-beanutils-1.9.4.jar
+   ]]></notes>
+   <packageUrl regex="true">^pkg:maven/commons\-beanutils/commons\-beanutils@.*$</packageUrl>
+   <cve>CVE-2021-37533</cve>
+</suppress>
+<suppress>
+   <notes><![CDATA[
+   file name: angus-activation-2.0.1.jar
+   ]]></notes>
+   <packageUrl regex="true">^pkg:maven/org\.eclipse\.angus/angus\-activation@.*$</packageUrl>
+   <cve>CVE-2023-4218</cve>
+</suppress>
 
 </suppressions>
\ No newline at end of file
diff --git a/xdocs/features.xml b/xdocs/features.xml
index d4564555..f1252615 100644
--- a/xdocs/features.xml
+++ b/xdocs/features.xml
@@ -108,7 +108,7 @@ contributed</a> to Turbine over the last 10+ years.</strong>
     <li>
         Turbine Servlet works cleanly with Servlet API 2.4 and higher</li>
     <li>
-        Works with JDK 1.8 and higher - 100% Pure Java</li>
+        Version 5.1 requires JDK 1.8 and higher, Version 5.2 and above requires Java 11 and higher - 100% Pure Java</li>
 </ul>
 
 </section>
diff --git a/xdocs/how-to-build.xml b/xdocs/how-to-build.xml
index 3d6c2578..220f93e4 100644
--- a/xdocs/how-to-build.xml
+++ b/xdocs/how-to-build.xml
@@ -28,6 +28,9 @@
 
 <section name="How to build Turbine">
 
+<p>
+  First, check Java version is Java 11 or above.
+</p>
 <p>
   Turbine is built using the <a href="http://maven.apache.org/">Maven</a> build
   tool.  So to get started you should download and install Maven.
diff --git a/xdocs/howto/annotations.xml b/xdocs/howto/annotations.xml
index debd4e05..015212aa 100644
--- a/xdocs/howto/annotations.xml
+++ b/xdocs/howto/annotations.xml
@@ -146,6 +146,22 @@ is required and defines the name of the event. See the
 for usage and examples.
 </subsection>
 
+<subsection name="@TurbineTool">
+The annotation can only be used with a field.
+A declared field in a class annotated with <code>@TurbineTool</code>
+gets injected an instance of the specified <code>ApplicationTool</code> at
+the time the instance of the class is created. The field should have
+the type of the tool.
+<source><![CDATA[
+// Injected loader instance
+@TurbineTool( TemplateLink.class )
+private TemplateLink templateLink;
+]]></source>
+Normally a tool needs an context (request, global, user). You have to set the context by calling the 
+tool.init(Object object) method. E.g. in action methods you have access to request and session context objects.
+The annotation parameter is required and defines the type of the tool.
+</subsection>
+
 <subsection name="Performance Considerations">
 It is important to note that the processing of the annotations at
 the time the module class is instantiated takes some time. It is
diff --git a/xdocs/index.xml b/xdocs/index.xml
index bfe39c51..61d4f180 100644
--- a/xdocs/index.xml
+++ b/xdocs/index.xml
@@ -180,12 +180,15 @@ the current Turbine code.
         repository</a></li>
      <li>
         You can also access the archived (since 2021) <a href="https://svn.apache.org/viewvc/turbine/core/trunk/">Turbine SVN
-        repository</a></li>
+        repository (read only)</a></li>
     
     <li>
         You can access the <a href="https://github.com/apache/turbine-archetypes/">Turbine Archetype Git (rw)
         repository</a></li>
-    
+     <li>
+        You can access the <a href="https://github.com/apache/turbine-build/">Turbine Git build environment repository</a>. 
+        This is a GIT modules structure, which should help to manage all Turbine components in one place.
+     </li>
     <li>
         You can find more about the Turbine Ecosystem on <a href="https://gitbox.apache.org/repos/asf#turbine"> gitbox.apache.org (rw)
        </a> or on <a href="https://github.com/orgs/apache/repositories?language=&amp;q=turbine&amp;sort=&amp;type=" target="_new">Github</a> </li>
