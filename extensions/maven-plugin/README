=================================================
Copyright 2003,2004 The Apache Software Foundation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
=================================================

Maven Environment for Turbine Applications (META)
Version: 1.0
$Id$
=================================================

General
*******

The Maven Environment for Turbine Application (META) is an easy way to
get started with applications based on the Turbine Webapplication
framework and also a collection of "best practices" and configuration
information to get you started with writing code using the Turbine
framework.

It consists of a plugin for the Apache Maven project
(maven.apache.org) and can be downloaded separately from the Turbine
web site or the maven central repository on ibiblio.


How it works
************

META builds an application skeleton from a set of predefined
configuration files which are part of the plugin and some user
supplied parameters. Most of the parameters have reasonable defaults,
only the application name must be supplied by the developer.

As META tries to integrate with the maven web application environment
as seamlessly as possible, it requires a few properties from other
plugins to be set correctly. These are listed below for the various
targets.

Parameters are supplied either on the command line (if you want to
rapid prototype an application, you can do so by running a simple
maven command) or with a special properties file that will be read by
the META task.

Building the plugin
*******************

If you fetched a binary release or simply want to use the plugin
available from ibiblio, you can skip this section. It is only
interesting for you if you downloaded the source code either from CVS
or bundled with the turbine distribution and want to build the plugin
yourself from source.

Doing so is simple: Go to the base directory of the source and run

maven plugin

This builds the plugin and puts it into your maven.repo.local repository.

Alternative targets are

maven plugin:deploy

for installing the unpacked plugin into your local maven installation. This
is useful if you're testing or debugging the plugin.

maven plugin:install

for packing the plugin and installing it into your local maven
installation. This jar will be expanded next time maven is run.


META targets
************

All META targets are prefixed by "turbine" in the maven
environment. While META is distinctive in the Turbine context, using
meta:<xxx> proved confusing in the Maven context (is meta:<xxx> a
maven meta-task or is it part of the META environment?). So the META
environment uses the "turbine:" prefix.

Available targets are:

turbine:setup
=============

This is the setup procedure for a new application. It builds an
application skeleton in the current working directory.

The task reads an optional "setup.properties" file in the current
directory which can contain additional properties for setting up and
configuring the application.

turbine:deploy
==============

Installs the web application into your container. There are two ways
of deployment: inplace and container. Which one is the right one for
you depends on your application and appserver layout and your
development environment.

inplace deployment: You must set the "turbine.app.inplace" property to
                    "true". Now the META plugin will copy your build
                    web application tree into a subdirectory in your
                    current source tree. Default is "src/webapp", so
                    the web application will show up right next to
                    your src/java source tree.

container deployment: The turbine.app.inplace property must be set to
                      "false". Your application will be copied into
                      the webapps subdirectory of the container that
                      you've specified with the maven specific
                      maven.appserver.home property (which is used in
                      other plugins, too). Your application will be
                      put into a subdirectory which has the name of
                      your project id (<id> tag in your project.xml).




turbine:sql
===========

Your application will need some sql statements inserted into its
database. The security service, the scheduler service and probably
your application use database tables and these must be
initialized. This target generates all the sql files necessary to
create the tables, insert the id broker values and even do some
meaningful population of your tables (e.g. default logins).

If you're adventurous (and have your application configured correctly)
you should be able to run

maven torque:create-db turbine:sql torque:insert-sql

and have your database created and filled with default values in one
go.


turbine:webapp
==============

This target bundles your web application into a .WAR archive ready to
be deployed into a J2EE compliant servlet container.

This target does not bundle the source code of your application.


META callbacks
**************

Some of the regular maven targets get extended by META. To be able to
do this, a maven.xml file is created in your application root. This
file should only be modified if you're familiar with maven and know
what to change here.

The following targets get pre or post goals:

java:compile (pre)
============

Most Turbine applications generate some classes (the Torque peer
classes) at compile time. This preGoal ensures that java tree from
src/java gets copied into target/src and the auto-generated classes
are mixed in correctly.

Also runs the om generation targets if the peer classes are out of
date.


torque:init (pre)
===========

Copies the schema files from src/schema into the build tree and
replaces properties on the fly. As torque:init is run before every
other torque task, this preGoal ensures that all torque tasks work on
the latest schema file versions.


torque:insert-sql (pre)
=================

Makes sure that all SQL files are up-to-date before torque tries to
insert them into your databases.


torque:datasql (pre)
==============

Copies the data definition files and their dtds into the build tree.

torque:datadtd (pre)
==============

war:webapp (post)
==========

Copies the Turbine specific parts of a web application (templates,
scripts, styles, images and configuration) into the web application
tree.

clean:clean (post)
===========

When you run the clean:clean (or just clean) goal in your web
application and you use inplace deployment, then the clean goal also
removes your WEB-INF/lib and WEB-INF/classes directory. This ensures
that no stale classes or libraries from previous compile-deploy-test
cycles have been left behind.

There are also a few META private goals, which should never be called
directly. Unfortunately, as maven offers no way to hide these goals
from the user, they still show up with maven -g.

Never call these targets directly:

turbine:check-runtime-environment
turbine:check-setup-environment
turbine:copy-app-om
turbine:copy-data-dtd
turbine:copy-id-table-om
turbine:copy-om
turbine:copy-security-om
turbine:init
turbine:om-check
turbine:security-datadtd
turbine:security-datasql

These targets might change from relase to release (or even between
releases). They're not public and their function outside the META
plugin.jelly file is undefined.


META Properties
---------------

turbine.app.name (turbine:setup)

Function:	sets the name of the new application
Type:		String
Default:	**** NO DEFAULT ****
		Must be set for turbine:setup, else the task fails!

turbine.app.package (turbine:setup)

Function:	sets the java package of the new application
Type:		String
Default:	org.apache.turbine.app.${turbine.app.name}

turbine.app.om.name (turbine:setup)

Function:	sets the name of the OM datasource for the application
Type:		String
Default:	${turbine.app.name}

turbine.app.om.package (turbine:setup)

Function:	sets the package for the OM classes of the new application
Type:		String
Default:	${turbine.app.package}.om

turbine.app.om.security.name (turbine:setup)

Function:	sets the name of the OM datasource for the application which
                contains the security information (users, groups...)
Type:		String
Default:	${turbine.app.om.name}

turbine.app.om.security.package (turbine:setup)

Function:	sets the package for the OM classes of the new application which
                access the security information (users, groups...)
Type:		String
Default:	${turbine.app.om.package}

turbine.app.subdir (turbine:setup)

Function:	Defines whether to create the new application in the
                current directory or a subdirectory.
Type:		boolean (true/false)
Default:	"true" (use a subdirectory)

turbine.app.inplace (turbine:deploy)

Function:	Defines whether a web application should be
		treated as an inplace application (the source tree
		is located in the web application) or it should be
		copied into the application tree.
Type:		boolean (true/false)
Default:	"false" (copy the application tree into the web server)

turbine.app.inplace.dir

Function:	Defines where an inplace editing application is put.
		This property is only used, when inplace deployment is
		used (turbine.app.inplace is true).
Type:		String
Default:        src/webapp (The compiled web application is put
		into your development tree in the src/webapp 
		subdirectory).

Properties from other plugins
-----------------------------

maven.appserver.home (turbine:deploy)

Plugin:		appserver
Function:	Defines the root directory of the application server
                used for testing and/or deploying of the  application
		if you use container deployment(turbine.app.inplace is
		true)
Type:		String
Default:	not set

maven.appserver.name (turbine:setup)

Plugin:		appserver
Function:	Defines the name of the application server
                used for testing and/or deploying of the 
                application
Type:		String
Default:	tomcat (use a Jakarta Tomcat Application Server)

torque.database (turbine:setup)

Plugin:		torque
Function:	Sets the database type that this application will use
Type:		String
Default:	postgresql

torque.database.driver (turbine:setup)

Plugin:		torque
Function:	Set the database driver class
Type:		String
Default:	not set

torque.database.user (turbine:setup)

Plugin:		torque
Function:	Set the database user for connecting
Type:		String
Default:	not set

torque.database.password (turbine:setup)

Plugin:		torque
Function:	Set the database password for connecting
Type:		String
Default:	not set

torque.database.buildUrl (turbine:setup)

Plugin:		torque
Function:	Set an URL which can be used for creating tables
                and inserting data into the database
Type:		String
Default:	not set

torque.database.createUrl (turbine:setup)

Plugin:		torque
Function:	Set an URL which can be used by the Torque plugin
                to connect to the database engine to create the 
                requested database
Type:		String
Default:	not set
