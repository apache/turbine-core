<?xml version="1.0"?>
<!-- 
/*
 * Copyright 2001-2004 The Apache Software Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 -->

<document>
  <properties>
    <title>Maven Environment for Turbine Applications (META)</title>
    <author email="hps@intermeta.de">Henning P. Schmiedehausen</author>
  </properties>

  <body>

<section name="Maven goals and your development cycle">
<p>
If you tried out the example from the <a
href="getting_started.html">Getting Started</a> page, then you already
learned about two of the goals that the META plugin provides:<br/>
<ul>
<li><code>turbine:setup</code> creates the application skeleton of your new application.</li>
<li><code>turbine:deploy</code> installs an application into your web container.</li>
</ul>
</p>

<p>
The goals of the META plugin interact with many other goals from maven
to create your build environment. As the function of some is not
really intuitive, this is how the plugin is intended to be used:</p>
<p>
<source><![CDATA[
Development cycle for java code
===============================

           [development start]
                   |
                   V
               maven turbine:setup - generate skeleton
                   |
                   V
+----->  [application development]
|                  |
|                  V
^              maven java:compile  - compile code
|                  |
|                  V
+-<-- yes <--- Errors / Test failures?
|                  |
^                  |  no
|                  V
t              maven turbine:deploy - deploy to container
|                  |
|                  V
^          [In-container testing]
|                  |
|                  V
+-<-- yes <--- Errors?
|                  |
^                  |  no
|                  V
+-<-- no <---- Ready to ship?
                   |
                   | yes
                   V
               maven turbine:webapp - bind a war file
                   |
                   V
               Ship application
]]></source>
</p>
<p>
<source><![CDATA[
Development cycle for SQL code
==============================

            [development start]
                    |
                    V
                maven turbine:setup - generate skeleton
                    |
                    V
                maven torque:create-db - generate DB
                    |
                    V
 +----->  [application development]
 |                  |
 |                  V
 ^              maven turbine:sql - generate SQL code
 |                  |
 |                  V
 ^              maven torque:insert-sql - put SQL in DB
 |                  |
 |                  V
 +-<-- yes <--- Errors?
 |                  |
 ^                  |  no
 |                  V
 +-<-- no <---- Ready to ship?
                    |
                    | yes
                    V
    Ship files from target/sql directory
]]></source>
</p>
</section>

<section name="Setting up your application for the first time">

<subsection name="Ad hoc setup">
<p>
If you have tried out the &quot;helloworld&quot; example from the <a
href="getting_started.html">Getting Started</a> page, then you already
know that setting up a new Turbine-based application is just a single
maven command away. We will refer to this as &quot;ad hoc&quot; setup,
because you don't need to prepare anything before running the
<code>turbine:setup</code> goal.
</p>

<p>
Ad hoc setup is best used if you plan on doing lots of customization
work to your properties anyway or if you just need a quick skeleton to
test out something or jot down a few classes. You simply provide the
application name on the maven command line and META sets up the rest
for you using the plugin defaults.</p>

<source><![CDATA[
maven -Dturbine.app.name=<application name> turbine:setup
]]></source>

<p>
Note: In the subdirectory which contains your application skeleton,
there will be a META properties file, called <code>setup.properties</code>. This is
auto-generated by the plugin to make your setup reproducible.
</p>
</subsection>

<subsection name="Custom setup">
<p>
Sometimes, ad hoc simply won't cut the cake. Then you need to prepare
a properties file for the META plugin. This properties file is called
<a href="config.html#setup_properties"><code>setup.properties</code></a>
and must be in the directory where you will run the
<code>turbine:setup</code> goal. Inside this <code>setup.properties</code> file you
can use <a href="properties.html">all the properties defined by
META</a>.<br/> This is the only place where the &quot;Setup
Properties&quot; are used. So changing the <code>setup.properties</code> file after
running the <code>turbine:setup</code> goal won't do any changes to
your application unless you rerun the <code>turbine:setup</code> goal.
</p>
</subsection>

<p>
Both kinds of setup generate a <code>setup.properties</code> file
in the application itself. If you want to rebuild the skeleton, you
can delete all files but the <code>setup.properties</code> from the directory and
rerun <code>turbine:setup</code>.
</p>

</section>

<section name="Deploying your application with META">
<p>
Application development normally happens in cycles of programming,
compile and deploy. If you use an external web container, you simply
deploy your compiled application into its <code>webapp</code>
directory. However, if you want to use an integrated development
environment (IDE) like <a href="http://www.eclipse.org">Eclipse</a>,
then you might want to use its builtin web container for debugging and
testing.<br/> The META plugin supports both developmen styles (web
container and IDE) by using two different deployment modes.</p>

<p>Selecting one of the deployment styles and switching between them
can be done by changing the <code>turbine.app.inplace</code> property.
</p>

<subsection name="Container deployment">
<p>
Container deployment needs a working web container (e.g. <a
href="http://jakarta.apache.org/tomcat/">Jakarta Tomcat</a>) on your
local computer. It copies your application code and all turbine
support files into a web application in the <code>webapp</code>
subdirectory of your container. All you need to do is the configuration for
the appserver plugin (which also gives you the power to start and stop
your container from maven if it is supported. See the <a
href="http://maven.apache.org/reference/plugins/appserver/">appserver
plugin documentation</a> for more information). On the <a
href="properties.html">Properties Page</a> is a description of the
needed appserver properties.<br/> You can choose this mode by setting
the <code>turbine.app.inplace</code> property to <code>false</code>.
</p>
</subsection>

<subsection name="Inplace deployment">
<p>
Inplace deployment means, that you can freely choose the location
where your application will be deployed to. For an IDE, this will
probably be a path inside your application source tree so that the IDE
can pick up the changes you've made and reconfigure its integrated
container accordingly.<br/>
To chose this mode, you must set the <code>turbine.app.inplace</code>
property to <code>true</code> and set the
<code>turbine.app.inplace.dir</code> to point at your deployment
directory. The default is <code>src/webapp</code>, so that the
application tree lies next to the source tree in
<code>src/java</code>.
</p>
</subsection>
</section>
</body>
</document>
