<?xml version="1.0"?>
<!-- 
/*
 * Copyright 2001-2004 The Apache Software Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 -->

<document>
  <properties>
    <title>Configuration files</title>
    <author email="hps@intermeta.de">Henning P. Schmiedehausen</author>
  </properties>

  <body>

  <section name="Torque schema files">
  <p>
  Most Turbine applications use <a
  href="http://db.apache.org/torque/">Torque</a> to access
  databases. META supplies you with a few schema files to preset your
  database and to generate some data which can be put into the
  database by running the <code>torque:insert-sql</code> goal. All
  schema files are located in <code>src/schema</code>, their result is
  put into the <code>target/sql</code> directory.</p>

  <subsection name="application-specific files">
  <p>
  META generates a dummy schema file for you. If want to use Torque
  to access a database, you put your table definitions and data values
  into these files.
  <table>
  <tr>
    <th>Name</th>
    <th>Function</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>&lt;appname&gt;-schema.xml</td>
    <td>Torque Table definitions</td>
    <td>From this file are the OM peer and object classes and the
        database specific SQL files to create the tables and indices
        built.</td>
  </tr>
  <tr>
    <td>&lt;appname&gt;-data.xml</td>
    <td>Preset data</td>
    <td>Torque allows you to describe data for your custom tables in
       an XML file and load it into the database using the
       <code>torque:datasql</code> and <code>torque:insert-sql</code>
       tasks. The syntax of this file is described in the &lt;appname&gt;-data.dtd
       file and changes whenever your table definition file changes.</td>
  </tr>
  <tr>
    <td>&lt;appname&gt;-data.dtdp</td>
    <td>Data Type Definition for your custom tables</td>
    <td>If you want to use the data loading tasks of torque, you must describe
        your data in XML which is validated against this DTD. You
        don't have to update this file by hand, you can run the
        <code>torque:datadtd</code> goal and copy the resulting file
        from <code>target/sql</code> into your <code>src/schema</code>
        directory.<br/> The META generated file is just a dummy because there
        are no custom tables defined at setup time.</td>
  </tr>
  </table>
  </p>
  </subsection>

  <subsection name="ID Broker definition">
  <p>
  The plugin supplies you with a configuration file for generating an <code>ID_TABLE</code>
  table which is used by the Torque IdBroker to generate unique table row IDs. If you run
  the <code>turbine:sql</code> task, SQL for this table is generated. There are no peer and object classes
  for the id table.</p>
  </subsection>

  <subsection name="Turbine Security">
  <p>
  Even though the default META application uses no security, it still
  generates the necessary tables and informations to write a
  security-enabled application.<br/>
  META supplies table definition and preset data to be used in
  conjunction with the <a
  href="http://jakarta.apache.org/turbine/turbine-2.3/services/torque-security-service.html">Torque
  Security Service</a>. The Schema is similar to the <a
  href="http://jakarta.apache.org/turbine/turbine-2.3/services/torque-security-schema.html">Default
  Schema</a> described on the <a
  href="http://jakarta.apache.org/turbine/">Turbine web site</a>.</p>

  <p>
  META also provides a demo for presetting security tables from an XML
  file. <code>turbine-security-data.xml</code> and
  <code>turbine-security-data.dtd</code> are provided as examples and
  can be safely modified or removed if the values are not suitable for
  your application. There is no code inside the META plugin or a META
  generated application that uses the generated Users, Groups, Roles
  or Permissions.</p>

  <p>
  Note that loading security objects from an XML file has a major
  drawback: If you want to use password encryption, you must put the
  encrypted strings into the <code>Password</code> attributes of the
  TurbineUser elements. If you want to put cleartext passwords into
  the XML file, you must not use Password encryption. This is the
  reason why the default META configuration uses cleartext passwords.
  </p>
  </subsection>
</section>
</body>
</document>
