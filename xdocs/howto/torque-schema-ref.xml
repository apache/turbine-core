<?xml version="1.0"?>

<document>

 <properties>
  <title>Torque Database Schema Reference</title>
  <author email="jon@latchkey.com">Jon S. Stevens</author>
  <author email="warner@warneronstine.com">Warner Onstine</author>
 </properties>

<body>

<section name="Torque Database Schema Reference">

<p>
The Torque Database Schema Reference attempts to explain what the different elements 
and attributes are when defining your own database schema. In addition I will attempt to 
explain what attributes mean what in the different databases currently supported.
</p>

</section>

<section name="Elements and their attributes">
<p>
Some of the following examples are taken from the project-schema.xml document in the src/conf/torque/schema.
</p>
    <subsection name="Element: database">
    <p>The database element and its relevant attributes.</p>
    <source><![CDATA[
    <database name="MY_DATABASE" 
            defaultIdMethod="idBroker" 
            package="com.myapp.om" 
            baseClass="com.myapp.om.BaseClass" 
            basePeer="com.myapp.om.BasePeer"
            defaultJavaNamingMethod="underscore">
      <table name="SIMPLE">
        <!-- table info goes here -->
      </table>
    </database>]]>
    </source>
    <p>
    The database element has 6 attributes associated with it, they are:
        <ul>
            <li>name - The name of the database being referenced</li>
            <li>defaultIdMethod - How will the primary keys be created, defaults to "none"</li>
            <li>defaultJavaNamingMethod - indicates how a schema table or column name is mapped to a java class or method name respectively</li>
            <li>package - used for OM Peer generation</li>
            <li>baseClass - used for OM generation</li>
            <li>basePeer - used for OM Peer generation</li>
        </ul>
        The last four will be explained in detail below.
    </p>
    <p>
    The database element can contain the following elements:
    <ul>
        <li>table - one or more</li>
    </ul>
    </p>
    </subsection>
    <subsection name="Attribute: defaultIdMethod">
    <p>
    By defining this attribute at the database level it applies the defaultIdMethod to those
    tables which do not have an idMethod attribute defined.
    The attribute defaultIdMethod has 5 possible values, they are:
        <ul>
            <li>idbroker - This allows turbine to generate the IDs through its IDBroker Service</li>
            <li>native - Turbine will determine how the database will auto-generate IDs</li>
            <li>autoincrement - deprecated, please use native</li>
            <li>sequence - deprecated, please use native</li>
            <li>none - Typically used if you do not want IDs generated</li>
        </ul>
    </p>
    </subsection>
    <subsection name="Attribute: defaultJavaNamingMethod">
    <p>
    This attribute determines how table or column names, from the
    name attribute of the table or column element, are converted to a
    Java class or method name respectively when creating the OM java
    objects. defaultJavaNamingMethod can contain 3 different values:
        <ul>
	    <li>nochange - Indicates no change is performed.</li>
	    <li>underscore - Underscores are removed, First letter is
		      capitalized, first letter after an underscore
		      is capitalized, the rest of the letters are
		      converted to lowercase.</li>
	    <li>javaname - Same as underscore, but no letters are converted
		      to lowercase.</li>
       </ul>
    </p>
    </subsection>
    <subsection name="Attribute: package">
    <p>
    The base package in which this database will generate the Object Models associated with it.
    This overrides the targetPackage property in the torque build.properties file.
    </p>
    </subsection>
    <subsection name="Attribute: baseClass">
    <p>
    The base class to use when generating the Object Model. 
    This class does not have to extend org.apache.turbine.om.BaseObject.
    </p>
    </subsection>
    <subsection name="Attribute: basePeer">
    <p>
    The base peer to use when generating the Object Model Peers.
    Unlike baseClass, basePeer should extend BasePeer at some point in the chain, ie - it needs to be the superclass.
    </p>
    </subsection>
    
    <subsection name="Element: table">
    <p>The table element and its relevant attributes</p>
    <source><![CDATA[
    <table name="MY_TABLE" 
            javaName="table"
            idMethod="idbroker"
            skipSql="false"
            baseClass="com.myapp.om.table.BaseClass"
            basePeer="com.myapp.om.table.BasePeer"
            javaNamingMethod="underscore">
        <!-- column information here -->
    </table>]]>
    </source>
    <p>
    The table element has 9 attributes associated with it, they are:
        <ul>
            <li>name - The name of the database being referenced</li>
            <li>javaName - How this table will be referenced in java</li>
            <li>idMethod - How will the primary keys be created, defaults to "none"</li>
            <li>skipSql - Whether or not to skip SQL generation for this reference</li>
            <li>abstract - Whether or not to generate the class as Abstract or not</li>
            <li>alias - The table alias</li>
            <li>baseClass - used for OM Peer generation</li>
            <li>basePeer - used for OM Peer generation</li>

            <li>javaNamingMethod - Specifies how the name attribute is
            converted to the Java class name of the coresponding OM
            object.  this attribute overides the
            defaultJavaNamingMethod attribute of the database
            element</li>
        </ul>
        
    </p>
    <p>
    The table element can contain the following elements:
    <ul>
        <li>column - one or more</li>
        <li>foreign-key - 0 or more</li>
        <li>index - 0 or more</li>
        <li>unique - 0 or more</li>
        <li>id-method-parameter - 0 or more</li>
    </ul>
    </p>
    </subsection>
    <subsection name="Attribute: javaName">
    <p>
    This is the java class name to use when generating the Table or column. If this is missing the java name is generated
    in the following manner:<br/>
    Underscores are removed, first letter and first letter after each underscore is uppercased, 
    all other letters are lowercased. So YOUR_TABLE_NAME would become YourTableName.
    </p>
    </subsection>
    <subsection name="Element: column">
    <p>The column element and its relevant attributes</p>
    <source><![CDATA[
    <column name="MY_COLUMN"
            javaName="Column"
            primaryKey="true"
            required="true"
            size="4"
            type="VARCHAR"
            javaNamingMethod="underscore">
        <!-- inheritance info if necessary -->
    </column>
            ]]>
    </source>
    <p>
    The column element has 9 attributes associated with it, they are:
        <ul>
            <li>name - The name of the column being referenced</li>
            <li>javaName - How this column will be referred to in Java</li>
            <li>primaryKey - Is this a primary key or not (true or false)</li>
            <li>required - Whether a value is required in this field (true or false)</li>
            <li>type - What type of column is it? (Covered below), defaults to VARCHAR</li>
            <li>size - How many characters or digits can be stored?</li>
            <li>default - Default value to insert into field if it is missing.</li>
            <li>autoIncrement - Whether or not to auto-increment this field, defaults to "false"</li>
            <li>inheritance - ?</li>
            <li>inputValidator - ?</li>
        </ul>
        
    </p>
    <p>
    The column element can contain the following elements:
    <ul>
        <li>inheritance - 0 or more</li>
    </ul>
    </p>
    </subsection>

    <subsection name="Element: inheritance">
    <p>The inheritance element and its relevant attributes</p>
    <source><![CDATA[
    <inheritance key="key"
            class="classname"
            extends="mybase"/>
            ]]>
    </source>
    <p>
    The inheritance element has 3 attributes associated with it, they are:
        <ul>
            <li>key - ?</li>
            <li>class - ?</li>
            <li>extends - ?</li>
        </ul>
        
    </p>
    </subsection>
    <subsection name="Element: foreign-key">
    <p>The foreign-key element and its relevant attributes</p>
    <source><![CDATA[
    <foreign-key foreignTable="MY_TABLE">
    <!-- reference info -->
    </foreign-key>
            ]]>
    </source>
    <p>
    The foreign-key element has 1 attribute associated with it, it is:
        <ul>
            <li>foreignTable - the name of the table being referenced</li>
        </ul>
        
    </p>
    <p>
    The foreign-key element can contain the following elements:
    <ul>
        <li>reference - 1 or more</li>
    </ul>
    </p>
    </subsection>
    
    <subsection name="Element: reference">
    <p>The reference element and its relevant attributes</p>
    <source><![CDATA[
    <reference local="FK_TABLE_ID" foreign="PK_COLUMN_ID"/>
            ]]>
    </source>
    <p>
    The reference element has 2 attributes associated with it, they are:
        <ul>
            <li>local - the local reference</li>
            <li>foreign - the foreign key reference</li>
        </ul>
        
    </p>
    </subsection>
</section>
    

</body>
</document>

