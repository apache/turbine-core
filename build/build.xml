<?xml version="1.0"?>

<!-- Build file for Turbine -->

<project name="Turbine" default="jar" basedir=".">

    <!-- Give user a chance to override without editing this file
         (and without typing -D each time they invoke a target) -->
    <property file="${user.home}/.ant.properties" />
    <property file=".ant.properties" />

    <property name="Name" value="Turbine"/>
    <property name="version" value="2.2b1"/>
    <property name="project" value="turbine"/>
    <property name="build.dir" value="../bin"/>
    <property name="build.src" value="${build.dir}/src"/>
    <property name="build.dest" value="${build.dir}/classes"/>
    <property name="src.dir" value="../src"/>
    <property name="src.java.dir" value="${src.dir}/java"/>
    <property name="src.dtd.dir" value="${src.dir}/dtd"/>
    <property name="javadoc.destdir" value="../docs/apidocs"/>
    <property name="final.name" value="${project}-${version}"/>
    <property name="final.dir" value="../${final.name}/"/>
    <property name="year" value="1999-2001"/>
    <property name="ant.home" value="."/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>

    <property name="jdom.jar" value="jdom-b6.jar"/>
    <property name="jakarta.site2" value="../../jakarta-site2"/>
    
    <property name="docs.dest" value="../docs"/>
    <property name="docs.src" value="../xdocs"/>

    <!-- Build classpath -->
    <path id="classpath">
        <fileset dir=".">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="../lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- ================================================================== -->
    <!-- Prints useful build environment values                             -->
    <!-- ================================================================== -->
    <target name="env" depends="check_for_optional_packages">
        <echo message="java.home = ${java.home}"/>
        <echo message="user.home = ${user.home}"/>
        <echo message="java.class.path = ${java.class.path}"/>
        <echo message=""/>
    </target>

    <!-- ================================================================== -->
    <!-- Help on usage                                                      -->
    <!-- ================================================================== -->
    <target name="usage">
        <echo message="use -projecthelp to see the available targets"/>
    </target>

    <!-- ================================================================== -->
    <!-- Check to see what optional dependencies are available              -->
    <!-- ================================================================== -->
    <target name="check_for_optional_packages">
        <available property="jsdk2.2.present"
                   classname="javax.servlet.jsp.PageContext">
            <classpath refid="classpath"/>
        </available>
        <available property="junit.present"
           classname="junit.framework.TestCase">
            <classpath refid="classpath"/>
        </available>
        <available property="freemarker.present"
           classname="freemarker.template.Template">
            <classpath refid="classpath"/>
        </available>
        <available property="log4java.present"
           classname="org.apache.log4j.Category">
            <classpath refid="classpath"/>
        </available>
        <available property="castor.present"
           classname="org.exolab.castor.jdo.Database">
            <classpath refid="classpath"/>
        </available>
    </target>

    <!-- ================================================================== -->
    <!-- Prepares the build directory                                       -->
    <!-- ================================================================== -->
    <target name="prepare" depends="env">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dest}"/>
        <mkdir dir="${build.src}"/>

        <copy todir="${build.src}/org" filtering="yes">
            <fileset dir="${src.java.dir}/org">
                <include name="**/*.java"/>
                <include name="**/*.properties"/>
                <include name="**/package.html"/>

                <exclude name="**/torque/output/**"/>
                <exclude name="**/*Jsp*.java"/>
                <exclude name="**/jsp/**"/>
                <exclude name="**/*FreeMarker*.java"/>
                <exclude name="**/freemarker/**"/>
                <exclude name="**/assemblerbroker/util/python/*.java"/>
                <exclude name="**/samples/newtorque/input/**/*.java"/>
                <exclude name="**/*Test.java"/>
                <exclude name="**/test/**"/>
                <exclude name="**/services/logging/Log4JavaLogger.java"/>
                <exclude name="**/services/castor/*.java"/>
            </fileset>
        </copy>
        <available classname="org.apache.velocity.anakia.AnakiaTask"
            property="AnakiaTask.present"/>
    </target>

    <!-- ================================================================== -->
    <!-- Adds Jsp related files to the build directory                      -->
    <!-- ================================================================== -->
    <target name="prepare-jsp" depends="prepare" if="jsdk2.2.present">
        <copy todir="${build.src}/org" filtering="yes">
            <fileset dir="${src.java.dir}/org">
                <include name="**/*Jsp*.java"/>
                <include name="**/jsp/**"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Adds Freemarker related files to the build directory               -->
    <!-- ================================================================== -->
    <target name="prepare-freemarker" depends="prepare"
        if="freemarker.present">
        <copy todir="${build.src}/org" filtering="yes">
            <fileset dir="${src.java.dir}/org">
                <include name="**/*FreeMarker*.java"/>
                <include name="**/freemarker/**"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Adds JPython related files to the build directory                  -->
    <!-- ================================================================== -->
    <target name="prepare-python" depends="prepare">
        <copy todir="${build.src}/org" filtering="yes">
            <fileset dir="${src.java.dir}/org">
                <include name="**/assemblerbroker/util/python/*.java"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Adds testcase files to the build directory                         -->
    <!-- ================================================================== -->
    <target name="prepare-tests" depends="prepare" if="junit.present">
        <copy todir="${build.src}/org" filtering="yes">
            <fileset dir="${src.java.dir}/org">
                <include name="**/*Test.java"/>
                <include name="**/test/**"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Adds log4java files to the build directory                         -->
    <!-- ================================================================== -->
    <target name="prepare-log4java" depends="prepare" if="log4java.present">
        <copy todir="${build.src}/org" filtering="yes">
            <fileset dir="${src.java.dir}/org">
                <include name="**/services/logging/Log4JavaLogger.java"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Adds castor files to the build directory                           -->
    <!-- ================================================================== -->
    <target name="prepare-castor" depends="prepare" if="castor.present">
        <copy todir="${build.src}/org" filtering="yes">
            <fileset dir="${src.java.dir}/org">
                <include name="**/services/castor/*.java"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Compiles the source directory                                      -->
    <!-- ================================================================== -->
    <target name="compile"
            depends="prepare, prepare-jsp, prepare-freemarker,
                     prepare-log4java, prepare-castor"
            description="--> compiles the source code">
        <javac srcdir="${build.src}"
            destdir="${build.dest}"
            excludes="**/package.html"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">

            <classpath refid="classpath"/>
        </javac>

        <!-- copy database.dtd to the right place -->
        <copy file="${src.dtd.dir}/database.dtd"
              todir="${build.dest}/org/apache/turbine/torque/engine/database/transform"/>
        <!-- copy intake.dtd to the right place -->
        <copy file="${src.dtd.dir}/intake.dtd"
           todir="${build.dest}/org/apache/turbine/services/intake/transform"/>
    </target>

    <!-- ================================================================== -->
    <!-- Compiles the source directory and creates a .jar file              -->
    <!-- ================================================================== -->
    <target name="jar"
            depends="compile"
            description="--> generates the turbine.jar file (default)">
        <jar jarfile="${build.dir}/${final.name}.jar"
            basedir="${build.dest}"
            excludes="**/package.html"/>
    </target>

    <!-- ================================================================== -->
    <!-- jars the source directory                                          -->
    <!-- ================================================================== -->
    <target name="jarsrc"
            depends="prepare"
            description="--> generates the turbine.src.jar file containing source only">
        <jar jarfile="${build.dir}/${final.name}.src.jar"
            basedir="${build.src}"
            excludes="**/package.html"/>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the API documentation                                      -->
    <!-- ================================================================== -->
    <target name="javadocs"
            depends="prepare"
            description="--> generates the API documentation">
        <mkdir dir="${javadoc.destdir}"/>
        <javadoc
            sourcepath="${build.src}"
            packagenames="org.apache.turbine.*,org.apache.java.*,org.apache.jserv.*"
            destdir="${javadoc.destdir}"
            author="true"
            private="true"
            version="true"
            use="true"
            windowtitle="${Name} ${version} API"
            doctitle="${Name} ${version} API"
            bottom="Copyright &amp;copy; ${year} Apache Software Foundation. All Rights Reserved."
        >
            <classpath refid="classpath"/>
    </javadoc>
    </target>

    <!-- ================================================================== -->
    <!-- Package                                                            -->
    <!-- ================================================================== -->
    <target name="package" depends="jar,javadocs">
        <mkdir dir="${final.dir}"/>
        <mkdir dir="${final.dir}/src/java"/>

        <copy todir="${final.dir}/src/java">
            <fileset dir="${build.dir}/src"/>
        </copy>

        <copy todir="${final.dir}/docs">
            <fileset dir="../docs">
                <exclude name="**/dist/**"/>
            </fileset>
        </copy>

        <copy todir="${final.dir}/build">
            <fileset dir="../build"/>
        </copy>

        <copy todir="${final.dir}/lib">
            <fileset dir="../lib"/>
        </copy>

        <copy file="${build.dir}/${final.name}.jar" 
              tofile="${final.dir}/${final.name}.jar"/>
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP                                 -->
    <!-- ================================================================== -->
    <target name="package-zip"
            depends="package"
            description="--> generates the Turbine distribution as .zip">
        <delete file="../${final.name}.zip"/>
        <zip zipfile="../${final.name}.zip" basedir="../" 
             includes="**/${final.name}/**"/>
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with TAR-GZIP                            -->
    <!-- ================================================================== -->
    <target name="package-tgz"
            depends="package"
            description="--> generates the Turbine distribution as .tar.gz">
        <delete file="../${final.name}.tar"/>
        <delete file="../${final.name}.tar.gz"/>
        <tar tarfile="../${final.name}.tar" basedir="../" 
             includes="**/${final.name}/**"/>
        <gzip zipfile="../${final.name}.tar.gz" 
                  src="../${final.name}.tar"/>
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP and TAG-GZIP                    -->
    <!-- ================================================================== -->
    <target name="package-all"
            depends="package-zip, package-tgz"
            description="--> generates the .tar.gz and .zip distributions">
    </target>

    <!-- ================================================================== -->
    <!-- Same as package-all. It is just here for compatibility.            -->
    <!-- ================================================================== -->
    <target name="dist" depends="package-all">
    </target>

    <!-- ================================================================== -->
    <!-- Cleans up the build directory                                      -->
    <!-- ================================================================== -->
    <target name="clean" description="--> cleans up the build directory">
        <delete dir="${build.dir}"/>
    </target>

    <!-- ================================================================== -->
    <!-- Make Turbine documentation                                         -->
    <!-- ================================================================== -->
    <target name="check_for_jdom">
        <available property="jdom.present"
           classname="org.jdom.JDOMException">
            <classpath>
                <pathelement location="${jakarta.site2}/lib/${jdom.jar}"/>
            </classpath>
        </available>
    </target>
    <target depends="check_for_jdom" name="docs-prepare-error" 
            unless="jdom.present">
        <echo>
            The Jakarta-Site2 module is not present! Please check
            to make sure that you have checked it out from CVS.

            &lt;http://jakarta.apache.org/site/jakarta-site2.html&gt;
        </echo>
    </target>

    <target name="docs"
            depends="docs-prepare-error"
            description="--> generates the HTML documentation"
            if="jdom.present">

        <taskdef name="anakia"
            classname="org.apache.velocity.anakia.AnakiaTask">
            <classpath>
                <fileset dir="${jakarta.site2}/lib">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <anakia basedir="${docs.src}" destdir="${docs.dest}/"
             extension=".html" style="./site.vsl"
             projectFile="stylesheets/project.xml"
             excludes="**/stylesheets/** empty.xml"
             includes="**/*.xml"
             lastModifiedCheck="true"
             templatePath="${jakarta.site2}/xdocs/stylesheets">
        </anakia>

        <copy todir="${docs.dest}/images" filtering="no">
            <fileset dir="${docs.src}/images">
                <include name="**/*.gif"/>
                <include name="**/*.jpeg"/>
                <include name="**/*.jpg"/>
            </fileset>
        </copy>
        <!-- In case we have CSS someday
        <copy todir="${docs.dest}" filtering="no">
            <fileset dir="${docs.src}">
                <include name="**/*.css"/>
            </fileset>
        </copy>
        -->
      
    </target>

    <!-- ================================================================== -->
    <!-- Compile testcases                                                  -->
    <!-- ================================================================== -->
    <target name="compile-tests" depends="prepare-tests, compile"
            if="junit.present"/>

    <!-- ================================================================== -->
    <!-- Run testcases                                                      -->
    <!-- ================================================================== -->
    <target name="run-tests" depends="compile-tests" if="junit.present"
            description="--> runs all available testcases">
        <junit printsummary="no" haltonfailure="yes">
            <classpath>
                <pathelement location="${build.dest}"/>
                <path refid="classpath"/>
                <pathelement path="${classpath}"/>
            </classpath>

            <formatter type="plain" usefile="false"/>

            <batchtest>
                <fileset dir="${build.src}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- ================================================================== -->
    <!-- Run an single testcase                                             -->
    <!-- ================================================================== -->
    <target name="run-singletest" if="testcase" depends="compile-tests">
        <junit printsummary="no" haltonfailure="yes">
            <classpath>
                <pathelement location="${build.dest}"/>
                <path refid="classpath" />
                <pathelement path="${classpath}"/>
            </classpath>

            <formatter type="plain" usefile="false"/>

            <test name="${testcase}"/>
        </junit>
    </target>

    <!-- ================================================================== -->
    <!-- Create torque.jar for stand-alone use outside the context          -->
    <!-- of the TDK.                                                        -->
    <!-- ================================================================== -->
    <target name="torque"
            depends="compile"
            description="--> generates the torque distribution">
        <ant antfile="build-torque.xml">
          <property name="build.dir" value="${build.dir}"/>
        </ant>
    </target>

    <!-- ================================================================== -->
    <!-- Create intake.jar for stand-alone use outside the context          -->
    <!-- of the TDK.                                                        -->
    <!-- ================================================================== -->
    <target name="intake"
            depends="compile"
            description="--> generates the intake distribution">
        <ant antfile="build-intake.xml">
          <property name="build.dir" value="${build.dir}"/>
        </ant>
    </target>

    <!-- ================================================================== -->
    <!-- Create the Turbine SQL for all the supported DBs.                  -->
    <!-- ================================================================== -->
    <target name="turbine-sql"
            depends="compile"
            description="--> generates the Turbine SQL for all the supported DBs">
        <ant antfile="build-turbine-sql.xml"/>
    </target>

</project>
