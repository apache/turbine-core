package org.apache.turbine.services.schedule;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.Transaction;

/**
 * This class was autogenerated by Torque on:
 *
 * [Tue Jan 28 15:31:23 CST 2003]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to JobEntry
 */
public abstract class BaseJobEntry extends BaseObject
{
    /** The Peer class */
    private static final JobEntryPeer peer =
            new JobEntryPeer();

    /**
     * The value for the job_id field
     */
    private int job_id;

    /**
     * The value for the second field
     */
    private int second = -1;

    /**
     * The value for the minute field
     */
    private int minute = -1;

    /**
     * The value for the hour field
     */
    private int hour = -1;

    /**
     * The value for the week_day field
     */
    private int week_day = -1;

    /**
     * The value for the day_of_month field
     */
    private int day_of_month = -1;

    /**
     * The value for the task field
     */
    private String task;

    /**
     * The value for the email field
     */
    private String email;

    /**
     * The value for the property field
     */
    private byte[] property;

    /**
     * Get the JobId
     *
     * @return int
     */
    public int getJobId()
    {
        return job_id;
    }

    /**
     * Set the value of JobId
     *
     * @param v new value
     */
    public void setJobId(int v)
    {

        if (this.job_id != v)
        {
            this.job_id = v;
            setModified(true);
        }

    }

    /**
     * Get the Second
     *
     * @return int
     */
    public int getSecond()
    {
        return second;
    }

    /**
     * Set the value of Second
     *
     * @param v new value
     */
    public void setSecond(int v)
    {

        if (this.second != v)
        {
            this.second = v;
            setModified(true);
        }

    }

    /**
     * Get the Minute
     *
     * @return int
     */
    public int getMinute()
    {
        return minute;
    }

    /**
     * Set the value of Minute
     *
     * @param v new value
     */
    public void setMinute(int v)
    {

        if (this.minute != v)
        {
            this.minute = v;
            setModified(true);
        }

    }

    /**
     * Get the Hour
     *
     * @return int
     */
    public int getHour()
    {
        return hour;
    }

    /**
     * Set the value of Hour
     *
     * @param v new value
     */
    public void setHour(int v)
    {

        if (this.hour != v)
        {
            this.hour = v;
            setModified(true);
        }

    }

    /**
     * Get the WeekDay
     *
     * @return int
     */
    public int getWeekDay()
    {
        return week_day;
    }

    /**
     * Set the value of WeekDay
     *
     * @param v new value
     */
    public void setWeekDay(int v)
    {

        if (this.week_day != v)
        {
            this.week_day = v;
            setModified(true);
        }

    }

    /**
     * Get the DayOfMonth
     *
     * @return int
     */
    public int getDayOfMonth()
    {
        return day_of_month;
    }

    /**
     * Set the value of DayOfMonth
     *
     * @param v new value
     */
    public void setDayOfMonth(int v)
    {

        if (this.day_of_month != v)
        {
            this.day_of_month = v;
            setModified(true);
        }

    }

    /**
     * Get the Task
     *
     * @return String
     */
    public String getTask()
    {
        return task;
    }

    /**
     * Set the value of Task
     *
     * @param v new value
     */
    public void setTask(String v)
    {

        if (!ObjectUtils.equals(this.task, v))
        {
            this.task = v;
            setModified(true);
        }

    }

    /**
     * Get the Email
     *
     * @return String
     */
    public String getEmail()
    {
        return email;
    }

    /**
     * Set the value of Email
     *
     * @param v new value
     */
    public void setEmail(String v)
    {

        if (!ObjectUtils.equals(this.email, v))
        {
            this.email = v;
            setModified(true);
        }

    }

    /**
     * Get the Property
     *
     * @return byte[]
     */
    public byte[] getProperty()
    {
        return property;
    }

    /**
     * Set the value of Property
     *
     * @param v new value
     */
    public void setProperty(byte[] v)
    {

        if (!ObjectUtils.equals(this.property, v))
        {
            this.property = v;
            setModified(true);
        }

    }

    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("JobId");
            fieldNames.add("Second");
            fieldNames.add("Minute");
            fieldNames.add("Hour");
            fieldNames.add("WeekDay");
            fieldNames.add("DayOfMonth");
            fieldNames.add("Task");
            fieldNames.add("Email");
            fieldNames.add("Property");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("JobId"))
        {
            return new Integer(getJobId());
        }
        if (name.equals("Second"))
        {
            return new Integer(getSecond());
        }
        if (name.equals("Minute"))
        {
            return new Integer(getMinute());
        }
        if (name.equals("Hour"))
        {
            return new Integer(getHour());
        }
        if (name.equals("WeekDay"))
        {
            return new Integer(getWeekDay());
        }
        if (name.equals("DayOfMonth"))
        {
            return new Integer(getDayOfMonth());
        }
        if (name.equals("Task"))
        {
            return getTask();
        }
        if (name.equals("Email"))
        {
            return getEmail();
        }
        if (name.equals("Property"))
        {
            return getProperty();
        }
        return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(JobEntryPeer.JOB_ID))
        {
            return new Integer(getJobId());
        }
        if (name.equals(JobEntryPeer.SECOND))
        {
            return new Integer(getSecond());
        }
        if (name.equals(JobEntryPeer.MINUTE))
        {
            return new Integer(getMinute());
        }
        if (name.equals(JobEntryPeer.HOUR))
        {
            return new Integer(getHour());
        }
        if (name.equals(JobEntryPeer.WEEK_DAY))
        {
            return new Integer(getWeekDay());
        }
        if (name.equals(JobEntryPeer.DAY_OF_MONTH))
        {
            return new Integer(getDayOfMonth());
        }
        if (name.equals(JobEntryPeer.TASK))
        {
            return getTask();
        }
        if (name.equals(JobEntryPeer.EMAIL))
        {
            return getEmail();
        }
        if (name.equals(JobEntryPeer.PROPERTY))
        {
            return getProperty();
        }
        return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return new Integer(getJobId());
        }
        if (pos == 1)
        {
            return new Integer(getSecond());
        }
        if (pos == 2)
        {
            return new Integer(getMinute());
        }
        if (pos == 3)
        {
            return new Integer(getHour());
        }
        if (pos == 4)
        {
            return new Integer(getWeekDay());
        }
        if (pos == 5)
        {
            return new Integer(getDayOfMonth());
        }
        if (pos == 6)
        {
            return getTask();
        }
        if (pos == 7)
        {
            return getEmail();
        }
        if (pos == 8)
        {
            return getProperty();
        }
        return null;
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(JobEntryPeer.getMapBuilder()
                .getDatabaseMap().getName());
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch (TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

    }

    /** flag to prevent endless save loop, if this object is referenced
     by another object which falls in this transaction. */
    private boolean alreadyInSave = false;

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;




            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    JobEntryPeer.doInsert((JobEntry) this, con);
                    setNew(false);
                }
                else
                {
                    JobEntryPeer.doUpdate((JobEntry) this, con);
                }
            }

            alreadyInSave = false;
        }
    }

    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  job_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)

    {
        setJobId(((NumberKey) key).intValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key)
    {
        setJobId(Integer.parseInt(key));
    }

    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getJobId());
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public JobEntry copy() throws TorqueException
    {
        return copyInto(new JobEntry());
    }

    protected JobEntry copyInto(JobEntry copyObj) throws TorqueException
    {
        copyObj.setJobId(job_id);
        copyObj.setSecond(second);
        copyObj.setMinute(minute);
        copyObj.setHour(hour);
        copyObj.setWeekDay(week_day);
        copyObj.setDayOfMonth(day_of_month);
        copyObj.setTask(task);
        copyObj.setEmail(email);
        copyObj.setProperty(property);

        copyObj.setJobId(0);

        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public JobEntryPeer getPeer()
    {
        return peer;
    }
}
